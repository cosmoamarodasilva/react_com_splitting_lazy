{"ast":null,"code":"/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\nconst PROJECT_DIR = process.env.PROJECT_DIR;\n\nlet assert = require('assert');\n\nlet fs = require('fs');\n\nlet path = require('path');\n\nlet file = require(`${PROJECT_DIR}/lib/utils/file`);\n\nlet existsSync = fs.existsSync || path.existsSync;\n\nlet exec = require('child_process').execSync;\n\nsuite('fileUtils', function () {\n  test('mkdirP', function () {\n    let expected = [['foo'], ['foo', 'bar'], ['foo', 'bar', 'baz'], ['foo', 'bar', 'baz', 'qux']];\n    file.mkdirP('foo/bar/baz/qux');\n    let res = exec('find foo').toString().trim().split('\\n');\n\n    for (let i = 0, ii = res.length; i < ii; i++) {\n      assert.equal(path.join.apply(path, expected[i]), res[i]);\n    }\n\n    file.rmRf('foo');\n  });\n  test('rmRf', function () {\n    file.mkdirP('foo/bar/baz/qux');\n    file.rmRf('foo/bar');\n    let res = exec('find foo').toString().trim().split('\\n');\n    assert.equal(1, res.length);\n    assert.equal('foo', res[0]);\n    fs.rmdirSync('foo');\n  });\n  test('rmRf with symlink subdir', function () {\n    file.mkdirP('foo');\n    file.mkdirP('bar');\n    fs.writeFileSync('foo/hello.txt', 'hello, it\\'s me');\n    fs.symlinkSync('../foo', 'bar/foo');\n    file.rmRf('bar'); // Make sure the bar directory was successfully deleted\n\n    let barDeleted = false;\n\n    try {\n      fs.statSync('bar');\n    } catch (err) {\n      if (err.code == 'ENOENT') {\n        barDeleted = true;\n      }\n    }\n\n    assert.equal(true, barDeleted); // Make sure that the file inside the linked folder wasn't deleted\n\n    let res = fs.readdirSync('foo');\n    assert.equal(1, res.length);\n    assert.equal('hello.txt', res[0]); // Cleanup\n\n    fs.unlinkSync('foo/hello.txt');\n    fs.rmdirSync('foo');\n  });\n  test('rmRf with symlinked dir', function () {\n    file.mkdirP('foo');\n    fs.writeFileSync('foo/hello.txt', 'hello!');\n    fs.symlinkSync('foo', 'bar');\n    file.rmRf('bar'); // Make sure the bar directory was successfully deleted\n\n    let barDeleted = false;\n\n    try {\n      fs.statSync('bar');\n    } catch (err) {\n      if (err.code == 'ENOENT') {\n        barDeleted = true;\n      }\n    }\n\n    assert.equal(true, barDeleted); // Make sure that the file inside the linked folder wasn't deleted\n\n    let res = fs.readdirSync('foo');\n    assert.equal(1, res.length);\n    assert.equal('hello.txt', res[0]); // Cleanup\n\n    fs.unlinkSync('foo/hello.txt');\n    fs.rmdirSync('foo');\n  });\n  test('cpR with same name and different directory', function () {\n    file.mkdirP('foo');\n    fs.writeFileSync('foo/bar.txt', 'w00t');\n    file.cpR('foo', 'bar');\n    assert.ok(existsSync('bar/bar.txt'));\n    file.rmRf('foo');\n    file.rmRf('bar');\n  });\n  test('cpR with same to and from will throw', function () {\n    assert.throws(function () {\n      file.cpR('foo.txt', 'foo.txt');\n    });\n  });\n  test('cpR rename via copy in directory', function () {\n    file.mkdirP('foo');\n    fs.writeFileSync('foo/bar.txt', 'w00t');\n    file.cpR('foo/bar.txt', 'foo/baz.txt');\n    assert.ok(existsSync('foo/baz.txt'));\n    file.rmRf('foo');\n  });\n  test('cpR rename via copy in base', function () {\n    fs.writeFileSync('bar.txt', 'w00t');\n    file.cpR('bar.txt', 'baz.txt');\n    assert.ok(existsSync('baz.txt'));\n    file.rmRf('bar.txt');\n    file.rmRf('baz.txt');\n  });\n  test('cpR keeps file mode', function () {\n    fs.writeFileSync('bar.txt', 'w00t', {\n      mode: 0o750\n    });\n    fs.writeFileSync('bar1.txt', 'w00t!', {\n      mode: 0o744\n    });\n    file.cpR('bar.txt', 'baz.txt');\n    file.cpR('bar1.txt', 'baz1.txt');\n    assert.ok(existsSync('baz.txt'));\n    assert.ok(existsSync('baz1.txt'));\n    let bazStat = fs.statSync('baz.txt');\n    let bazStat1 = fs.statSync('baz1.txt');\n    assert.equal(0o750, bazStat.mode & 0o7777);\n    assert.equal(0o744, bazStat1.mode & 0o7777);\n    file.rmRf('bar.txt');\n    file.rmRf('baz.txt');\n    file.rmRf('bar1.txt');\n    file.rmRf('baz1.txt');\n  });\n  test('cpR keeps file mode when overwriting with preserveMode', function () {\n    fs.writeFileSync('bar.txt', 'w00t', {\n      mode: 0o755\n    });\n    fs.writeFileSync('baz.txt', 'w00t!', {\n      mode: 0o744\n    });\n    file.cpR('bar.txt', 'baz.txt', {\n      silent: true,\n      preserveMode: true\n    });\n    assert.ok(existsSync('baz.txt'));\n    let bazStat = fs.statSync('baz.txt');\n    assert.equal(0o755, bazStat.mode & 0o777);\n    file.rmRf('bar.txt');\n    file.rmRf('baz.txt');\n  });\n  test('cpR does not keep file mode when overwriting', function () {\n    fs.writeFileSync('bar.txt', 'w00t', {\n      mode: 0o766\n    });\n    fs.writeFileSync('baz.txt', 'w00t!', {\n      mode: 0o744\n    });\n    file.cpR('bar.txt', 'baz.txt');\n    assert.ok(existsSync('baz.txt'));\n    let bazStat = fs.statSync('baz.txt');\n    assert.equal(0o744, bazStat.mode & 0o777);\n    file.rmRf('bar.txt');\n    file.rmRf('baz.txt');\n  });\n  test('cpR copies file mode recursively', function () {\n    fs.mkdirSync('foo');\n    fs.writeFileSync('foo/bar.txt', 'w00t', {\n      mode: 0o740\n    });\n    file.cpR('foo', 'baz');\n    assert.ok(existsSync('baz'));\n    let barStat = fs.statSync('baz/bar.txt');\n    assert.equal(0o740, barStat.mode & 0o777);\n    file.rmRf('foo');\n    file.rmRf('baz');\n  });\n  test('cpR keeps file mode recursively', function () {\n    fs.mkdirSync('foo');\n    fs.writeFileSync('foo/bar.txt', 'w00t', {\n      mode: 0o740\n    });\n    fs.mkdirSync('baz');\n    fs.mkdirSync('baz/foo');\n    fs.writeFileSync('baz/foo/bar.txt', 'w00t!', {\n      mode: 0o755\n    });\n    file.cpR('foo', 'baz', {\n      silent: true,\n      preserveMode: true\n    });\n    assert.ok(existsSync('baz'));\n    let barStat = fs.statSync('baz/foo/bar.txt');\n    assert.equal(0o740, barStat.mode & 0o777);\n    file.rmRf('foo');\n    file.rmRf('baz');\n  });\n  test('cpR copies directory mode recursively', function () {\n    fs.mkdirSync('foo', 0o755);\n    fs.mkdirSync('foo/bar', 0o700);\n    file.cpR('foo', 'bar');\n    assert.ok(existsSync('foo'));\n    let fooBarStat = fs.statSync('bar/bar');\n    assert.equal(0o700, fooBarStat.mode & 0o777);\n    file.rmRf('foo');\n    file.rmRf('bar');\n  });\n});","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/jake/test/integration/file.js"],"names":["PROJECT_DIR","process","env","assert","require","fs","path","file","existsSync","exec","execSync","suite","test","expected","mkdirP","res","toString","trim","split","i","ii","length","equal","join","apply","rmRf","rmdirSync","writeFileSync","symlinkSync","barDeleted","statSync","err","code","readdirSync","unlinkSync","cpR","ok","throws","mode","bazStat","bazStat1","silent","preserveMode","mkdirSync","barStat","fooBarStat"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYF,WAAhC;;AAEA,IAAIG,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAE,GAAEJ,WAAY,iBAAhB,CAAlB;;AACA,IAAIQ,UAAU,GAAGH,EAAE,CAACG,UAAH,IAAiBF,IAAI,CAACE,UAAvC;;AACA,IAAIC,IAAI,GAAGL,OAAO,CAAC,eAAD,CAAP,CAAyBM,QAApC;;AAEAC,KAAK,CAAC,WAAD,EAAc,YAAY;AAE7BC,EAAAA,IAAI,CAAC,QAAD,EAAW,YAAY;AACzB,QAAIC,QAAQ,GAAG,CACb,CAAC,KAAD,CADa,EAEb,CAAC,KAAD,EAAQ,KAAR,CAFa,EAGb,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAHa,EAIb,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAJa,CAAf;AAMAN,IAAAA,IAAI,CAACO,MAAL,CAAY,iBAAZ;AACA,QAAIC,GAAG,GAAGN,IAAI,CAAC,UAAD,CAAJ,CAAiBO,QAAjB,GAA4BC,IAA5B,GAAmCC,KAAnC,CAAyC,IAAzC,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGL,GAAG,CAACM,MAAzB,EAAiCF,CAAC,GAAGC,EAArC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5ChB,MAAAA,MAAM,CAACmB,KAAP,CAAahB,IAAI,CAACiB,IAAL,CAAUC,KAAV,CAAgBlB,IAAhB,EAAsBO,QAAQ,CAACM,CAAD,CAA9B,CAAb,EAAiDJ,GAAG,CAACI,CAAD,CAApD;AACD;;AACDZ,IAAAA,IAAI,CAACkB,IAAL,CAAU,KAAV;AACD,GAbG,CAAJ;AAeAb,EAAAA,IAAI,CAAC,MAAD,EAAS,YAAY;AACvBL,IAAAA,IAAI,CAACO,MAAL,CAAY,iBAAZ;AACAP,IAAAA,IAAI,CAACkB,IAAL,CAAU,SAAV;AACA,QAAIV,GAAG,GAAGN,IAAI,CAAC,UAAD,CAAJ,CAAiBO,QAAjB,GAA4BC,IAA5B,GAAmCC,KAAnC,CAAyC,IAAzC,CAAV;AACAf,IAAAA,MAAM,CAACmB,KAAP,CAAa,CAAb,EAAgBP,GAAG,CAACM,MAApB;AACAlB,IAAAA,MAAM,CAACmB,KAAP,CAAa,KAAb,EAAoBP,GAAG,CAAC,CAAD,CAAvB;AACAV,IAAAA,EAAE,CAACqB,SAAH,CAAa,KAAb;AACD,GAPG,CAAJ;AASAd,EAAAA,IAAI,CAAC,0BAAD,EAA6B,YAAY;AAC3CL,IAAAA,IAAI,CAACO,MAAL,CAAY,KAAZ;AACAP,IAAAA,IAAI,CAACO,MAAL,CAAY,KAAZ;AACAT,IAAAA,EAAE,CAACsB,aAAH,CAAiB,eAAjB,EAAkC,iBAAlC;AACAtB,IAAAA,EAAE,CAACuB,WAAH,CAAe,QAAf,EAAyB,SAAzB;AAAqCrB,IAAAA,IAAI,CAACkB,IAAL,CAAU,KAAV,EAJM,CAM3C;;AACA,QAAII,UAAU,GAAG,KAAjB;;AACA,QAAI;AACFxB,MAAAA,EAAE,CAACyB,QAAH,CAAY,KAAZ;AACD,KAFD,CAEE,OAAMC,GAAN,EAAW;AACX,UAAGA,GAAG,CAACC,IAAJ,IAAY,QAAf,EAAyB;AACvBH,QAAAA,UAAU,GAAG,IAAb;AACD;AACF;;AACD1B,IAAAA,MAAM,CAACmB,KAAP,CAAa,IAAb,EAAmBO,UAAnB,EAf2C,CAiB3C;;AACA,QAAId,GAAG,GAAGV,EAAE,CAAC4B,WAAH,CAAe,KAAf,CAAV;AACA9B,IAAAA,MAAM,CAACmB,KAAP,CAAa,CAAb,EAAgBP,GAAG,CAACM,MAApB;AACAlB,IAAAA,MAAM,CAACmB,KAAP,CAAa,WAAb,EAA0BP,GAAG,CAAC,CAAD,CAA7B,EApB2C,CAsB3C;;AACAV,IAAAA,EAAE,CAAC6B,UAAH,CAAc,eAAd;AACA7B,IAAAA,EAAE,CAACqB,SAAH,CAAa,KAAb;AACD,GAzBG,CAAJ;AA2BAd,EAAAA,IAAI,CAAC,yBAAD,EAA4B,YAAY;AAC1CL,IAAAA,IAAI,CAACO,MAAL,CAAY,KAAZ;AACAT,IAAAA,EAAE,CAACsB,aAAH,CAAiB,eAAjB,EAAkC,QAAlC;AACAtB,IAAAA,EAAE,CAACuB,WAAH,CAAe,KAAf,EAAsB,KAAtB;AACArB,IAAAA,IAAI,CAACkB,IAAL,CAAU,KAAV,EAJ0C,CAM1C;;AACA,QAAII,UAAU,GAAG,KAAjB;;AACA,QAAI;AACFxB,MAAAA,EAAE,CAACyB,QAAH,CAAY,KAAZ;AACD,KAFD,CAEE,OAAMC,GAAN,EAAW;AACX,UAAGA,GAAG,CAACC,IAAJ,IAAY,QAAf,EAAyB;AACvBH,QAAAA,UAAU,GAAG,IAAb;AACD;AACF;;AACD1B,IAAAA,MAAM,CAACmB,KAAP,CAAa,IAAb,EAAmBO,UAAnB,EAf0C,CAiB1C;;AACA,QAAId,GAAG,GAAGV,EAAE,CAAC4B,WAAH,CAAe,KAAf,CAAV;AACA9B,IAAAA,MAAM,CAACmB,KAAP,CAAa,CAAb,EAAgBP,GAAG,CAACM,MAApB;AACAlB,IAAAA,MAAM,CAACmB,KAAP,CAAa,WAAb,EAA0BP,GAAG,CAAC,CAAD,CAA7B,EApB0C,CAsB1C;;AACAV,IAAAA,EAAE,CAAC6B,UAAH,CAAc,eAAd;AACA7B,IAAAA,EAAE,CAACqB,SAAH,CAAa,KAAb;AACD,GAzBG,CAAJ;AA2BAd,EAAAA,IAAI,CAAC,4CAAD,EAA+C,YAAY;AAC7DL,IAAAA,IAAI,CAACO,MAAL,CAAY,KAAZ;AACAT,IAAAA,EAAE,CAACsB,aAAH,CAAiB,aAAjB,EAAgC,MAAhC;AACApB,IAAAA,IAAI,CAAC4B,GAAL,CAAS,KAAT,EAAgB,KAAhB;AACAhC,IAAAA,MAAM,CAACiC,EAAP,CAAU5B,UAAU,CAAC,aAAD,CAApB;AACAD,IAAAA,IAAI,CAACkB,IAAL,CAAU,KAAV;AACAlB,IAAAA,IAAI,CAACkB,IAAL,CAAU,KAAV;AACD,GAPG,CAAJ;AASAb,EAAAA,IAAI,CAAC,sCAAD,EAAyC,YAAY;AACvDT,IAAAA,MAAM,CAACkC,MAAP,CAAc,YAAY;AACxB9B,MAAAA,IAAI,CAAC4B,GAAL,CAAS,SAAT,EAAoB,SAApB;AACD,KAFD;AAGD,GAJG,CAAJ;AAMAvB,EAAAA,IAAI,CAAC,kCAAD,EAAqC,YAAY;AACnDL,IAAAA,IAAI,CAACO,MAAL,CAAY,KAAZ;AACAT,IAAAA,EAAE,CAACsB,aAAH,CAAiB,aAAjB,EAAgC,MAAhC;AACApB,IAAAA,IAAI,CAAC4B,GAAL,CAAS,aAAT,EAAwB,aAAxB;AACAhC,IAAAA,MAAM,CAACiC,EAAP,CAAU5B,UAAU,CAAC,aAAD,CAApB;AACAD,IAAAA,IAAI,CAACkB,IAAL,CAAU,KAAV;AACD,GANG,CAAJ;AAQAb,EAAAA,IAAI,CAAC,6BAAD,EAAgC,YAAY;AAC9CP,IAAAA,EAAE,CAACsB,aAAH,CAAiB,SAAjB,EAA4B,MAA5B;AACApB,IAAAA,IAAI,CAAC4B,GAAL,CAAS,SAAT,EAAoB,SAApB;AACAhC,IAAAA,MAAM,CAACiC,EAAP,CAAU5B,UAAU,CAAC,SAAD,CAApB;AACAD,IAAAA,IAAI,CAACkB,IAAL,CAAU,SAAV;AACAlB,IAAAA,IAAI,CAACkB,IAAL,CAAU,SAAV;AACD,GANG,CAAJ;AAQAb,EAAAA,IAAI,CAAC,qBAAD,EAAwB,YAAY;AACtCP,IAAAA,EAAE,CAACsB,aAAH,CAAiB,SAAjB,EAA4B,MAA5B,EAAoC;AAACW,MAAAA,IAAI,EAAE;AAAP,KAApC;AACAjC,IAAAA,EAAE,CAACsB,aAAH,CAAiB,UAAjB,EAA6B,OAA7B,EAAsC;AAACW,MAAAA,IAAI,EAAE;AAAP,KAAtC;AACA/B,IAAAA,IAAI,CAAC4B,GAAL,CAAS,SAAT,EAAoB,SAApB;AACA5B,IAAAA,IAAI,CAAC4B,GAAL,CAAS,UAAT,EAAqB,UAArB;AAEAhC,IAAAA,MAAM,CAACiC,EAAP,CAAU5B,UAAU,CAAC,SAAD,CAApB;AACAL,IAAAA,MAAM,CAACiC,EAAP,CAAU5B,UAAU,CAAC,UAAD,CAApB;AACA,QAAI+B,OAAO,GAAGlC,EAAE,CAACyB,QAAH,CAAY,SAAZ,CAAd;AACA,QAAIU,QAAQ,GAAGnC,EAAE,CAACyB,QAAH,CAAY,UAAZ,CAAf;AACA3B,IAAAA,MAAM,CAACmB,KAAP,CAAa,KAAb,EAAoBiB,OAAO,CAACD,IAAR,GAAe,MAAnC;AACAnC,IAAAA,MAAM,CAACmB,KAAP,CAAa,KAAb,EAAoBkB,QAAQ,CAACF,IAAT,GAAgB,MAApC;AAEA/B,IAAAA,IAAI,CAACkB,IAAL,CAAU,SAAV;AACAlB,IAAAA,IAAI,CAACkB,IAAL,CAAU,SAAV;AACAlB,IAAAA,IAAI,CAACkB,IAAL,CAAU,UAAV;AACAlB,IAAAA,IAAI,CAACkB,IAAL,CAAU,UAAV;AACD,GAjBG,CAAJ;AAmBAb,EAAAA,IAAI,CAAC,wDAAD,EAA2D,YAAY;AACzEP,IAAAA,EAAE,CAACsB,aAAH,CAAiB,SAAjB,EAA4B,MAA5B,EAAoC;AAACW,MAAAA,IAAI,EAAE;AAAP,KAApC;AACAjC,IAAAA,EAAE,CAACsB,aAAH,CAAiB,SAAjB,EAA4B,OAA5B,EAAqC;AAACW,MAAAA,IAAI,EAAE;AAAP,KAArC;AACA/B,IAAAA,IAAI,CAAC4B,GAAL,CAAS,SAAT,EAAoB,SAApB,EAA+B;AAACM,MAAAA,MAAM,EAAE,IAAT;AAAeC,MAAAA,YAAY,EAAE;AAA7B,KAA/B;AAEAvC,IAAAA,MAAM,CAACiC,EAAP,CAAU5B,UAAU,CAAC,SAAD,CAApB;AACA,QAAI+B,OAAO,GAAGlC,EAAE,CAACyB,QAAH,CAAY,SAAZ,CAAd;AACA3B,IAAAA,MAAM,CAACmB,KAAP,CAAa,KAAb,EAAoBiB,OAAO,CAACD,IAAR,GAAe,KAAnC;AAEA/B,IAAAA,IAAI,CAACkB,IAAL,CAAU,SAAV;AACAlB,IAAAA,IAAI,CAACkB,IAAL,CAAU,SAAV;AACD,GAXG,CAAJ;AAaAb,EAAAA,IAAI,CAAC,8CAAD,EAAiD,YAAY;AAC/DP,IAAAA,EAAE,CAACsB,aAAH,CAAiB,SAAjB,EAA4B,MAA5B,EAAoC;AAACW,MAAAA,IAAI,EAAE;AAAP,KAApC;AACAjC,IAAAA,EAAE,CAACsB,aAAH,CAAiB,SAAjB,EAA4B,OAA5B,EAAqC;AAACW,MAAAA,IAAI,EAAE;AAAP,KAArC;AACA/B,IAAAA,IAAI,CAAC4B,GAAL,CAAS,SAAT,EAAoB,SAApB;AAEAhC,IAAAA,MAAM,CAACiC,EAAP,CAAU5B,UAAU,CAAC,SAAD,CAApB;AACA,QAAI+B,OAAO,GAAGlC,EAAE,CAACyB,QAAH,CAAY,SAAZ,CAAd;AACA3B,IAAAA,MAAM,CAACmB,KAAP,CAAa,KAAb,EAAoBiB,OAAO,CAACD,IAAR,GAAe,KAAnC;AAEA/B,IAAAA,IAAI,CAACkB,IAAL,CAAU,SAAV;AACAlB,IAAAA,IAAI,CAACkB,IAAL,CAAU,SAAV;AACD,GAXG,CAAJ;AAaAb,EAAAA,IAAI,CAAC,kCAAD,EAAqC,YAAY;AACnDP,IAAAA,EAAE,CAACsC,SAAH,CAAa,KAAb;AACAtC,IAAAA,EAAE,CAACsB,aAAH,CAAiB,aAAjB,EAAgC,MAAhC,EAAwC;AAACW,MAAAA,IAAI,EAAE;AAAP,KAAxC;AACA/B,IAAAA,IAAI,CAAC4B,GAAL,CAAS,KAAT,EAAgB,KAAhB;AAEAhC,IAAAA,MAAM,CAACiC,EAAP,CAAU5B,UAAU,CAAC,KAAD,CAApB;AACA,QAAIoC,OAAO,GAAGvC,EAAE,CAACyB,QAAH,CAAY,aAAZ,CAAd;AACA3B,IAAAA,MAAM,CAACmB,KAAP,CAAa,KAAb,EAAoBsB,OAAO,CAACN,IAAR,GAAe,KAAnC;AAEA/B,IAAAA,IAAI,CAACkB,IAAL,CAAU,KAAV;AACAlB,IAAAA,IAAI,CAACkB,IAAL,CAAU,KAAV;AACD,GAXG,CAAJ;AAaAb,EAAAA,IAAI,CAAC,iCAAD,EAAoC,YAAY;AAClDP,IAAAA,EAAE,CAACsC,SAAH,CAAa,KAAb;AACAtC,IAAAA,EAAE,CAACsB,aAAH,CAAiB,aAAjB,EAAgC,MAAhC,EAAwC;AAACW,MAAAA,IAAI,EAAE;AAAP,KAAxC;AACAjC,IAAAA,EAAE,CAACsC,SAAH,CAAa,KAAb;AACAtC,IAAAA,EAAE,CAACsC,SAAH,CAAa,SAAb;AACAtC,IAAAA,EAAE,CAACsB,aAAH,CAAiB,iBAAjB,EAAoC,OAApC,EAA6C;AAACW,MAAAA,IAAI,EAAE;AAAP,KAA7C;AACA/B,IAAAA,IAAI,CAAC4B,GAAL,CAAS,KAAT,EAAgB,KAAhB,EAAuB;AAACM,MAAAA,MAAM,EAAE,IAAT;AAAeC,MAAAA,YAAY,EAAE;AAA7B,KAAvB;AAEAvC,IAAAA,MAAM,CAACiC,EAAP,CAAU5B,UAAU,CAAC,KAAD,CAApB;AACA,QAAIoC,OAAO,GAAGvC,EAAE,CAACyB,QAAH,CAAY,iBAAZ,CAAd;AACA3B,IAAAA,MAAM,CAACmB,KAAP,CAAa,KAAb,EAAoBsB,OAAO,CAACN,IAAR,GAAe,KAAnC;AAEA/B,IAAAA,IAAI,CAACkB,IAAL,CAAU,KAAV;AACAlB,IAAAA,IAAI,CAACkB,IAAL,CAAU,KAAV;AACD,GAdG,CAAJ;AAgBAb,EAAAA,IAAI,CAAC,uCAAD,EAA0C,YAAY;AACxDP,IAAAA,EAAE,CAACsC,SAAH,CAAa,KAAb,EAAoB,KAApB;AACAtC,IAAAA,EAAE,CAACsC,SAAH,CAAa,SAAb,EAAwB,KAAxB;AACApC,IAAAA,IAAI,CAAC4B,GAAL,CAAS,KAAT,EAAgB,KAAhB;AAEAhC,IAAAA,MAAM,CAACiC,EAAP,CAAU5B,UAAU,CAAC,KAAD,CAApB;AACA,QAAIqC,UAAU,GAAGxC,EAAE,CAACyB,QAAH,CAAY,SAAZ,CAAjB;AACA3B,IAAAA,MAAM,CAACmB,KAAP,CAAa,KAAb,EAAoBuB,UAAU,CAACP,IAAX,GAAkB,KAAtC;AAEA/B,IAAAA,IAAI,CAACkB,IAAL,CAAU,KAAV;AACAlB,IAAAA,IAAI,CAACkB,IAAL,CAAU,KAAV;AACD,GAXG,CAAJ;AAaD,CAtMI,CAAL","sourcesContent":["/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\nconst PROJECT_DIR = process.env.PROJECT_DIR;\n\nlet assert = require('assert');\nlet fs = require('fs');\nlet path = require('path');\nlet file = require(`${PROJECT_DIR}/lib/utils/file`);\nlet existsSync = fs.existsSync || path.existsSync;\nlet exec = require('child_process').execSync;\n\nsuite('fileUtils', function () {\n\n  test('mkdirP', function () {\n    let expected = [\n      ['foo'],\n      ['foo', 'bar'],\n      ['foo', 'bar', 'baz'],\n      ['foo', 'bar', 'baz', 'qux']\n    ];\n    file.mkdirP('foo/bar/baz/qux');\n    let res = exec('find foo').toString().trim().split('\\n');\n    for (let i = 0, ii = res.length; i < ii; i++) {\n      assert.equal(path.join.apply(path, expected[i]), res[i]);\n    }\n    file.rmRf('foo');\n  });\n\n  test('rmRf', function () {\n    file.mkdirP('foo/bar/baz/qux');\n    file.rmRf('foo/bar');\n    let res = exec('find foo').toString().trim().split('\\n');\n    assert.equal(1, res.length);\n    assert.equal('foo', res[0]);\n    fs.rmdirSync('foo');\n  });\n\n  test('rmRf with symlink subdir', function () {\n    file.mkdirP('foo');\n    file.mkdirP('bar');\n    fs.writeFileSync('foo/hello.txt', 'hello, it\\'s me');\n    fs.symlinkSync('../foo', 'bar/foo'); file.rmRf('bar');\n\n    // Make sure the bar directory was successfully deleted\n    let barDeleted = false;\n    try {\n      fs.statSync('bar');\n    } catch(err) {\n      if(err.code == 'ENOENT') {\n        barDeleted = true;\n      }\n    }\n    assert.equal(true, barDeleted);\n\n    // Make sure that the file inside the linked folder wasn't deleted\n    let res = fs.readdirSync('foo');\n    assert.equal(1, res.length);\n    assert.equal('hello.txt', res[0]);\n\n    // Cleanup\n    fs.unlinkSync('foo/hello.txt');\n    fs.rmdirSync('foo');\n  });\n\n  test('rmRf with symlinked dir', function () {\n    file.mkdirP('foo');\n    fs.writeFileSync('foo/hello.txt', 'hello!');\n    fs.symlinkSync('foo', 'bar');\n    file.rmRf('bar');\n\n    // Make sure the bar directory was successfully deleted\n    let barDeleted = false;\n    try {\n      fs.statSync('bar');\n    } catch(err) {\n      if(err.code == 'ENOENT') {\n        barDeleted = true;\n      }\n    }\n    assert.equal(true, barDeleted);\n\n    // Make sure that the file inside the linked folder wasn't deleted\n    let res = fs.readdirSync('foo');\n    assert.equal(1, res.length);\n    assert.equal('hello.txt', res[0]);\n\n    // Cleanup\n    fs.unlinkSync('foo/hello.txt');\n    fs.rmdirSync('foo');\n  });\n\n  test('cpR with same name and different directory', function () {\n    file.mkdirP('foo');\n    fs.writeFileSync('foo/bar.txt', 'w00t');\n    file.cpR('foo', 'bar');\n    assert.ok(existsSync('bar/bar.txt'));\n    file.rmRf('foo');\n    file.rmRf('bar');\n  });\n\n  test('cpR with same to and from will throw', function () {\n    assert.throws(function () {\n      file.cpR('foo.txt', 'foo.txt');\n    });\n  });\n\n  test('cpR rename via copy in directory', function () {\n    file.mkdirP('foo');\n    fs.writeFileSync('foo/bar.txt', 'w00t');\n    file.cpR('foo/bar.txt', 'foo/baz.txt');\n    assert.ok(existsSync('foo/baz.txt'));\n    file.rmRf('foo');\n  });\n\n  test('cpR rename via copy in base', function () {\n    fs.writeFileSync('bar.txt', 'w00t');\n    file.cpR('bar.txt', 'baz.txt');\n    assert.ok(existsSync('baz.txt'));\n    file.rmRf('bar.txt');\n    file.rmRf('baz.txt');\n  });\n\n  test('cpR keeps file mode', function () {\n    fs.writeFileSync('bar.txt', 'w00t', {mode: 0o750});\n    fs.writeFileSync('bar1.txt', 'w00t!', {mode: 0o744});\n    file.cpR('bar.txt', 'baz.txt');\n    file.cpR('bar1.txt', 'baz1.txt');\n\n    assert.ok(existsSync('baz.txt'));\n    assert.ok(existsSync('baz1.txt'));\n    let bazStat = fs.statSync('baz.txt');\n    let bazStat1 = fs.statSync('baz1.txt');\n    assert.equal(0o750, bazStat.mode & 0o7777);\n    assert.equal(0o744, bazStat1.mode & 0o7777);\n\n    file.rmRf('bar.txt');\n    file.rmRf('baz.txt');\n    file.rmRf('bar1.txt');\n    file.rmRf('baz1.txt');\n  });\n\n  test('cpR keeps file mode when overwriting with preserveMode', function () {\n    fs.writeFileSync('bar.txt', 'w00t', {mode: 0o755});\n    fs.writeFileSync('baz.txt', 'w00t!', {mode: 0o744});\n    file.cpR('bar.txt', 'baz.txt', {silent: true, preserveMode: true});\n\n    assert.ok(existsSync('baz.txt'));\n    let bazStat = fs.statSync('baz.txt');\n    assert.equal(0o755, bazStat.mode & 0o777);\n\n    file.rmRf('bar.txt');\n    file.rmRf('baz.txt');\n  });\n\n  test('cpR does not keep file mode when overwriting', function () {\n    fs.writeFileSync('bar.txt', 'w00t', {mode: 0o766});\n    fs.writeFileSync('baz.txt', 'w00t!', {mode: 0o744});\n    file.cpR('bar.txt', 'baz.txt');\n\n    assert.ok(existsSync('baz.txt'));\n    let bazStat = fs.statSync('baz.txt');\n    assert.equal(0o744, bazStat.mode & 0o777);\n\n    file.rmRf('bar.txt');\n    file.rmRf('baz.txt');\n  });\n\n  test('cpR copies file mode recursively', function () {\n    fs.mkdirSync('foo');\n    fs.writeFileSync('foo/bar.txt', 'w00t', {mode: 0o740});\n    file.cpR('foo', 'baz');\n\n    assert.ok(existsSync('baz'));\n    let barStat = fs.statSync('baz/bar.txt');\n    assert.equal(0o740, barStat.mode & 0o777);\n\n    file.rmRf('foo');\n    file.rmRf('baz');\n  });\n\n  test('cpR keeps file mode recursively', function () {\n    fs.mkdirSync('foo');\n    fs.writeFileSync('foo/bar.txt', 'w00t', {mode: 0o740});\n    fs.mkdirSync('baz');\n    fs.mkdirSync('baz/foo');\n    fs.writeFileSync('baz/foo/bar.txt', 'w00t!', {mode: 0o755});\n    file.cpR('foo', 'baz', {silent: true, preserveMode: true});\n\n    assert.ok(existsSync('baz'));\n    let barStat = fs.statSync('baz/foo/bar.txt');\n    assert.equal(0o740, barStat.mode & 0o777);\n\n    file.rmRf('foo');\n    file.rmRf('baz');\n  });\n\n  test('cpR copies directory mode recursively', function () {\n    fs.mkdirSync('foo', 0o755);\n    fs.mkdirSync('foo/bar', 0o700);\n    file.cpR('foo', 'bar');\n\n    assert.ok(existsSync('foo'));\n    let fooBarStat = fs.statSync('bar/bar');\n    assert.equal(0o700, fooBarStat.mode & 0o777);\n\n    file.rmRf('foo');\n    file.rmRf('bar');\n  });\n\n});\n\n\n"]},"metadata":{},"sourceType":"module"}