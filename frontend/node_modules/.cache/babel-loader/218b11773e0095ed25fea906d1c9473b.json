{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["/**\nCreate a type that represents either the value or the value wrapped in `PromiseLike`.\n\nUse-cases:\n- A function accepts a callback that may either return a value synchronously or may return a promised value.\n- This type could be the return type of `Promise#then()`, `Promise#catch()`, and `Promise#finally()` callbacks.\n\nPlease upvote [this issue](https://github.com/microsoft/TypeScript/issues/31394) if you want to have this type as a built-in in TypeScript.\n\n@example\n```\nimport {Promisable} from 'type-fest';\n\nasync function logger(getLogEntry: () => Promisable<string>): Promise<void> {\n    const entry = await getLogEntry();\n    console.log(entry);\n}\n\nlogger(() => 'foo');\nlogger(() => Promise.resolve('bar'));\n```\n*/\nexport type Promisable<T> = T | PromiseLike<T>;\n"]},"metadata":{},"sourceType":"module"}