{"ast":null,"code":"export * from './index';","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/mysql2/promise.d.ts"],"names":[],"mappings":"AAWA,cAAc,SAAd","sourcesContent":["import {\n  RowDataPacket,\n  OkPacket,\n  ResultSetHeader,\n  FieldPacket,\n  QueryOptions,\n  ConnectionOptions,\n  PoolOptions\n} from './index';\n\nimport { EventEmitter } from 'events';\nexport * from './index';\n\nexport interface Connection extends EventEmitter {\n  config: ConnectionOptions;\n  threadId: number;\n\n  connect(): Promise<void>;\n  ping(): Promise<void>;\n\n  beginTransaction(): Promise<void>;\n  commit(): Promise<void>;\n  rollback(): Promise<void>;\n\n  changeUser(options: ConnectionOptions): Promise<void>;\n\n  query<T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader>(\n    sql: string\n  ): Promise<[T, FieldPacket[]]>;\n  query<T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader>(\n    sql: string,\n    values: any | any[] | { [param: string]: any }\n  ): Promise<[T, FieldPacket[]]>;\n  query<T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader>(\n    options: QueryOptions\n  ): Promise<[T, FieldPacket[]]>;\n  query<T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader>(\n    options: QueryOptions,\n    values: any | any[] | { [param: string]: any }\n  ): Promise<[T, FieldPacket[]]>;\n\n  execute<\n    T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader\n  >(\n    sql: string\n  ): Promise<[T, FieldPacket[]]>;\n  execute<\n    T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader\n  >(\n    sql: string,\n    values: any | any[] | { [param: string]: any }\n  ): Promise<[T, FieldPacket[]]>;\n  execute<\n    T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader\n  >(\n    options: QueryOptions\n  ): Promise<[T, FieldPacket[]]>;\n  execute<\n    T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader\n  >(\n    options: QueryOptions,\n    values: any | any[] | { [param: string]: any }\n  ): Promise<[T, FieldPacket[]]>;\n\n  unprepare(sql: string): void;\n\n  end(options?: any): Promise<void>;\n\n  destroy(): void;\n\n  pause(): void;\n\n  resume(): void;\n\n  escape(value: any): string;\n\n  escapeId(value: string): string;\n  escapeId(values: string[]): string;\n\n  format(sql: string, values?: any | any[] | { [param: string]: any }): string;\n}\n\nexport interface PoolConnection extends Connection {\n  release(): void;\n}\n\nexport interface Pool extends EventEmitter {\n  query<T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader>(\n    sql: string\n  ): Promise<[T, FieldPacket[]]>;\n  query<T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader>(\n    sql: string,\n    values: any | any[] | { [param: string]: any }\n  ): Promise<[T, FieldPacket[]]>;\n  query<T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader>(\n    options: QueryOptions\n  ): Promise<[T, FieldPacket[]]>;\n  query<T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader>(\n    options: QueryOptions,\n    values: any | any[] | { [param: string]: any }\n  ): Promise<[T, FieldPacket[]]>;\n\n  execute<\n    T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader\n  >(\n    sql: string\n  ): Promise<[T, FieldPacket[]]>;\n  execute<\n    T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader\n  >(\n    sql: string,\n    values: any | any[] | { [param: string]: any }\n  ): Promise<[T, FieldPacket[]]>;\n  execute<\n    T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader\n  >(\n    options: QueryOptions\n  ): Promise<[T, FieldPacket[]]>;\n  execute<\n    T extends RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader\n  >(\n    options: QueryOptions,\n    values: any | any[] | { [param: string]: any }\n  ): Promise<[T, FieldPacket[]]>;\n\n  getConnection(): Promise<PoolConnection>;\n  on(event: 'connection', listener: (connection: PoolConnection) => any): this;\n  on(event: 'acquire', listener: (connection: PoolConnection) => any): this;\n  on(event: 'release', listener: (connection: PoolConnection) => any): this;\n  on(event: 'enqueue', listener: () => any): this;\n  end(): Promise<void>;\n}\n\nexport function createConnection(connectionUri: string): Promise<Connection>;\nexport function createConnection(\n  config: ConnectionOptions\n): Promise<Connection>;\nexport function createPool(config: PoolOptions): Pool;\n"]},"metadata":{},"sourceType":"module"}