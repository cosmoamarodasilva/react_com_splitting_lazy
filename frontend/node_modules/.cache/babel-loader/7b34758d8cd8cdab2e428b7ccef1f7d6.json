{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import {LiteralUnion} from '..';\n\ndeclare namespace PackageJson {\n\t/**\n\tA person who has been involved in creating or maintaining the package.\n\t*/\n\texport type Person =\n\t\t| string\n\t\t| {\n\t\t\tname: string;\n\t\t\turl?: string;\n\t\t\temail?: string;\n\t\t};\n\n\texport type BugsLocation =\n\t\t| string\n\t\t| {\n\t\t\t/**\n\t\t\tThe URL to the package's issue tracker.\n\t\t\t*/\n\t\t\turl?: string;\n\n\t\t\t/**\n\t\t\tThe email address to which issues should be reported.\n\t\t\t*/\n\t\t\temail?: string;\n\t\t};\n\n\texport interface DirectoryLocations {\n\t\t/**\n\t\tLocation for executable scripts. Sugar to generate entries in the `bin` property by walking the folder.\n\t\t*/\n\t\tbin?: string;\n\n\t\t/**\n\t\tLocation for Markdown files.\n\t\t*/\n\t\tdoc?: string;\n\n\t\t/**\n\t\tLocation for example scripts.\n\t\t*/\n\t\texample?: string;\n\n\t\t/**\n\t\tLocation for the bulk of the library.\n\t\t*/\n\t\tlib?: string;\n\n\t\t/**\n\t\tLocation for man pages. Sugar to generate a `man` array by walking the folder.\n\t\t*/\n\t\tman?: string;\n\n\t\t/**\n\t\tLocation for test files.\n\t\t*/\n\t\ttest?: string;\n\n\t\t[directoryType: string]: unknown;\n\t}\n\n\texport type Scripts = {\n\t\t/**\n\t\tRun **before** the package is published (Also run on local `npm install` without any arguments).\n\t\t*/\n\t\tprepublish?: string;\n\n\t\t/**\n\t\tRun both **before** the package is packed and published, and on local `npm install` without any arguments. This is run **after** `prepublish`, but **before** `prepublishOnly`.\n\t\t*/\n\t\tprepare?: string;\n\n\t\t/**\n\t\tRun **before** the package is prepared and packed, **only** on `npm publish`.\n\t\t*/\n\t\tprepublishOnly?: string;\n\n\t\t/**\n\t\tRun **before** a tarball is packed (on `npm pack`, `npm publish`, and when installing git dependencies).\n\t\t*/\n\t\tprepack?: string;\n\n\t\t/**\n\t\tRun **after** the tarball has been generated and moved to its final destination.\n\t\t*/\n\t\tpostpack?: string;\n\n\t\t/**\n\t\tRun **after** the package is published.\n\t\t*/\n\t\tpublish?: string;\n\n\t\t/**\n\t\tRun **after** the package is published.\n\t\t*/\n\t\tpostpublish?: string;\n\n\t\t/**\n\t\tRun **before** the package is installed.\n\t\t*/\n\t\tpreinstall?: string;\n\n\t\t/**\n\t\tRun **after** the package is installed.\n\t\t*/\n\t\tinstall?: string;\n\n\t\t/**\n\t\tRun **after** the package is installed and after `install`.\n\t\t*/\n\t\tpostinstall?: string;\n\n\t\t/**\n\t\tRun **before** the package is uninstalled and before `uninstall`.\n\t\t*/\n\t\tpreuninstall?: string;\n\n\t\t/**\n\t\tRun **before** the package is uninstalled.\n\t\t*/\n\t\tuninstall?: string;\n\n\t\t/**\n\t\tRun **after** the package is uninstalled.\n\t\t*/\n\t\tpostuninstall?: string;\n\n\t\t/**\n\t\tRun **before** bump the package version and before `version`.\n\t\t*/\n\t\tpreversion?: string;\n\n\t\t/**\n\t\tRun **before** bump the package version.\n\t\t*/\n\t\tversion?: string;\n\n\t\t/**\n\t\tRun **after** bump the package version.\n\t\t*/\n\t\tpostversion?: string;\n\n\t\t/**\n\t\tRun with the `npm test` command, before `test`.\n\t\t*/\n\t\tpretest?: string;\n\n\t\t/**\n\t\tRun with the `npm test` command.\n\t\t*/\n\t\ttest?: string;\n\n\t\t/**\n\t\tRun with the `npm test` command, after `test`.\n\t\t*/\n\t\tposttest?: string;\n\n\t\t/**\n\t\tRun with the `npm stop` command, before `stop`.\n\t\t*/\n\t\tprestop?: string;\n\n\t\t/**\n\t\tRun with the `npm stop` command.\n\t\t*/\n\t\tstop?: string;\n\n\t\t/**\n\t\tRun with the `npm stop` command, after `stop`.\n\t\t*/\n\t\tpoststop?: string;\n\n\t\t/**\n\t\tRun with the `npm start` command, before `start`.\n\t\t*/\n\t\tprestart?: string;\n\n\t\t/**\n\t\tRun with the `npm start` command.\n\t\t*/\n\t\tstart?: string;\n\n\t\t/**\n\t\tRun with the `npm start` command, after `start`.\n\t\t*/\n\t\tpoststart?: string;\n\n\t\t/**\n\t\tRun with the `npm restart` command, before `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided.\n\t\t*/\n\t\tprerestart?: string;\n\n\t\t/**\n\t\tRun with the `npm restart` command. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided.\n\t\t*/\n\t\trestart?: string;\n\n\t\t/**\n\t\tRun with the `npm restart` command, after `restart`. Note: `npm restart` will run the `stop` and `start` scripts if no `restart` script is provided.\n\t\t*/\n\t\tpostrestart?: string;\n\t} & {\n\t\t[scriptName: string]: string;\n\t};\n\n\t/**\n\tDependencies of the package. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or Git URL.\n\t*/\n\texport interface Dependency {\n\t\t[packageName: string]: string;\n\t}\n\n\texport interface NonStandardEntryPoints {\n\t\t/**\n\t\tAn ECMAScript module ID that is the primary entry point to the program.\n\t\t*/\n\t\tmodule?: string;\n\n\t\t/**\n\t\tA module ID with untranspiled code that is the primary entry point to the program.\n\t\t*/\n\t\tesnext?:\n\t\t| string\n\t\t| {\n\t\t\tmain?: string;\n\t\t\tbrowser?: string;\n\t\t\t[moduleName: string]: string | undefined;\n\t\t};\n\n\t\t/**\n\t\tA hint to JavaScript bundlers or component tools when packaging modules for client side use.\n\t\t*/\n\t\tbrowser?:\n\t\t| string\n\t\t| {\n\t\t\t[moduleName: string]: string | false;\n\t\t};\n\t}\n\n\texport interface TypeScriptConfiguration {\n\t\t/**\n\t\tLocation of the bundled TypeScript declaration file.\n\t\t*/\n\t\ttypes?: string;\n\n\t\t/**\n\t\tLocation of the bundled TypeScript declaration file. Alias of `types`.\n\t\t*/\n\t\ttypings?: string;\n\t}\n\n\texport interface YarnConfiguration {\n\t\t/**\n\t\tIf your package only allows one version of a given dependency, and youâ€™d like to enforce the same behavior as `yarn install --flat` on the command line, set this to `true`.\n\n\t\tNote that if your `package.json` contains `\"flat\": true` and other packages depend on yours (e.g. you are building a library rather than an application), those other packages will also need `\"flat\": true` in their `package.json` or be installed with `yarn install --flat` on the command-line.\n\t\t*/\n\t\tflat?: boolean;\n\n\t\t/**\n\t\tSelective version resolutions. Allows the definition of custom package versions inside dependencies without manual edits in the `yarn.lock` file.\n\t\t*/\n\t\tresolutions?: Dependency;\n\t}\n\n\texport interface JSPMConfiguration {\n\t\t/**\n\t\tJSPM configuration.\n\t\t*/\n\t\tjspm?: PackageJson;\n\t}\n}\n\n/**\nType for [npm's `package.json` file](https://docs.npmjs.com/creating-a-package-json-file). Also includes types for fields used by other popular projects, like TypeScript and Yarn.\n*/\nexport type PackageJson = {\n\t/**\n\tThe name of the package.\n\t*/\n\tname?: string;\n\n\t/**\n\tPackage version, parseable by [`node-semver`](https://github.com/npm/node-semver).\n\t*/\n\tversion?: string;\n\n\t/**\n\tPackage description, listed in `npm search`.\n\t*/\n\tdescription?: string;\n\n\t/**\n\tKeywords associated with package, listed in `npm search`.\n\t*/\n\tkeywords?: string[];\n\n\t/**\n\tThe URL to the package's homepage.\n\t*/\n\thomepage?: LiteralUnion<'.', string>;\n\n\t/**\n\tThe URL to the package's issue tracker and/or the email address to which issues should be reported.\n\t*/\n\tbugs?: PackageJson.BugsLocation;\n\n\t/**\n\tThe license for the package.\n\t*/\n\tlicense?: string;\n\n\t/**\n\tThe licenses for the package.\n\t*/\n\tlicenses?: Array<{\n\t\ttype?: string;\n\t\turl?: string;\n\t}>;\n\n\tauthor?: PackageJson.Person;\n\n\t/**\n\tA list of people who contributed to the package.\n\t*/\n\tcontributors?: PackageJson.Person[];\n\n\t/**\n\tA list of people who maintain the package.\n\t*/\n\tmaintainers?: PackageJson.Person[];\n\n\t/**\n\tThe files included in the package.\n\t*/\n\tfiles?: string[];\n\n\t/**\n\tThe module ID that is the primary entry point to the program.\n\t*/\n\tmain?: string;\n\n\t/**\n\tThe executable files that should be installed into the `PATH`.\n\t*/\n\tbin?:\n\t| string\n\t| {\n\t\t[binary: string]: string;\n\t};\n\n\t/**\n\tFilenames to put in place for the `man` program to find.\n\t*/\n\tman?: string | string[];\n\n\t/**\n\tIndicates the structure of the package.\n\t*/\n\tdirectories?: PackageJson.DirectoryLocations;\n\n\t/**\n\tLocation for the code repository.\n\t*/\n\trepository?:\n\t| string\n\t| {\n\t\ttype: string;\n\t\turl: string;\n\t};\n\n\t/**\n\tScript commands that are run at various times in the lifecycle of the package. The key is the lifecycle event, and the value is the command to run at that point.\n\t*/\n\tscripts?: PackageJson.Scripts;\n\n\t/**\n\tIs used to set configuration parameters used in package scripts that persist across upgrades.\n\t*/\n\tconfig?: {\n\t\t[configKey: string]: unknown;\n\t};\n\n\t/**\n\tThe dependencies of the package.\n\t*/\n\tdependencies?: PackageJson.Dependency;\n\n\t/**\n\tAdditional tooling dependencies that are not required for the package to work. Usually test, build, or documentation tooling.\n\t*/\n\tdevDependencies?: PackageJson.Dependency;\n\n\t/**\n\tDependencies that are skipped if they fail to install.\n\t*/\n\toptionalDependencies?: PackageJson.Dependency;\n\n\t/**\n\tDependencies that will usually be required by the package user directly or via another dependency.\n\t*/\n\tpeerDependencies?: PackageJson.Dependency;\n\n\t/**\n\tPackage names that are bundled when the package is published.\n\t*/\n\tbundledDependencies?: string[];\n\n\t/**\n\tAlias of `bundledDependencies`.\n\t*/\n\tbundleDependencies?: string[];\n\n\t/**\n\tEngines that this package runs on.\n\t*/\n\tengines?: {\n\t\t[EngineName in 'npm' | 'node' | string]: string;\n\t};\n\n\t/**\n\t@deprecated\n\t*/\n\tengineStrict?: boolean;\n\n\t/**\n\tOperating systems the module runs on.\n\t*/\n\tos?: Array<LiteralUnion<\n\t\t| 'aix'\n\t\t| 'darwin'\n\t\t| 'freebsd'\n\t\t| 'linux'\n\t\t| 'openbsd'\n\t\t| 'sunos'\n\t\t| 'win32'\n\t\t| '!aix'\n\t\t| '!darwin'\n\t\t| '!freebsd'\n\t\t| '!linux'\n\t\t| '!openbsd'\n\t\t| '!sunos'\n\t\t| '!win32',\n\t\tstring\n\t>>;\n\n\t/**\n\tCPU architectures the module runs on.\n\t*/\n\tcpu?: Array<LiteralUnion<\n\t\t| 'arm'\n\t\t| 'arm64'\n\t\t| 'ia32'\n\t\t| 'mips'\n\t\t| 'mipsel'\n\t\t| 'ppc'\n\t\t| 'ppc64'\n\t\t| 's390'\n\t\t| 's390x'\n\t\t| 'x32'\n\t\t| 'x64'\n\t\t| '!arm'\n\t\t| '!arm64'\n\t\t| '!ia32'\n\t\t| '!mips'\n\t\t| '!mipsel'\n\t\t| '!ppc'\n\t\t| '!ppc64'\n\t\t| '!s390'\n\t\t| '!s390x'\n\t\t| '!x32'\n\t\t| '!x64',\n\t\tstring\n\t>>;\n\n\t/**\n\tIf set to `true`, a warning will be shown if package is installed locally. Useful if the package is primarily a command-line application that should be installed globally.\n\n\t@deprecated\n\t*/\n\tpreferGlobal?: boolean;\n\n\t/**\n\tIf set to `true`, then npm will refuse to publish it.\n\t*/\n\tprivate?: boolean;\n\n\t/**\n\t * A set of config values that will be used at publish-time. It's especially handy to set the tag, registry or access, to ensure that a given package is not tagged with 'latest', published to the global public registry or that a scoped module is private by default.\n\t */\n\tpublishConfig?: {\n\t\t[config: string]: unknown;\n\t};\n} &\nPackageJson.NonStandardEntryPoints &\nPackageJson.TypeScriptConfiguration &\nPackageJson.YarnConfiguration &\nPackageJson.JSPMConfiguration & {\n\t[key: string]: unknown;\n};\n"]},"metadata":{},"sourceType":"module"}