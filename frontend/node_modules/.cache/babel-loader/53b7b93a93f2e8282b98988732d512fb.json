{"ast":null,"code":"/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\nlet path = require('path');\n\nlet currDir = process.cwd();\n/**\n  @name jake\n  @namespace jake\n*/\n\n/**\n  @name jake.TestTask\n  @constructor\n  @description Instantiating a TestTask creates a number of Jake\n  Tasks that make running tests for your software easy.\n\n  @param {String} name The name of the project\n  @param {Function} definition Defines the list of files containing the tests,\n  and the name of the namespace/task for running them. Will be executed on the\n  instantiated TestTask (i.e., 'this', will be the TestTask instance), to set\n  the various instance-propertiess.\n\n  @example\n  let t = new jake.TestTask('bij-js', function () {\n    this.testName = 'testSpecial';\n    this.testFiles.include('test/**');\n  });\n\n */\n\nlet TestTask = function () {\n  let self = this;\n  let args = Array.prototype.slice.call(arguments);\n  let name = args.shift();\n  let definition = args.pop();\n  let prereqs = args.pop() || [];\n  /**\n    @name jake.TestTask#testNam\n    @public\n    @type {String}\n    @description The name of the namespace to place the tests in, and\n    the top-level task for running tests. Defaults to \"test\"\n   */\n\n  this.testName = 'test';\n  /**\n    @name jake.TestTask#testFiles\n    @public\n    @type {jake.FileList}\n    @description The list of files containing tests to load\n   */\n\n  this.testFiles = new jake.FileList();\n  /**\n    @name jake.TestTask#showDescription\n    @public\n    @type {Boolean}\n    @description Show the created task when doing Jake -T\n   */\n\n  this.showDescription = true;\n  /*\n    @name jake.TestTask#totalTests\n    @public\n    @type {Number}\n    @description The total number of tests to run\n  */\n\n  this.totalTests = 0;\n  /*\n    @name jake.TestTask#executedTests\n    @public\n    @type {Number}\n    @description The number of tests successfully run\n  */\n\n  this.executedTests = 0;\n\n  if (typeof definition == 'function') {\n    definition.call(this);\n  }\n\n  if (this.showDescription) {\n    desc('Run the tests for ' + name);\n  }\n\n  task(this.testName, prereqs, {\n    async: true\n  }, function () {\n    let t = jake.Task[this.fullName + ':run'];\n    t.on('complete', function () {\n      complete();\n    }); // Pass args to the namespaced test\n\n    t.invoke.apply(t, arguments);\n  });\n  namespace(self.testName, function () {\n    let runTask = task('run', {\n      async: true\n    }, function (pat) {\n      let re;\n      let testFiles; // Don't nest; make a top-level namespace. Don't want\n      // re-calling from inside to nest infinitely\n\n      jake.currentNamespace = jake.defaultNamespace;\n      re = new RegExp(pat); // Get test files that match the passed-in pattern\n\n      testFiles = self.testFiles.toArray().filter(function (f) {\n        return re.test(f);\n      }) // Don't load the same file multiple times -- should this be in FileList?\n      .reduce(function (p, c) {\n        if (p.indexOf(c) < 0) {\n          p.push(c);\n        }\n\n        return p;\n      }, []); // Create a namespace for all the testing tasks to live in\n\n      namespace(self.testName + 'Exec', function () {\n        // Each test will be a prereq for the dummy top-level task\n        let prereqs = []; // Continuation to pass to the async tests, wrapping `continune`\n\n        let next = function () {\n          complete();\n        }; // Create the task for this test-function\n\n\n        let createTask = function (name, action) {\n          // If the test-function is defined with a continuation\n          // param, flag the task as async\n          let t;\n          let isAsync = !!action.length; // Define the actual namespaced task with the name, the\n          // wrapped action, and the correc async-flag\n\n          t = task(name, createAction(name, action), {\n            async: isAsync\n          });\n          t.once('complete', function () {\n            self.executedTests++;\n          });\n          t._internal = true;\n          return t;\n        }; // Used as the action for the defined task for each test.\n\n\n        let createAction = function (n, a) {\n          // A wrapped function that passes in the `next` function\n          // for any tasks that run asynchronously\n          return function () {\n            let cb;\n\n            if (a.length) {\n              cb = next;\n            }\n\n            if (!(n == 'before' || n == 'after' || /_beforeEach$/.test(n) || /_afterEach$/.test(n))) {\n              jake.logger.log(n);\n            } // 'this' will be the task when action is run\n\n\n            return a.call(this, cb);\n          };\n        }; // Dummy top-level task for everything to be prereqs for\n\n\n        let topLevel; // Pull in each test-file, and iterate over any exported\n        // test-functions. Register each test-function as a prereq task\n\n        testFiles.forEach(function (file) {\n          let exp = require(path.join(currDir, file)); // Create a namespace for each filename, so test-name collisions\n          // won't be a problem\n\n\n          namespace(file, function () {\n            let testPrefix = self.testName + 'Exec:' + file + ':';\n            let testName; // Dummy task for displaying file banner\n\n            testName = '*** Running ' + file + ' ***';\n            prereqs.push(testPrefix + testName);\n            createTask(testName, function () {}); // 'before' setup\n\n            if (typeof exp.before == 'function') {\n              prereqs.push(testPrefix + 'before'); // Create the task\n\n              createTask('before', exp.before);\n            } // Walk each exported function, and create a task for each\n\n\n            for (let p in exp) {\n              if (p == 'before' || p == 'after' || p == 'beforeEach' || p == 'afterEach') {\n                continue;\n              }\n\n              if (typeof exp.beforeEach == 'function') {\n                prereqs.push(testPrefix + p + '_beforeEach'); // Create the task\n\n                createTask(p + '_beforeEach', exp.beforeEach);\n              } // Add the namespace:name of this test to the list of prereqs\n              // for the dummy top-level task\n\n\n              prereqs.push(testPrefix + p); // Create the task\n\n              createTask(p, exp[p]);\n\n              if (typeof exp.afterEach == 'function') {\n                prereqs.push(testPrefix + p + '_afterEach'); // Create the task\n\n                createTask(p + '_afterEach', exp.afterEach);\n              }\n            } // 'after' teardown\n\n\n            if (typeof exp.after == 'function') {\n              prereqs.push(testPrefix + 'after'); // Create the task\n\n              let afterTask = createTask('after', exp.after);\n              afterTask._internal = true;\n            }\n          });\n        });\n        self.totalTests = prereqs.length;\n        process.on('exit', function () {\n          // Throw in the case where the process exits without\n          // finishing tests, but no error was thrown\n          if (!jake.errorCode && self.totalTests > self.executedTests) {\n            throw new Error('Process exited without all tests completing.');\n          }\n        }); // Create the dummy top-level task. When calling a task internally\n        // with `invoke` that is async (or has async prereqs), have to listen\n        // for the 'complete' event to know when it's done\n\n        topLevel = task('__top__', prereqs);\n        topLevel._internal = true;\n        topLevel.addListener('complete', function () {\n          jake.logger.log('All tests ran successfully');\n          complete();\n        });\n        topLevel.invoke(); // Do the thing!\n      });\n    });\n    runTask._internal = true;\n  });\n};\n\n_c = TestTask;\njake.TestTask = TestTask;\nexports.TestTask = TestTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestTask\");","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/jake/lib/test_task.js"],"names":["path","require","currDir","process","cwd","TestTask","self","args","Array","prototype","slice","call","arguments","name","shift","definition","pop","prereqs","testName","testFiles","jake","FileList","showDescription","totalTests","executedTests","desc","task","async","t","Task","fullName","on","complete","invoke","apply","namespace","runTask","pat","re","currentNamespace","defaultNamespace","RegExp","toArray","filter","f","test","reduce","p","c","indexOf","push","next","createTask","action","isAsync","length","createAction","once","_internal","n","a","cb","logger","log","topLevel","forEach","file","exp","join","testPrefix","before","beforeEach","afterEach","after","afterTask","errorCode","Error","addListener","exports"],"mappings":"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","sourcesContent":["/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\nlet path = require('path');\nlet currDir = process.cwd();\n\n/**\n  @name jake\n  @namespace jake\n*/\n/**\n  @name jake.TestTask\n  @constructor\n  @description Instantiating a TestTask creates a number of Jake\n  Tasks that make running tests for your software easy.\n\n  @param {String} name The name of the project\n  @param {Function} definition Defines the list of files containing the tests,\n  and the name of the namespace/task for running them. Will be executed on the\n  instantiated TestTask (i.e., 'this', will be the TestTask instance), to set\n  the various instance-propertiess.\n\n  @example\n  let t = new jake.TestTask('bij-js', function () {\n    this.testName = 'testSpecial';\n    this.testFiles.include('test/**');\n  });\n\n */\nlet TestTask = function () {\n  let self = this;\n  let args = Array.prototype.slice.call(arguments);\n  let name = args.shift();\n  let definition = args.pop();\n  let prereqs = args.pop() || [];\n\n  /**\n    @name jake.TestTask#testNam\n    @public\n    @type {String}\n    @description The name of the namespace to place the tests in, and\n    the top-level task for running tests. Defaults to \"test\"\n   */\n  this.testName = 'test';\n\n  /**\n    @name jake.TestTask#testFiles\n    @public\n    @type {jake.FileList}\n    @description The list of files containing tests to load\n   */\n  this.testFiles = new jake.FileList();\n\n  /**\n    @name jake.TestTask#showDescription\n    @public\n    @type {Boolean}\n    @description Show the created task when doing Jake -T\n   */\n  this.showDescription = true;\n\n  /*\n    @name jake.TestTask#totalTests\n    @public\n    @type {Number}\n    @description The total number of tests to run\n  */\n  this.totalTests = 0;\n\n  /*\n    @name jake.TestTask#executedTests\n    @public\n    @type {Number}\n    @description The number of tests successfully run\n  */\n  this.executedTests = 0;\n\n  if (typeof definition == 'function') {\n    definition.call(this);\n  }\n\n  if (this.showDescription) {\n    desc('Run the tests for ' + name);\n  }\n\n  task(this.testName, prereqs, {async: true}, function () {\n    let t = jake.Task[this.fullName + ':run'];\n    t.on('complete', function () {\n      complete();\n    });\n    // Pass args to the namespaced test\n    t.invoke.apply(t, arguments);\n  });\n\n  namespace(self.testName, function () {\n\n    let runTask = task('run', {async: true}, function (pat) {\n      let re;\n      let testFiles;\n\n      // Don't nest; make a top-level namespace. Don't want\n      // re-calling from inside to nest infinitely\n      jake.currentNamespace = jake.defaultNamespace;\n\n      re = new RegExp(pat);\n      // Get test files that match the passed-in pattern\n      testFiles = self.testFiles.toArray()\n        .filter(function (f) {\n          return (re).test(f);\n        }) // Don't load the same file multiple times -- should this be in FileList?\n        .reduce(function (p, c) {\n          if (p.indexOf(c) < 0) {\n            p.push(c);\n          }\n          return p;\n        }, []);\n\n      // Create a namespace for all the testing tasks to live in\n      namespace(self.testName + 'Exec', function () {\n        // Each test will be a prereq for the dummy top-level task\n        let prereqs = [];\n        // Continuation to pass to the async tests, wrapping `continune`\n        let next = function () {\n          complete();\n        };\n        // Create the task for this test-function\n        let createTask = function (name, action) {\n          // If the test-function is defined with a continuation\n          // param, flag the task as async\n          let t;\n          let isAsync = !!action.length;\n\n          // Define the actual namespaced task with the name, the\n          // wrapped action, and the correc async-flag\n          t = task(name, createAction(name, action), {\n            async: isAsync\n          });\n          t.once('complete', function () {\n            self.executedTests++;\n          });\n          t._internal = true;\n          return t;\n        };\n        // Used as the action for the defined task for each test.\n        let createAction = function (n, a) {\n          // A wrapped function that passes in the `next` function\n          // for any tasks that run asynchronously\n          return function () {\n            let cb;\n            if (a.length) {\n              cb = next;\n            }\n            if (!(n == 'before' || n == 'after' ||\n                    /_beforeEach$/.test(n) || /_afterEach$/.test(n))) {\n              jake.logger.log(n);\n            }\n            // 'this' will be the task when action is run\n            return a.call(this, cb);\n          };\n        };\n          // Dummy top-level task for everything to be prereqs for\n        let topLevel;\n\n        // Pull in each test-file, and iterate over any exported\n        // test-functions. Register each test-function as a prereq task\n        testFiles.forEach(function (file) {\n          let exp = require(path.join(currDir, file));\n\n          // Create a namespace for each filename, so test-name collisions\n          // won't be a problem\n          namespace(file, function () {\n            let testPrefix = self.testName + 'Exec:' + file + ':';\n            let testName;\n            // Dummy task for displaying file banner\n            testName = '*** Running ' + file + ' ***';\n            prereqs.push(testPrefix + testName);\n            createTask(testName, function () {});\n\n            // 'before' setup\n            if (typeof exp.before == 'function') {\n              prereqs.push(testPrefix + 'before');\n              // Create the task\n              createTask('before', exp.before);\n            }\n\n            // Walk each exported function, and create a task for each\n            for (let p in exp) {\n              if (p == 'before' || p == 'after' ||\n                  p == 'beforeEach' || p == 'afterEach') {\n                continue;\n              }\n\n              if (typeof exp.beforeEach == 'function') {\n                prereqs.push(testPrefix + p + '_beforeEach');\n                // Create the task\n                createTask(p + '_beforeEach', exp.beforeEach);\n              }\n\n              // Add the namespace:name of this test to the list of prereqs\n              // for the dummy top-level task\n              prereqs.push(testPrefix + p);\n              // Create the task\n              createTask(p, exp[p]);\n\n              if (typeof exp.afterEach == 'function') {\n                prereqs.push(testPrefix + p + '_afterEach');\n                // Create the task\n                createTask(p + '_afterEach', exp.afterEach);\n              }\n            }\n\n            // 'after' teardown\n            if (typeof exp.after == 'function') {\n              prereqs.push(testPrefix + 'after');\n              // Create the task\n              let afterTask = createTask('after', exp.after);\n              afterTask._internal = true;\n            }\n\n          });\n        });\n\n        self.totalTests = prereqs.length;\n        process.on('exit', function () {\n          // Throw in the case where the process exits without\n          // finishing tests, but no error was thrown\n          if (!jake.errorCode && (self.totalTests > self.executedTests)) {\n            throw new Error('Process exited without all tests completing.');\n          }\n        });\n\n        // Create the dummy top-level task. When calling a task internally\n        // with `invoke` that is async (or has async prereqs), have to listen\n        // for the 'complete' event to know when it's done\n        topLevel = task('__top__', prereqs);\n        topLevel._internal = true;\n        topLevel.addListener('complete', function () {\n          jake.logger.log('All tests ran successfully');\n          complete();\n        });\n\n        topLevel.invoke(); // Do the thing!\n      });\n\n    });\n    runTask._internal = true;\n\n  });\n\n\n};\n\njake.TestTask = TestTask;\nexports.TestTask = TestTask;\n\n"]},"metadata":{},"sourceType":"module"}