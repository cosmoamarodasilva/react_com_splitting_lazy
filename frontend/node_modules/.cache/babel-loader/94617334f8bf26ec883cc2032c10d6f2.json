{"ast":null,"code":"'use strict';\n\nvar singleComment = 1;\nvar multiComment = 2;\n\nfunction stripWithoutWhitespace() {\n  return '';\n}\n\nfunction stripWithWhitespace(str, start, end) {\n  return str.slice(start, end).replace(/\\S/g, ' ');\n}\n\nmodule.exports = function (str, opts) {\n  opts = opts || {};\n  var currentChar;\n  var nextChar;\n  var insideString = false;\n  var insideComment = false;\n  var offset = 0;\n  var ret = '';\n  var strip = opts.whitespace === false ? stripWithoutWhitespace : stripWithWhitespace;\n\n  for (var i = 0; i < str.length; i++) {\n    currentChar = str[i];\n    nextChar = str[i + 1];\n\n    if (!insideComment && currentChar === '\"') {\n      var escaped = str[i - 1] === '\\\\' && str[i - 2] !== '\\\\';\n\n      if (!escaped) {\n        insideString = !insideString;\n      }\n    }\n\n    if (insideString) {\n      continue;\n    }\n\n    if (!insideComment && currentChar + nextChar === '//') {\n      ret += str.slice(offset, i);\n      offset = i;\n      insideComment = singleComment;\n      i++;\n    } else if (insideComment === singleComment && currentChar + nextChar === '\\r\\n') {\n      i++;\n      insideComment = false;\n      ret += strip(str, offset, i);\n      offset = i;\n      continue;\n    } else if (insideComment === singleComment && currentChar === '\\n') {\n      insideComment = false;\n      ret += strip(str, offset, i);\n      offset = i;\n    } else if (!insideComment && currentChar + nextChar === '/*') {\n      ret += str.slice(offset, i);\n      offset = i;\n      insideComment = multiComment;\n      i++;\n      continue;\n    } else if (insideComment === multiComment && currentChar + nextChar === '*/') {\n      i++;\n      insideComment = false;\n      ret += strip(str, offset, i + 1);\n      offset = i + 1;\n      continue;\n    }\n  }\n\n  return ret + (insideComment ? strip(str.substr(offset)) : str.substr(offset));\n};","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/strip-json-comments/index.js"],"names":["singleComment","multiComment","stripWithoutWhitespace","stripWithWhitespace","str","start","end","slice","replace","module","exports","opts","currentChar","nextChar","insideString","insideComment","offset","ret","strip","whitespace","i","length","escaped","substr"],"mappings":"AAAA;;AACA,IAAIA,aAAa,GAAG,CAApB;AACA,IAAIC,YAAY,GAAG,CAAnB;;AAEA,SAASC,sBAAT,GAAkC;AACjC,SAAO,EAAP;AACA;;AAED,SAASC,mBAAT,CAA6BC,GAA7B,EAAkCC,KAAlC,EAAyCC,GAAzC,EAA8C;AAC7C,SAAOF,GAAG,CAACG,KAAJ,CAAUF,KAAV,EAAiBC,GAAjB,EAAsBE,OAAtB,CAA8B,KAA9B,EAAqC,GAArC,CAAP;AACA;;AAEDC,MAAM,CAACC,OAAP,GAAiB,UAAUN,GAAV,EAAeO,IAAf,EAAqB;AACrCA,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,MAAIC,WAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,aAAa,GAAG,KAApB;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,KAAK,GAAGP,IAAI,CAACQ,UAAL,KAAoB,KAApB,GAA4BjB,sBAA5B,GAAqDC,mBAAjE;;AAEA,OAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,GAAG,CAACiB,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACpCR,IAAAA,WAAW,GAAGR,GAAG,CAACgB,CAAD,CAAjB;AACAP,IAAAA,QAAQ,GAAGT,GAAG,CAACgB,CAAC,GAAG,CAAL,CAAd;;AAEA,QAAI,CAACL,aAAD,IAAkBH,WAAW,KAAK,GAAtC,EAA2C;AAC1C,UAAIU,OAAO,GAAGlB,GAAG,CAACgB,CAAC,GAAG,CAAL,CAAH,KAAe,IAAf,IAAuBhB,GAAG,CAACgB,CAAC,GAAG,CAAL,CAAH,KAAe,IAApD;;AACA,UAAI,CAACE,OAAL,EAAc;AACbR,QAAAA,YAAY,GAAG,CAACA,YAAhB;AACA;AACD;;AAED,QAAIA,YAAJ,EAAkB;AACjB;AACA;;AAED,QAAI,CAACC,aAAD,IAAkBH,WAAW,GAAGC,QAAd,KAA2B,IAAjD,EAAuD;AACtDI,MAAAA,GAAG,IAAIb,GAAG,CAACG,KAAJ,CAAUS,MAAV,EAAkBI,CAAlB,CAAP;AACAJ,MAAAA,MAAM,GAAGI,CAAT;AACAL,MAAAA,aAAa,GAAGf,aAAhB;AACAoB,MAAAA,CAAC;AACD,KALD,MAKO,IAAIL,aAAa,KAAKf,aAAlB,IAAmCY,WAAW,GAAGC,QAAd,KAA2B,MAAlE,EAA0E;AAChFO,MAAAA,CAAC;AACDL,MAAAA,aAAa,GAAG,KAAhB;AACAE,MAAAA,GAAG,IAAIC,KAAK,CAACd,GAAD,EAAMY,MAAN,EAAcI,CAAd,CAAZ;AACAJ,MAAAA,MAAM,GAAGI,CAAT;AACA;AACA,KANM,MAMA,IAAIL,aAAa,KAAKf,aAAlB,IAAmCY,WAAW,KAAK,IAAvD,EAA6D;AACnEG,MAAAA,aAAa,GAAG,KAAhB;AACAE,MAAAA,GAAG,IAAIC,KAAK,CAACd,GAAD,EAAMY,MAAN,EAAcI,CAAd,CAAZ;AACAJ,MAAAA,MAAM,GAAGI,CAAT;AACA,KAJM,MAIA,IAAI,CAACL,aAAD,IAAkBH,WAAW,GAAGC,QAAd,KAA2B,IAAjD,EAAuD;AAC7DI,MAAAA,GAAG,IAAIb,GAAG,CAACG,KAAJ,CAAUS,MAAV,EAAkBI,CAAlB,CAAP;AACAJ,MAAAA,MAAM,GAAGI,CAAT;AACAL,MAAAA,aAAa,GAAGd,YAAhB;AACAmB,MAAAA,CAAC;AACD;AACA,KANM,MAMA,IAAIL,aAAa,KAAKd,YAAlB,IAAkCW,WAAW,GAAGC,QAAd,KAA2B,IAAjE,EAAuE;AAC7EO,MAAAA,CAAC;AACDL,MAAAA,aAAa,GAAG,KAAhB;AACAE,MAAAA,GAAG,IAAIC,KAAK,CAACd,GAAD,EAAMY,MAAN,EAAcI,CAAC,GAAG,CAAlB,CAAZ;AACAJ,MAAAA,MAAM,GAAGI,CAAC,GAAG,CAAb;AACA;AACA;AACD;;AAED,SAAOH,GAAG,IAAIF,aAAa,GAAGG,KAAK,CAACd,GAAG,CAACmB,MAAJ,CAAWP,MAAX,CAAD,CAAR,GAA+BZ,GAAG,CAACmB,MAAJ,CAAWP,MAAX,CAAhD,CAAV;AACA,CAzDD","sourcesContent":["'use strict';\nvar singleComment = 1;\nvar multiComment = 2;\n\nfunction stripWithoutWhitespace() {\n\treturn '';\n}\n\nfunction stripWithWhitespace(str, start, end) {\n\treturn str.slice(start, end).replace(/\\S/g, ' ');\n}\n\nmodule.exports = function (str, opts) {\n\topts = opts || {};\n\n\tvar currentChar;\n\tvar nextChar;\n\tvar insideString = false;\n\tvar insideComment = false;\n\tvar offset = 0;\n\tvar ret = '';\n\tvar strip = opts.whitespace === false ? stripWithoutWhitespace : stripWithWhitespace;\n\n\tfor (var i = 0; i < str.length; i++) {\n\t\tcurrentChar = str[i];\n\t\tnextChar = str[i + 1];\n\n\t\tif (!insideComment && currentChar === '\"') {\n\t\t\tvar escaped = str[i - 1] === '\\\\' && str[i - 2] !== '\\\\';\n\t\t\tif (!escaped) {\n\t\t\t\tinsideString = !insideString;\n\t\t\t}\n\t\t}\n\n\t\tif (insideString) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!insideComment && currentChar + nextChar === '//') {\n\t\t\tret += str.slice(offset, i);\n\t\t\toffset = i;\n\t\t\tinsideComment = singleComment;\n\t\t\ti++;\n\t\t} else if (insideComment === singleComment && currentChar + nextChar === '\\r\\n') {\n\t\t\ti++;\n\t\t\tinsideComment = false;\n\t\t\tret += strip(str, offset, i);\n\t\t\toffset = i;\n\t\t\tcontinue;\n\t\t} else if (insideComment === singleComment && currentChar === '\\n') {\n\t\t\tinsideComment = false;\n\t\t\tret += strip(str, offset, i);\n\t\t\toffset = i;\n\t\t} else if (!insideComment && currentChar + nextChar === '/*') {\n\t\t\tret += str.slice(offset, i);\n\t\t\toffset = i;\n\t\t\tinsideComment = multiComment;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t} else if (insideComment === multiComment && currentChar + nextChar === '*/') {\n\t\t\ti++;\n\t\t\tinsideComment = false;\n\t\t\tret += strip(str, offset, i + 1);\n\t\t\toffset = i + 1;\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\treturn ret + (insideComment ? strip(str.substr(offset)) : str.substr(offset));\n};\n"]},"metadata":{},"sourceType":"module"}