{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["/// <reference lib=\"esnext\"/>\n\n// TODO: This can just be `export type Primitive = not object` when the `not` keyword is out.\n/**\nMatches any [primitive value](https://developer.mozilla.org/en-US/docs/Glossary/Primitive).\n*/\nexport type Primitive =\n\t| null\n\t| undefined\n\t| string\n\t| number\n\t| boolean\n\t| symbol\n\t| bigint;\n\n// TODO: Remove the `= unknown` sometime  in the future when most users are on TS 3.5 as it's now the default\n/**\nMatches a [`class` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n*/\nexport type Class<T = unknown, Arguments extends any[] = any[]> = new(...arguments_: Arguments) => T;\n\n/**\nMatches any [typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray), like `Uint8Array` or `Float64Array`.\n*/\nexport type TypedArray =\n\t| Int8Array\n\t| Uint8Array\n\t| Uint8ClampedArray\n\t| Int16Array\n\t| Uint16Array\n\t| Int32Array\n\t| Uint32Array\n\t| Float32Array\n\t| Float64Array\n\t| BigInt64Array\n\t| BigUint64Array;\n\n/**\nMatches a JSON object.\n\nThis type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. Don't use this as a direct return type as the user would have to double-cast it: `jsonObject as unknown as CustomResponse`. Instead, you could extend your CustomResponse type from it to ensure your type only uses JSON-compatible types: `interface CustomResponse extends JsonObject { â€¦ }`.\n*/\nexport type JsonObject = {[key: string]: JsonValue};\n\n/**\nMatches a JSON array.\n*/\nexport interface JsonArray extends Array<JsonValue> {}\n\n/**\nMatches any valid JSON value.\n*/\nexport type JsonValue = string | number | boolean | null | JsonObject | JsonArray;\n\ndeclare global {\n\tinterface SymbolConstructor {\n\t\treadonly observable: symbol;\n\t}\n}\n\n/**\nMatches a value that is like an [Observable](https://github.com/tc39/proposal-observable).\n*/\nexport interface ObservableLike {\n\tsubscribe(observer: (value: unknown) => void): void;\n\t[Symbol.observable](): ObservableLike;\n}\n"]},"metadata":{},"sourceType":"module"}