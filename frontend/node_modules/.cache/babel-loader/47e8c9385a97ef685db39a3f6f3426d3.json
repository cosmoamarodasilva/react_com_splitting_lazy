{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst os = require('os');\n\nconst fs = require('fs');\n\nconst ini = require('ini');\n\nconst isWindows = process.platform === 'win32';\n\nconst readRc = filePath => {\n  try {\n    return ini.parse(fs.readFileSync(filePath, 'utf8')).prefix;\n  } catch (_) {}\n};\n\nconst getEnvNpmPrefix = () => {\n  return Object.keys(process.env).reduce((prefix, name) => {\n    return /^npm_config_prefix$/i.test(name) ? process.env[name] : prefix;\n  }, undefined);\n};\n\nconst getGlobalNpmrc = () => {\n  if (isWindows && process.env.APPDATA) {\n    // Hardcoded contents of `c:\\Program Files\\nodejs\\node_modules\\npm\\npmrc`\n    return path.join(process.env.APPDATA, '/npm/etc/npmrc');\n  } // Homebrew special case: `$(brew --prefix)/lib/node_modules/npm/npmrc`\n\n\n  if (process.execPath.includes('/Cellar/node')) {\n    const homebrewPrefix = process.execPath.slice(0, process.execPath.indexOf('/Cellar/node'));\n    return path.join(homebrewPrefix, '/lib/node_modules/npm/npmrc');\n  }\n\n  if (process.execPath.endsWith('/bin/node')) {\n    const installDir = path.dirname(path.dirname(process.execPath));\n    return path.join(installDir, '/etc/npmrc');\n  }\n};\n\nconst getDefaultNpmPrefix = () => {\n  if (isWindows) {\n    // `c:\\node\\node.exe` → `prefix=c:\\node\\`\n    return path.dirname(process.execPath);\n  } // `/usr/local/bin/node` → `prefix=/usr/local`\n\n\n  return path.dirname(path.dirname(process.execPath));\n};\n\nconst getNpmPrefix = () => {\n  const envPrefix = getEnvNpmPrefix();\n\n  if (envPrefix) {\n    return envPrefix;\n  }\n\n  const homePrefix = readRc(path.join(os.homedir(), '.npmrc'));\n\n  if (homePrefix) {\n    return homePrefix;\n  }\n\n  if (process.env.PREFIX) {\n    return process.env.PREFIX;\n  }\n\n  const globalPrefix = readRc(getGlobalNpmrc());\n\n  if (globalPrefix) {\n    return globalPrefix;\n  }\n\n  return getDefaultNpmPrefix();\n};\n\nconst npmPrefix = path.resolve(getNpmPrefix());\n\nconst getYarnWindowsDirectory = () => {\n  if (isWindows && process.env.LOCALAPPDATA) {\n    const dir = path.join(process.env.LOCALAPPDATA, 'Yarn');\n\n    if (fs.existsSync(dir)) {\n      return dir;\n    }\n  }\n\n  return false;\n};\n\nconst getYarnPrefix = () => {\n  if (process.env.PREFIX) {\n    return process.env.PREFIX;\n  }\n\n  const windowsPrefix = getYarnWindowsDirectory();\n\n  if (windowsPrefix) {\n    return windowsPrefix;\n  }\n\n  const configPrefix = path.join(os.homedir(), '.config/yarn');\n\n  if (fs.existsSync(configPrefix)) {\n    return configPrefix;\n  }\n\n  const homePrefix = path.join(os.homedir(), '.yarn-config');\n\n  if (fs.existsSync(homePrefix)) {\n    return homePrefix;\n  } // Yarn supports the npm conventions but the inverse is not true\n\n\n  return npmPrefix;\n};\n\nexports.npm = {};\nexports.npm.prefix = npmPrefix;\nexports.npm.packages = path.join(npmPrefix, isWindows ? 'node_modules' : 'lib/node_modules');\nexports.npm.binaries = isWindows ? npmPrefix : path.join(npmPrefix, 'bin');\nconst yarnPrefix = path.resolve(getYarnPrefix());\nexports.yarn = {};\nexports.yarn.prefix = yarnPrefix;\nexports.yarn.packages = path.join(yarnPrefix, getYarnWindowsDirectory() ? 'Data/global/node_modules' : 'global/node_modules');\nexports.yarn.binaries = path.join(exports.yarn.packages, '.bin');","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/global-dirs/index.js"],"names":["path","require","os","fs","ini","isWindows","process","platform","readRc","filePath","parse","readFileSync","prefix","_","getEnvNpmPrefix","Object","keys","env","reduce","name","test","undefined","getGlobalNpmrc","APPDATA","join","execPath","includes","homebrewPrefix","slice","indexOf","endsWith","installDir","dirname","getDefaultNpmPrefix","getNpmPrefix","envPrefix","homePrefix","homedir","PREFIX","globalPrefix","npmPrefix","resolve","getYarnWindowsDirectory","LOCALAPPDATA","dir","existsSync","getYarnPrefix","windowsPrefix","configPrefix","exports","npm","packages","binaries","yarnPrefix","yarn"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAnB;;AAEA,MAAMI,SAAS,GAAGC,OAAO,CAACC,QAAR,KAAqB,OAAvC;;AAEA,MAAMC,MAAM,GAAGC,QAAQ,IAAI;AAC1B,MAAI;AACH,WAAOL,GAAG,CAACM,KAAJ,CAAUP,EAAE,CAACQ,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAAV,EAA6CG,MAApD;AACA,GAFD,CAEE,OAAOC,CAAP,EAAU,CAAE;AACd,CAJD;;AAMA,MAAMC,eAAe,GAAG,MAAM;AAC7B,SAAOC,MAAM,CAACC,IAAP,CAAYV,OAAO,CAACW,GAApB,EAAyBC,MAAzB,CAAgC,CAACN,MAAD,EAASO,IAAT,KAAkB;AACxD,WAAQ,sBAAD,CAAyBC,IAAzB,CAA8BD,IAA9B,IAAsCb,OAAO,CAACW,GAAR,CAAYE,IAAZ,CAAtC,GAA0DP,MAAjE;AACA,GAFM,EAEJS,SAFI,CAAP;AAGA,CAJD;;AAMA,MAAMC,cAAc,GAAG,MAAM;AAC5B,MAAIjB,SAAS,IAAIC,OAAO,CAACW,GAAR,CAAYM,OAA7B,EAAsC;AACrC;AACA,WAAOvB,IAAI,CAACwB,IAAL,CAAUlB,OAAO,CAACW,GAAR,CAAYM,OAAtB,EAA+B,gBAA/B,CAAP;AACA,GAJ2B,CAM5B;;;AACA,MAAIjB,OAAO,CAACmB,QAAR,CAAiBC,QAAjB,CAA0B,cAA1B,CAAJ,EAA+C;AAC9C,UAAMC,cAAc,GAAGrB,OAAO,CAACmB,QAAR,CAAiBG,KAAjB,CAAuB,CAAvB,EAA0BtB,OAAO,CAACmB,QAAR,CAAiBI,OAAjB,CAAyB,cAAzB,CAA1B,CAAvB;AACA,WAAO7B,IAAI,CAACwB,IAAL,CAAUG,cAAV,EAA0B,6BAA1B,CAAP;AACA;;AAED,MAAIrB,OAAO,CAACmB,QAAR,CAAiBK,QAAjB,CAA0B,WAA1B,CAAJ,EAA4C;AAC3C,UAAMC,UAAU,GAAG/B,IAAI,CAACgC,OAAL,CAAahC,IAAI,CAACgC,OAAL,CAAa1B,OAAO,CAACmB,QAArB,CAAb,CAAnB;AACA,WAAOzB,IAAI,CAACwB,IAAL,CAAUO,UAAV,EAAsB,YAAtB,CAAP;AACA;AACD,CAhBD;;AAkBA,MAAME,mBAAmB,GAAG,MAAM;AACjC,MAAI5B,SAAJ,EAAe;AACd;AACA,WAAOL,IAAI,CAACgC,OAAL,CAAa1B,OAAO,CAACmB,QAArB,CAAP;AACA,GAJgC,CAMjC;;;AACA,SAAOzB,IAAI,CAACgC,OAAL,CAAahC,IAAI,CAACgC,OAAL,CAAa1B,OAAO,CAACmB,QAArB,CAAb,CAAP;AACA,CARD;;AAUA,MAAMS,YAAY,GAAG,MAAM;AAC1B,QAAMC,SAAS,GAAGrB,eAAe,EAAjC;;AACA,MAAIqB,SAAJ,EAAe;AACd,WAAOA,SAAP;AACA;;AAED,QAAMC,UAAU,GAAG5B,MAAM,CAACR,IAAI,CAACwB,IAAL,CAAUtB,EAAE,CAACmC,OAAH,EAAV,EAAwB,QAAxB,CAAD,CAAzB;;AACA,MAAID,UAAJ,EAAgB;AACf,WAAOA,UAAP;AACA;;AAED,MAAI9B,OAAO,CAACW,GAAR,CAAYqB,MAAhB,EAAwB;AACvB,WAAOhC,OAAO,CAACW,GAAR,CAAYqB,MAAnB;AACA;;AAED,QAAMC,YAAY,GAAG/B,MAAM,CAACc,cAAc,EAAf,CAA3B;;AACA,MAAIiB,YAAJ,EAAkB;AACjB,WAAOA,YAAP;AACA;;AAED,SAAON,mBAAmB,EAA1B;AACA,CArBD;;AAuBA,MAAMO,SAAS,GAAGxC,IAAI,CAACyC,OAAL,CAAaP,YAAY,EAAzB,CAAlB;;AAEA,MAAMQ,uBAAuB,GAAG,MAAM;AACrC,MAAIrC,SAAS,IAAIC,OAAO,CAACW,GAAR,CAAY0B,YAA7B,EAA2C;AAC1C,UAAMC,GAAG,GAAG5C,IAAI,CAACwB,IAAL,CAAUlB,OAAO,CAACW,GAAR,CAAY0B,YAAtB,EAAoC,MAApC,CAAZ;;AACA,QAAIxC,EAAE,CAAC0C,UAAH,CAAcD,GAAd,CAAJ,EAAwB;AACvB,aAAOA,GAAP;AACA;AACD;;AAED,SAAO,KAAP;AACA,CATD;;AAWA,MAAME,aAAa,GAAG,MAAM;AAC3B,MAAIxC,OAAO,CAACW,GAAR,CAAYqB,MAAhB,EAAwB;AACvB,WAAOhC,OAAO,CAACW,GAAR,CAAYqB,MAAnB;AACA;;AAED,QAAMS,aAAa,GAAGL,uBAAuB,EAA7C;;AACA,MAAIK,aAAJ,EAAmB;AAClB,WAAOA,aAAP;AACA;;AAED,QAAMC,YAAY,GAAGhD,IAAI,CAACwB,IAAL,CAAUtB,EAAE,CAACmC,OAAH,EAAV,EAAwB,cAAxB,CAArB;;AACA,MAAIlC,EAAE,CAAC0C,UAAH,CAAcG,YAAd,CAAJ,EAAiC;AAChC,WAAOA,YAAP;AACA;;AAED,QAAMZ,UAAU,GAAGpC,IAAI,CAACwB,IAAL,CAAUtB,EAAE,CAACmC,OAAH,EAAV,EAAwB,cAAxB,CAAnB;;AACA,MAAIlC,EAAE,CAAC0C,UAAH,CAAcT,UAAd,CAAJ,EAA+B;AAC9B,WAAOA,UAAP;AACA,GAlB0B,CAoB3B;;;AACA,SAAOI,SAAP;AACA,CAtBD;;AAwBAS,OAAO,CAACC,GAAR,GAAc,EAAd;AACAD,OAAO,CAACC,GAAR,CAAYtC,MAAZ,GAAqB4B,SAArB;AACAS,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAuBnD,IAAI,CAACwB,IAAL,CAAUgB,SAAV,EAAqBnC,SAAS,GAAG,cAAH,GAAoB,kBAAlD,CAAvB;AACA4C,OAAO,CAACC,GAAR,CAAYE,QAAZ,GAAuB/C,SAAS,GAAGmC,SAAH,GAAexC,IAAI,CAACwB,IAAL,CAAUgB,SAAV,EAAqB,KAArB,CAA/C;AAEA,MAAMa,UAAU,GAAGrD,IAAI,CAACyC,OAAL,CAAaK,aAAa,EAA1B,CAAnB;AACAG,OAAO,CAACK,IAAR,GAAe,EAAf;AACAL,OAAO,CAACK,IAAR,CAAa1C,MAAb,GAAsByC,UAAtB;AACAJ,OAAO,CAACK,IAAR,CAAaH,QAAb,GAAwBnD,IAAI,CAACwB,IAAL,CAAU6B,UAAV,EAAsBX,uBAAuB,KAAK,0BAAL,GAAkC,qBAA/E,CAAxB;AACAO,OAAO,CAACK,IAAR,CAAaF,QAAb,GAAwBpD,IAAI,CAACwB,IAAL,CAAUyB,OAAO,CAACK,IAAR,CAAaH,QAAvB,EAAiC,MAAjC,CAAxB","sourcesContent":["'use strict';\nconst path = require('path');\nconst os = require('os');\nconst fs = require('fs');\nconst ini = require('ini');\n\nconst isWindows = process.platform === 'win32';\n\nconst readRc = filePath => {\n\ttry {\n\t\treturn ini.parse(fs.readFileSync(filePath, 'utf8')).prefix;\n\t} catch (_) {}\n};\n\nconst getEnvNpmPrefix = () => {\n\treturn Object.keys(process.env).reduce((prefix, name) => {\n\t\treturn (/^npm_config_prefix$/i).test(name) ? process.env[name] : prefix;\n\t}, undefined);\n};\n\nconst getGlobalNpmrc = () => {\n\tif (isWindows && process.env.APPDATA) {\n\t\t// Hardcoded contents of `c:\\Program Files\\nodejs\\node_modules\\npm\\npmrc`\n\t\treturn path.join(process.env.APPDATA, '/npm/etc/npmrc');\n\t}\n\n\t// Homebrew special case: `$(brew --prefix)/lib/node_modules/npm/npmrc`\n\tif (process.execPath.includes('/Cellar/node')) {\n\t\tconst homebrewPrefix = process.execPath.slice(0, process.execPath.indexOf('/Cellar/node'));\n\t\treturn path.join(homebrewPrefix, '/lib/node_modules/npm/npmrc');\n\t}\n\n\tif (process.execPath.endsWith('/bin/node')) {\n\t\tconst installDir = path.dirname(path.dirname(process.execPath));\n\t\treturn path.join(installDir, '/etc/npmrc');\n\t}\n};\n\nconst getDefaultNpmPrefix = () => {\n\tif (isWindows) {\n\t\t// `c:\\node\\node.exe` → `prefix=c:\\node\\`\n\t\treturn path.dirname(process.execPath);\n\t}\n\n\t// `/usr/local/bin/node` → `prefix=/usr/local`\n\treturn path.dirname(path.dirname(process.execPath));\n};\n\nconst getNpmPrefix = () => {\n\tconst envPrefix = getEnvNpmPrefix();\n\tif (envPrefix) {\n\t\treturn envPrefix;\n\t}\n\n\tconst homePrefix = readRc(path.join(os.homedir(), '.npmrc'));\n\tif (homePrefix) {\n\t\treturn homePrefix;\n\t}\n\n\tif (process.env.PREFIX) {\n\t\treturn process.env.PREFIX;\n\t}\n\n\tconst globalPrefix = readRc(getGlobalNpmrc());\n\tif (globalPrefix) {\n\t\treturn globalPrefix;\n\t}\n\n\treturn getDefaultNpmPrefix();\n};\n\nconst npmPrefix = path.resolve(getNpmPrefix());\n\nconst getYarnWindowsDirectory = () => {\n\tif (isWindows && process.env.LOCALAPPDATA) {\n\t\tconst dir = path.join(process.env.LOCALAPPDATA, 'Yarn');\n\t\tif (fs.existsSync(dir)) {\n\t\t\treturn dir;\n\t\t}\n\t}\n\n\treturn false;\n};\n\nconst getYarnPrefix = () => {\n\tif (process.env.PREFIX) {\n\t\treturn process.env.PREFIX;\n\t}\n\n\tconst windowsPrefix = getYarnWindowsDirectory();\n\tif (windowsPrefix) {\n\t\treturn windowsPrefix;\n\t}\n\n\tconst configPrefix = path.join(os.homedir(), '.config/yarn');\n\tif (fs.existsSync(configPrefix)) {\n\t\treturn configPrefix;\n\t}\n\n\tconst homePrefix = path.join(os.homedir(), '.yarn-config');\n\tif (fs.existsSync(homePrefix)) {\n\t\treturn homePrefix;\n\t}\n\n\t// Yarn supports the npm conventions but the inverse is not true\n\treturn npmPrefix;\n};\n\nexports.npm = {};\nexports.npm.prefix = npmPrefix;\nexports.npm.packages = path.join(npmPrefix, isWindows ? 'node_modules' : 'lib/node_modules');\nexports.npm.binaries = isWindows ? npmPrefix : path.join(npmPrefix, 'bin');\n\nconst yarnPrefix = path.resolve(getYarnPrefix());\nexports.yarn = {};\nexports.yarn.prefix = yarnPrefix;\nexports.yarn.packages = path.join(yarnPrefix, getYarnWindowsDirectory() ? 'Data/global/node_modules' : 'global/node_modules');\nexports.yarn.binaries = path.join(exports.yarn.packages, '.bin');\n"]},"metadata":{},"sourceType":"module"}