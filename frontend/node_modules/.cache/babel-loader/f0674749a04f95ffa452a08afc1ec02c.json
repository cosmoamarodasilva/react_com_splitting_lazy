{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import {Except} from './except';\n\n/**\nCreate a type that requires at least one of the given keys. The remaining keys are kept as is.\n\n@example\n```\nimport {RequireAtLeastOne} from 'type-fest';\n\ntype Responder = {\n\ttext?: () => string;\n\tjson?: () => string;\n\n\tsecure?: boolean;\n};\n\nconst responder: RequireAtLeastOne<Responder, 'text' | 'json'> = {\n\tjson: () => '{\"message\": \"ok\"}',\n\tsecure: true\n};\n```\n*/\nexport type RequireAtLeastOne<ObjectType, KeysType extends keyof ObjectType = keyof ObjectType> =\n\t{\n\t\t// For each Key in KeysType make a mapped type\n\t\t[Key in KeysType]: (\n\t\t\t// …by picking that Key's type and making it required\n\t\t\tRequired<Pick<ObjectType, Key>>\n\t\t)\n\t}[KeysType]\n\t// …then, make intersection types by adding the remaining keys to each mapped type.\n\t& Except<ObjectType, KeysType>;\n"]},"metadata":{},"sourceType":"module"}