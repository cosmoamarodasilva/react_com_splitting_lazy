{"ast":null,"code":"'use strict';\n\nconst lazy = (mod, fn, id) => mod === undefined ? fn(id) : mod;\n\nmodule.exports = fn => {\n  return id => {\n    let mod;\n    return function () {\n      if (arguments.length === 0) {\n        mod = lazy(mod, fn, id);\n        return mod;\n      }\n\n      const ret = {};\n      [].forEach.call(arguments, prop => {\n        Object.defineProperty(ret, prop, {\n          get: () => {\n            mod = lazy(mod, fn, id);\n\n            if (typeof mod[prop] === 'function') {\n              return function () {\n                return mod[prop].apply(mod, arguments);\n              };\n            }\n\n            return mod[prop];\n          }\n        });\n      });\n      return ret;\n    };\n  };\n};\n\nmodule.exports.proxy = fn => {\n  return id => {\n    let mod;\n    const handler = {\n      get: (target, property) => {\n        mod = lazy(mod, fn, id);\n        return Reflect.get(mod, property);\n      },\n      apply: (target, thisArg, argumentsList) => {\n        mod = lazy(mod, fn, id);\n        return Reflect.apply(mod, thisArg, argumentsList);\n      }\n    };\n    return new Proxy(() => {}, handler);\n  };\n};","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/import-lazy/index.js"],"names":["lazy","mod","fn","id","undefined","module","exports","arguments","length","ret","forEach","call","prop","Object","defineProperty","get","apply","proxy","handler","target","property","Reflect","thisArg","argumentsList","Proxy"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAG,CAACC,GAAD,EAAMC,EAAN,EAAUC,EAAV,KAAiBF,GAAG,KAAKG,SAAR,GAAoBF,EAAE,CAACC,EAAD,CAAtB,GAA6BF,GAA3D;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,EAAE,IAAI;AACtB,SAAOC,EAAE,IAAI;AACZ,QAAIF,GAAJ;AAEA,WAAO,YAAY;AAClB,UAAIM,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC3BP,QAAAA,GAAG,GAAGD,IAAI,CAACC,GAAD,EAAMC,EAAN,EAAUC,EAAV,CAAV;AACA,eAAOF,GAAP;AACA;;AAED,YAAMQ,GAAG,GAAG,EAAZ;AAEA,SAAGC,OAAH,CAAWC,IAAX,CAAgBJ,SAAhB,EAA2BK,IAAI,IAAI;AAClCC,QAAAA,MAAM,CAACC,cAAP,CAAsBL,GAAtB,EAA2BG,IAA3B,EAAiC;AAChCG,UAAAA,GAAG,EAAE,MAAM;AACVd,YAAAA,GAAG,GAAGD,IAAI,CAACC,GAAD,EAAMC,EAAN,EAAUC,EAAV,CAAV;;AACA,gBAAI,OAAOF,GAAG,CAACW,IAAD,CAAV,KAAqB,UAAzB,EAAqC;AACpC,qBAAO,YAAY;AAClB,uBAAOX,GAAG,CAACW,IAAD,CAAH,CAAUI,KAAV,CAAgBf,GAAhB,EAAqBM,SAArB,CAAP;AACA,eAFD;AAGA;;AAED,mBAAON,GAAG,CAACW,IAAD,CAAV;AACA;AAV+B,SAAjC;AAYA,OAbD;AAeA,aAAOH,GAAP;AACA,KAxBD;AAyBA,GA5BD;AA6BA,CA9BD;;AAgCAJ,MAAM,CAACC,OAAP,CAAeW,KAAf,GAAuBf,EAAE,IAAI;AAC5B,SAAOC,EAAE,IAAI;AACZ,QAAIF,GAAJ;AAEA,UAAMiB,OAAO,GAAG;AACfH,MAAAA,GAAG,EAAE,CAACI,MAAD,EAASC,QAAT,KAAsB;AAC1BnB,QAAAA,GAAG,GAAGD,IAAI,CAACC,GAAD,EAAMC,EAAN,EAAUC,EAAV,CAAV;AACA,eAAOkB,OAAO,CAACN,GAAR,CAAYd,GAAZ,EAAiBmB,QAAjB,CAAP;AACA,OAJc;AAKfJ,MAAAA,KAAK,EAAE,CAACG,MAAD,EAASG,OAAT,EAAkBC,aAAlB,KAAoC;AAC1CtB,QAAAA,GAAG,GAAGD,IAAI,CAACC,GAAD,EAAMC,EAAN,EAAUC,EAAV,CAAV;AACA,eAAOkB,OAAO,CAACL,KAAR,CAAcf,GAAd,EAAmBqB,OAAnB,EAA4BC,aAA5B,CAAP;AACA;AARc,KAAhB;AAWA,WAAO,IAAIC,KAAJ,CAAU,MAAM,CAAE,CAAlB,EAAoBN,OAApB,CAAP;AACA,GAfD;AAgBA,CAjBD","sourcesContent":["'use strict';\nconst lazy = (mod, fn, id) => mod === undefined ? fn(id) : mod;\n\nmodule.exports = fn => {\n\treturn id => {\n\t\tlet mod;\n\n\t\treturn function () {\n\t\t\tif (arguments.length === 0) {\n\t\t\t\tmod = lazy(mod, fn, id);\n\t\t\t\treturn mod;\n\t\t\t}\n\n\t\t\tconst ret = {};\n\n\t\t\t[].forEach.call(arguments, prop => {\n\t\t\t\tObject.defineProperty(ret, prop, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\tmod = lazy(mod, fn, id);\n\t\t\t\t\t\tif (typeof mod[prop] === 'function') {\n\t\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\t\treturn mod[prop].apply(mod, arguments);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn mod[prop];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn ret;\n\t\t};\n\t};\n};\n\nmodule.exports.proxy = fn => {\n\treturn id => {\n\t\tlet mod;\n\n\t\tconst handler = {\n\t\t\tget: (target, property) => {\n\t\t\t\tmod = lazy(mod, fn, id);\n\t\t\t\treturn Reflect.get(mod, property);\n\t\t\t},\n\t\t\tapply: (target, thisArg, argumentsList) => {\n\t\t\t\tmod = lazy(mod, fn, id);\n\t\t\t\treturn Reflect.apply(mod, thisArg, argumentsList);\n\t\t\t}\n\t\t};\n\n\t\treturn new Proxy(() => {}, handler);\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}