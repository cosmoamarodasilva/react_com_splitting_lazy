{"ast":null,"code":"var test = require('tape');\n\nvar _JSON = require('../');\n\nfunction clone(o) {\n  return JSON.parse(JSON.stringify(o));\n}\n\nvar examples = {\n  simple: {\n    foo: [],\n    bar: {},\n    baz: new Buffer('some binary data')\n  },\n  just_buffer: new Buffer('JUST A BUFFER'),\n  all_types: {\n    string: 'hello',\n    number: 3145,\n    null: null,\n    object: {},\n    array: [],\n    boolean: true,\n    boolean2: false\n  },\n  foo: new Buffer('foo'),\n  foo2: new Buffer('foo2'),\n  escape: {\n    buffer: new Buffer('x'),\n    string: _JSON.stringify(new Buffer('x'))\n  },\n  escape2: {\n    buffer: new Buffer('x'),\n    string: ':base64:' + new Buffer('x').toString('base64')\n  },\n  undefined: {\n    empty: undefined,\n    test: true\n  },\n  undefined2: {\n    first: 1,\n    empty: undefined,\n    test: true\n  },\n  undefinedArray: {\n    array: [undefined, 1, 'two']\n  },\n  fn: {\n    fn: function () {}\n  },\n  undefined: undefined\n};\n\nfor (k in examples) (function (value, k) {\n  test(k, function (t) {\n    var s = _JSON.stringify(value);\n\n    console.log('parse', s);\n\n    if (JSON.stringify(value) !== undefined) {\n      console.log(s);\n\n      var _value = _JSON.parse(s);\n\n      t.deepEqual(clone(_value), clone(value));\n    } else t.equal(s, undefined);\n\n    t.end();\n  });\n})(examples[k], k);","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/json-buffer/test/index.js"],"names":["test","require","_JSON","clone","o","JSON","parse","stringify","examples","simple","foo","bar","baz","Buffer","just_buffer","all_types","string","number","null","object","array","boolean","boolean2","foo2","escape","buffer","escape2","toString","undefined","empty","undefined2","first","undefinedArray","fn","k","value","t","s","console","log","_value","deepEqual","equal","end"],"mappings":"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","sourcesContent":["\nvar test = require('tape')\nvar _JSON = require('../')\n\nfunction clone (o) {\n  return JSON.parse(JSON.stringify(o))\n}\n\nvar examples = {\n  simple: { foo: [], bar: {}, baz: new Buffer('some binary data') },\n  just_buffer: new Buffer('JUST A BUFFER'),\n  all_types: {\n    string:'hello',\n    number: 3145,\n    null: null,\n    object: {},\n    array: [],\n    boolean: true,\n    boolean2: false\n  },\n  foo: new Buffer('foo'),\n  foo2: new Buffer('foo2'),\n  escape: {\n    buffer: new Buffer('x'),\n    string: _JSON.stringify(new Buffer('x'))\n  },\n  escape2: {\n    buffer: new Buffer('x'),\n    string: ':base64:'+ new Buffer('x').toString('base64')\n  },\n  undefined: {\n    empty: undefined, test: true\n  },\n  undefined2: {\n    first: 1, empty: undefined, test: true\n  },\n  undefinedArray: {\n    array: [undefined, 1, 'two']\n  },\n  fn: {\n    fn: function () {}    \n  },\n  undefined: undefined\n}\n\nfor(k in examples)\n(function (value, k) { \n  test(k, function (t) {\n    var s = _JSON.stringify(value)\n    console.log('parse', s)\n    if(JSON.stringify(value) !== undefined) {\n      console.log(s)\n      var _value = _JSON.parse(s)\n      t.deepEqual(clone(_value), clone(value))\n    }\n    else\n      t.equal(s, undefined)\n    t.end()\n  })\n})(examples[k], k)\n\n\n\n"]},"metadata":{},"sourceType":"module"}