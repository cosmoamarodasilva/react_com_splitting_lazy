{"ast":null,"code":"var t = require('tap');\n\nprocess.env.TEST_PSEUDOMAP = 'true';\n\nvar PM = require('../');\n\nrunTests(PM); // if possible, verify that Map also behaves the same way\n\nif (typeof Map === 'function') runTests(Map);\n\nfunction runTests(Map) {\n  t.throws(Map);\n  var m = new Map();\n  t.equal(m.size, 0);\n  m.set(1, '1 string');\n  t.equal(m.get(1), '1 string');\n  t.equal(m.size, 1);\n  m.size = 1000;\n  t.equal(m.size, 1);\n  m.size = 0;\n  t.equal(m.size, 1);\n  m = new Map([[1, 'number 1'], ['1', 'string 1']]);\n  t.equal(m.get(1), 'number 1');\n  t.equal(m.get('1'), 'string 1');\n  t.equal(m.size, 2);\n  m = new Map(m);\n  t.equal(m.get(1), 'number 1');\n  t.equal(m.get('1'), 'string 1');\n  t.equal(m.size, 2);\n  var akey = {};\n  var bkey = {};\n  m.set(akey, {\n    some: 'data'\n  });\n  m.set(bkey, {\n    some: 'other data'\n  });\n  t.same(m.get(akey), {\n    some: 'data'\n  });\n  t.same(m.get(bkey), {\n    some: 'other data'\n  });\n  t.equal(m.size, 4);\n  var x = /x/;\n  var y = /x/;\n  m.set(x, 'x regex');\n  m.set(y, 'y regex');\n  t.equal(m.get(x), 'x regex');\n  m.set(x, 'x again');\n  t.equal(m.get(x), 'x again');\n  t.equal(m.size, 6);\n  m.set(NaN, 'not a number');\n  t.equal(m.get(NaN), 'not a number');\n  m.set(NaN, 'it is a ' + typeof NaN);\n  t.equal(m.get(NaN), 'it is a number');\n  m.set('NaN', 'stringie nan');\n  t.equal(m.get(NaN), 'it is a number');\n  t.equal(m.get('NaN'), 'stringie nan');\n  t.equal(m.size, 8);\n  m.delete(NaN);\n  t.equal(m.get(NaN), undefined);\n  t.equal(m.size, 7);\n  var expect = [{\n    value: 'number 1',\n    key: 1\n  }, {\n    value: 'string 1',\n    key: '1'\n  }, {\n    value: {\n      some: 'data'\n    },\n    key: {}\n  }, {\n    value: {\n      some: 'other data'\n    },\n    key: {}\n  }, {\n    value: 'x again',\n    key: /x/\n  }, {\n    value: 'y regex',\n    key: /x/\n  }, {\n    value: 'stringie nan',\n    key: 'NaN'\n  }];\n  var actual = [];\n  m.forEach(function (value, key) {\n    actual.push({\n      value: value,\n      key: key\n    });\n  });\n  t.same(actual, expect);\n  m.clear();\n  t.equal(m.size, 0);\n}","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/pseudomap/test/basic.js"],"names":["t","require","process","env","TEST_PSEUDOMAP","PM","runTests","Map","throws","m","equal","size","set","get","akey","bkey","some","same","x","y","NaN","delete","undefined","expect","value","key","actual","forEach","push","clear"],"mappings":"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","sourcesContent":["var t = require('tap')\n\nprocess.env.TEST_PSEUDOMAP = 'true'\n\nvar PM = require('../')\nrunTests(PM)\n\n// if possible, verify that Map also behaves the same way\nif (typeof Map === 'function')\n  runTests(Map)\n\n\nfunction runTests (Map) {\n  t.throws(Map)\n\n  var m = new Map()\n\n  t.equal(m.size, 0)\n\n  m.set(1, '1 string')\n  t.equal(m.get(1), '1 string')\n  t.equal(m.size, 1)\n  m.size = 1000\n  t.equal(m.size, 1)\n  m.size = 0\n  t.equal(m.size, 1)\n\n  m = new Map([[1, 'number 1'], ['1', 'string 1']])\n  t.equal(m.get(1), 'number 1')\n  t.equal(m.get('1'), 'string 1')\n  t.equal(m.size, 2)\n\n  m = new Map(m)\n  t.equal(m.get(1), 'number 1')\n  t.equal(m.get('1'), 'string 1')\n  t.equal(m.size, 2)\n\n  var akey = {}\n  var bkey = {}\n  m.set(akey, { some: 'data' })\n  m.set(bkey, { some: 'other data' })\n  t.same(m.get(akey), { some: 'data' })\n  t.same(m.get(bkey), { some: 'other data' })\n  t.equal(m.size, 4)\n\n  var x = /x/\n  var y = /x/\n  m.set(x, 'x regex')\n  m.set(y, 'y regex')\n  t.equal(m.get(x), 'x regex')\n  m.set(x, 'x again')\n  t.equal(m.get(x), 'x again')\n  t.equal(m.size, 6)\n\n  m.set(NaN, 'not a number')\n  t.equal(m.get(NaN), 'not a number')\n  m.set(NaN, 'it is a ' + typeof NaN)\n  t.equal(m.get(NaN), 'it is a number')\n  m.set('NaN', 'stringie nan')\n  t.equal(m.get(NaN), 'it is a number')\n  t.equal(m.get('NaN'), 'stringie nan')\n  t.equal(m.size, 8)\n\n  m.delete(NaN)\n  t.equal(m.get(NaN), undefined)\n  t.equal(m.size, 7)\n\n  var expect = [\n    { value: 'number 1', key: 1 },\n    { value: 'string 1', key: '1' },\n    { value: { some: 'data' }, key: {} },\n    { value: { some: 'other data' }, key: {} },\n    { value: 'x again', key: /x/ },\n    { value: 'y regex', key: /x/ },\n    { value: 'stringie nan', key: 'NaN' }\n  ]\n  var actual = []\n\n  m.forEach(function (value, key) {\n    actual.push({ value: value, key: key })\n  })\n  t.same(actual, expect)\n\n  m.clear()\n  t.equal(m.size, 0)\n}\n"]},"metadata":{},"sourceType":"module"}