{"ast":null,"code":"#!/usr/bin/env node\n\n/*\n * EJS Embedded JavaScript templates\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\nlet program = require('jake').program;\n\ndelete global.jake; // NO NOT WANT\n\nprogram.setTaskNames = function (n) {\n  this.taskNames = n;\n};\n\nlet ejs = require('../lib/ejs');\n\nlet {\n  hyphenToCamel\n} = require('../lib/utils');\n\nlet fs = require('fs');\n\nlet args = process.argv.slice(2);\nlet usage = fs.readFileSync(`${__dirname}/../usage.txt`).toString();\nconst CLI_OPTS = [{\n  full: 'output-file',\n  abbr: 'o',\n  expectValue: true\n}, {\n  full: 'data-file',\n  abbr: 'f',\n  expectValue: true\n}, {\n  full: 'data-input',\n  abbr: 'i',\n  expectValue: true\n}, {\n  full: 'delimiter',\n  abbr: 'm',\n  expectValue: true,\n  passThrough: true\n}, {\n  full: 'open-delimiter',\n  abbr: 'p',\n  expectValue: true,\n  passThrough: true\n}, {\n  full: 'close-delimiter',\n  abbr: 'c',\n  expectValue: true,\n  passThrough: true\n}, {\n  full: 'strict',\n  abbr: 's',\n  expectValue: false,\n  allowValue: false,\n  passThrough: true\n}, {\n  full: 'no-with',\n  abbr: 'n',\n  expectValue: false,\n  allowValue: false\n}, {\n  full: 'locals-name',\n  abbr: 'l',\n  expectValue: true,\n  passThrough: true\n}, {\n  full: 'rm-whitespace',\n  abbr: 'w',\n  expectValue: false,\n  allowValue: false,\n  passThrough: true\n}, {\n  full: 'debug',\n  abbr: 'd',\n  expectValue: false,\n  allowValue: false,\n  passThrough: true\n}, {\n  full: 'help',\n  abbr: 'h',\n  passThrough: true\n}, {\n  full: 'version',\n  abbr: 'V',\n  passThrough: true\n}, // Alias lowercase v\n{\n  full: 'version',\n  abbr: 'v',\n  passThrough: true\n}];\nlet preempts = {\n  version: function () {\n    program.die(ejs.VERSION);\n  },\n  help: function () {\n    program.die(usage);\n  }\n};\nlet stdin = '';\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('readable', () => {\n  let chunk;\n\n  while ((chunk = process.stdin.read()) !== null) {\n    stdin += chunk;\n  }\n});\n\nfunction run() {\n  program.availableOpts = CLI_OPTS;\n  program.parseArgs(args);\n  let templatePath = program.taskNames[0];\n  let pVals = program.envVars;\n  let pOpts = {};\n\n  for (let p in program.opts) {\n    let name = hyphenToCamel(p);\n    pOpts[name] = program.opts[p];\n  }\n\n  let opts = {};\n  let vals = {}; // Same-named 'passthrough' opts\n\n  CLI_OPTS.forEach(opt => {\n    let optName = hyphenToCamel(opt.full);\n\n    if (opt.passThrough && typeof pOpts[optName] != 'undefined') {\n      opts[optName] = pOpts[optName];\n    }\n  }); // Bail out for help/version\n\n  for (let p in opts) {\n    if (preempts[p]) {\n      return preempts[p]();\n    }\n  } // Default to having views relative from the current working directory\n\n\n  opts.views = ['.']; // Ensure there's a template to render\n\n  if (!templatePath) {\n    throw new Error('Please provide a template path. (Run ejs -h for help)');\n  }\n\n  if (opts.strict) {\n    pOpts.noWith = true;\n  }\n\n  if (pOpts.noWith) {\n    opts._with = false;\n  } // Grab and parse any input data, in order of precedence:\n  // 1. Stdin\n  // 2. CLI arg via -i\n  // 3. Data file via -f\n  // Any individual vals passed at the end (e.g., foo=bar) will override\n  // any vals previously set\n\n\n  let input;\n  let err = new Error('Please do not pass data multiple ways. Pick one of stdin, -f, or -i.');\n\n  if (stdin) {\n    input = stdin;\n  } else if (pOpts.dataInput) {\n    if (input) {\n      throw err;\n    }\n\n    input = decodeURIComponent(pOpts.dataInput);\n  } else if (pOpts.dataFile) {\n    if (input) {\n      throw err;\n    }\n\n    input = fs.readFileSync(pOpts.dataFile).toString();\n  }\n\n  if (input) {\n    vals = JSON.parse(input);\n  } // Override / set any individual values passed from the command line\n\n\n  for (let p in pVals) {\n    vals[p] = pVals[p];\n  }\n\n  let template = fs.readFileSync(templatePath).toString();\n  let output = ejs.render(template, vals, opts);\n\n  if (pOpts.outputFile) {\n    fs.writeFileSync(pOpts.outputFile, output);\n  } else {\n    process.stdout.write(output);\n  }\n\n  process.exit();\n} // Defer execution so that stdin can be read if necessary\n\n\nsetImmediate(run);","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/ejs/bin/cli.js"],"names":["program","require","global","jake","setTaskNames","n","taskNames","ejs","hyphenToCamel","fs","args","process","argv","slice","usage","readFileSync","__dirname","toString","CLI_OPTS","full","abbr","expectValue","passThrough","allowValue","preempts","version","die","VERSION","help","stdin","setEncoding","on","chunk","read","run","availableOpts","parseArgs","templatePath","pVals","envVars","pOpts","p","opts","name","vals","forEach","opt","optName","views","Error","strict","noWith","_with","input","err","dataInput","decodeURIComponent","dataFile","JSON","parse","template","output","render","outputFile","writeFileSync","stdout","write","exit","setImmediate"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/*\n * EJS Embedded JavaScript templates\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\n\nlet program = require('jake').program;\ndelete global.jake; // NO NOT WANT\nprogram.setTaskNames = function (n) { this.taskNames = n; };\n\nlet ejs = require('../lib/ejs');\nlet { hyphenToCamel } = require('../lib/utils');\nlet fs = require('fs');\nlet args = process.argv.slice(2);\nlet usage = fs.readFileSync(`${__dirname}/../usage.txt`).toString();\n\nconst CLI_OPTS = [\n  { full: 'output-file',\n    abbr: 'o',\n    expectValue: true,\n  },\n  { full: 'data-file',\n    abbr: 'f',\n    expectValue: true,\n  },\n  { full: 'data-input',\n    abbr: 'i',\n    expectValue: true,\n  },\n  { full: 'delimiter',\n    abbr: 'm',\n    expectValue: true,\n    passThrough: true,\n  },\n  { full: 'open-delimiter',\n    abbr: 'p',\n    expectValue: true,\n    passThrough: true,\n  },\n  { full: 'close-delimiter',\n    abbr: 'c',\n    expectValue: true,\n    passThrough: true,\n  },\n  { full: 'strict',\n    abbr: 's',\n    expectValue: false,\n    allowValue: false,\n    passThrough: true,\n  },\n  { full: 'no-with',\n    abbr: 'n',\n    expectValue: false,\n    allowValue: false,\n  },\n  { full: 'locals-name',\n    abbr: 'l',\n    expectValue: true,\n    passThrough: true,\n  },\n  { full: 'rm-whitespace',\n    abbr: 'w',\n    expectValue: false,\n    allowValue: false,\n    passThrough: true,\n  },\n  { full: 'debug',\n    abbr: 'd',\n    expectValue: false,\n    allowValue: false,\n    passThrough: true,\n  },\n  { full: 'help',\n    abbr: 'h',\n    passThrough: true,\n  },\n  { full: 'version',\n    abbr: 'V',\n    passThrough: true,\n  },\n  // Alias lowercase v\n  { full: 'version',\n    abbr: 'v',\n    passThrough: true,\n  },\n];\n\nlet preempts = {\n  version: function () {\n    program.die(ejs.VERSION);\n  },\n  help: function () {\n    program.die(usage);\n  }\n};\n\nlet stdin = '';\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('readable', () => {\n  let chunk;\n  while ((chunk = process.stdin.read()) !== null) {\n    stdin += chunk;\n  }\n});\n\nfunction run() {\n\n  program.availableOpts = CLI_OPTS;\n  program.parseArgs(args);\n\n  let templatePath = program.taskNames[0];\n  let pVals = program.envVars;\n  let pOpts = {};\n\n  for (let p in program.opts) {\n    let name = hyphenToCamel(p);\n    pOpts[name] = program.opts[p];\n  }\n\n  let opts = {};\n  let vals = {};\n\n  // Same-named 'passthrough' opts\n  CLI_OPTS.forEach((opt) => {\n    let optName = hyphenToCamel(opt.full);\n    if (opt.passThrough && typeof pOpts[optName] != 'undefined') {\n      opts[optName] = pOpts[optName];\n    }\n  });\n\n  // Bail out for help/version\n  for (let p in opts) {\n    if (preempts[p]) {\n      return preempts[p]();\n    }\n  }\n\n  // Default to having views relative from the current working directory\n  opts.views = ['.'];\n\n  // Ensure there's a template to render\n  if (!templatePath) {\n    throw new Error('Please provide a template path. (Run ejs -h for help)');\n  }\n\n  if (opts.strict) {\n    pOpts.noWith = true;\n  }\n  if (pOpts.noWith) {\n    opts._with = false;\n  }\n\n  // Grab and parse any input data, in order of precedence:\n  // 1. Stdin\n  // 2. CLI arg via -i\n  // 3. Data file via -f\n  // Any individual vals passed at the end (e.g., foo=bar) will override\n  // any vals previously set\n  let input;\n  let err = new Error('Please do not pass data multiple ways. Pick one of stdin, -f, or -i.');\n  if (stdin) {\n    input = stdin;\n  }\n  else if (pOpts.dataInput) {\n    if (input) {\n      throw err;\n    }\n    input = decodeURIComponent(pOpts.dataInput);\n  }\n  else if (pOpts.dataFile) {\n    if (input) {\n      throw err;\n    }\n    input = fs.readFileSync(pOpts.dataFile).toString();\n  }\n\n  if (input) {\n    vals = JSON.parse(input);\n  }\n\n  // Override / set any individual values passed from the command line\n  for (let p in pVals) {\n    vals[p] = pVals[p];\n  }\n\n  let template = fs.readFileSync(templatePath).toString();\n  let output = ejs.render(template, vals, opts);\n  if (pOpts.outputFile) {\n    fs.writeFileSync(pOpts.outputFile, output);\n  }\n  else {\n    process.stdout.write(output);\n  }\n  process.exit();\n}\n\n// Defer execution so that stdin can be read if necessary\nsetImmediate(run);\n"]},"metadata":{},"sourceType":"module"}