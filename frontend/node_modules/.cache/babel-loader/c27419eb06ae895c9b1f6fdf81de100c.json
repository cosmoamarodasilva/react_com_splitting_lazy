{"ast":null,"code":"// TypeScript Version: 3.0\n/// <reference types=\"node\" />\nimport { EventEmitter } from \"events\";\nexport class FSWatcher extends EventEmitter {\n  constructor(...args) {\n    super(...args);\n    this.options = void 0;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/chokidar/types/index.d.ts"],"names":["EventEmitter","FSWatcher","options"],"mappings":"AAAA;AAEA;AAGA,SAASA,YAAT,QAA6B,QAA7B;AAEA,OAAO,MAAMC,SAAN,SAAwBD,YAAxB,CAA6D;AAAA;AAAA;AAAA,SAClEE,OADkE;AAAA;;AAAA","sourcesContent":["// TypeScript Version: 3.0\n\n/// <reference types=\"node\" />\n\nimport * as fs from \"fs\";\nimport { EventEmitter } from \"events\";\n\nexport class FSWatcher extends EventEmitter implements fs.FSWatcher {\n  options: WatchOptions;\n\n  /**\n   * Constructs a new FSWatcher instance with optional WatchOptions parameter.\n   */\n  constructor(options?: WatchOptions);\n\n  /**\n   * Add files, directories, or glob patterns for tracking. Takes an array of strings or just one\n   * string.\n   */\n  add(paths: string | ReadonlyArray<string>): void;\n\n  /**\n   * Stop watching files, directories, or glob patterns. Takes an array of strings or just one\n   * string.\n   */\n  unwatch(paths: string | ReadonlyArray<string>): void;\n\n  /**\n   * Returns an object representing all the paths on the file system being watched by this\n   * `FSWatcher` instance. The object's keys are all the directories (using absolute paths unless\n   * the `cwd` option was used), and the values are arrays of the names of the items contained in\n   * each directory.\n   */\n  getWatched(): {\n    [directory: string]: string[];\n  };\n\n  /**\n   * Removes all listeners from watched files.\n   */\n  close(): Promise<void>;\n\n  on(event: 'add'|'addDir'|'change', listener: (path: string, stats?: fs.Stats) => void): this;\n\n  on(event: 'all', listener: (eventName: 'add'|'addDir'|'change'|'unlink'|'unlinkDir', path: string, stats?: fs.Stats) => void): this;\n\n  /**\n   * Error occurred\n   */\n  on(event: 'error', listener: (error: Error) => void): this;\n\n  /**\n   * Exposes the native Node `fs.FSWatcher events`\n   */\n  on(event: 'raw', listener: (eventName: string, path: string, details: any) => void): this;\n\n  /**\n   * Fires when the initial scan is complete\n   */\n  on(event: 'ready', listener: () => void): this;\n\n  on(event: 'unlink'|'unlinkDir', listener: (path: string) => void): this;\n\n  on(event: string, listener: (...args: any[]) => void): this;\n}\n\nexport interface WatchOptions {\n  /**\n   * Indicates whether the process should continue to run as long as files are being watched. If\n   * set to `false` when using `fsevents` to watch, no more events will be emitted after `ready`,\n   * even if the process continues to run.\n   */\n  persistent?: boolean;\n\n  /**\n   * ([anymatch](https://github.com/micromatch/anymatch)-compatible definition) Defines files/paths to\n   * be ignored. The whole relative or absolute path is tested, not just filename. If a function\n   * with two arguments is provided, it gets called twice per path - once with a single argument\n   * (the path), second time with two arguments (the path and the\n   * [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats) object of that path).\n   */\n  ignored?: any;\n\n  /**\n   * If set to `false` then `add`/`addDir` events are also emitted for matching paths while\n   * instantiating the watching as chokidar discovers these file paths (before the `ready` event).\n   */\n  ignoreInitial?: boolean;\n\n  /**\n   * When `false`, only the symlinks themselves will be watched for changes instead of following\n   * the link references and bubbling events through the link's path.\n   */\n  followSymlinks?: boolean;\n\n  /**\n   * The base directory from which watch `paths` are to be derived. Paths emitted with events will\n   * be relative to this.\n   */\n  cwd?: string;\n\n  /**\n   *  If set to true then the strings passed to .watch() and .add() are treated as literal path\n   *  names, even if they look like globs. Default: false.\n   */\n  disableGlobbing?: boolean;\n\n  /**\n   * Whether to use fs.watchFile (backed by polling), or fs.watch. If polling leads to high CPU\n   * utilization, consider setting this to `false`. It is typically necessary to **set this to\n   * `true` to successfully watch files over a network**, and it may be necessary to successfully\n   * watch files in other non-standard situations. Setting to `true` explicitly on OS X overrides\n   * the `useFsEvents` default.\n   */\n  usePolling?: boolean;\n\n  /**\n   * Whether to use the `fsevents` watching interface if available. When set to `true` explicitly\n   * and `fsevents` is available this supercedes the `usePolling` setting. When set to `false` on\n   * OS X, `usePolling: true` becomes the default.\n   */\n  useFsEvents?: boolean;\n\n  /**\n   * If relying upon the [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats) object that\n   * may get passed with `add`, `addDir`, and `change` events, set this to `true` to ensure it is\n   * provided even in cases where it wasn't already available from the underlying watch events.\n   */\n  alwaysStat?: boolean;\n\n  /**\n   * If set, limits how many levels of subdirectories will be traversed.\n   */\n  depth?: number;\n\n  /**\n   * Interval of file system polling.\n   */\n  interval?: number;\n\n  /**\n   * Interval of file system polling for binary files. ([see list of binary extensions](https://gi\n   * thub.com/sindresorhus/binary-extensions/blob/master/binary-extensions.json))\n   */\n  binaryInterval?: number;\n\n  /**\n   *  Indicates whether to watch files that don't have read permissions if possible. If watching\n   *  fails due to `EPERM` or `EACCES` with this set to `true`, the errors will be suppressed\n   *  silently.\n   */\n  ignorePermissionErrors?: boolean;\n\n  /**\n   * `true` if `useFsEvents` and `usePolling` are `false`). Automatically filters out artifacts\n   * that occur when using editors that use \"atomic writes\" instead of writing directly to the\n   * source file. If a file is re-added within 100 ms of being deleted, Chokidar emits a `change`\n   * event rather than `unlink` then `add`. If the default of 100 ms does not work well for you,\n   * you can override it by setting `atomic` to a custom value, in milliseconds.\n   */\n  atomic?: boolean | number;\n\n  /**\n   * can be set to an object in order to adjust timing params:\n   */\n  awaitWriteFinish?: AwaitWriteFinishOptions | boolean;\n}\n\nexport interface AwaitWriteFinishOptions {\n  /**\n   * Amount of time in milliseconds for a file size to remain constant before emitting its event.\n   */\n  stabilityThreshold?: number;\n\n  /**\n   * File size polling interval.\n   */\n  pollInterval?: number;\n}\n\n/**\n * produces an instance of `FSWatcher`.\n */\nexport function watch(\n  paths: string | ReadonlyArray<string>,\n  options?: WatchOptions\n): FSWatcher;\n"]},"metadata":{},"sourceType":"module"}