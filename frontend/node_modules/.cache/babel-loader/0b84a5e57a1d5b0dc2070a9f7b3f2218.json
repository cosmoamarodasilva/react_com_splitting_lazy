{"ast":null,"code":"'use strict';\n\nconst {\n  htmlEscape\n} = require('escape-goat');\n\nmodule.exports = (template, data) => {\n  if (typeof template !== 'string') {\n    throw new TypeError(`Expected a \\`string\\` in the first argument, got \\`${typeof template}\\``);\n  }\n\n  if (typeof data !== 'object') {\n    throw new TypeError(`Expected an \\`object\\` or \\`Array\\` in the second argument, got \\`${typeof data}\\``);\n  } // The regex tries to match either a number inside `{{ }}` or a valid JS identifier or key path.\n\n\n  const doubleBraceRegex = /{{(\\d+|[a-z$_][a-z\\d$_]*?(?:\\.[a-z\\d$_]*?)*?)}}/gi;\n\n  if (doubleBraceRegex.test(template)) {\n    template = template.replace(doubleBraceRegex, (_, key) => {\n      let result = data;\n\n      for (const property of key.split('.')) {\n        result = result ? result[property] : '';\n      }\n\n      return htmlEscape(String(result));\n    });\n  }\n\n  const braceRegex = /{(\\d+|[a-z$_][a-z\\d$_]*?(?:\\.[a-z\\d$_]*?)*?)}/gi;\n  return template.replace(braceRegex, (_, key) => {\n    let result = data;\n\n    for (const property of key.split('.')) {\n      result = result ? result[property] : '';\n    }\n\n    return String(result);\n  });\n};","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/pupa/index.js"],"names":["htmlEscape","require","module","exports","template","data","TypeError","doubleBraceRegex","test","replace","_","key","result","property","split","String","braceRegex"],"mappings":"AAAA;;AACA,MAAM;AAACA,EAAAA;AAAD,IAAeC,OAAO,CAAC,aAAD,CAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AACpC,MAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AACjC,UAAM,IAAIE,SAAJ,CAAe,sDAAqD,OAAOF,QAAS,IAApF,CAAN;AACA;;AAED,MAAI,OAAOC,IAAP,KAAgB,QAApB,EAA8B;AAC7B,UAAM,IAAIC,SAAJ,CAAe,qEAAoE,OAAOD,IAAK,IAA/F,CAAN;AACA,GAPmC,CASpC;;;AACA,QAAME,gBAAgB,GAAG,mDAAzB;;AAEA,MAAIA,gBAAgB,CAACC,IAAjB,CAAsBJ,QAAtB,CAAJ,EAAqC;AACpCA,IAAAA,QAAQ,GAAGA,QAAQ,CAACK,OAAT,CAAiBF,gBAAjB,EAAmC,CAACG,CAAD,EAAIC,GAAJ,KAAY;AACzD,UAAIC,MAAM,GAAGP,IAAb;;AAEA,WAAK,MAAMQ,QAAX,IAAuBF,GAAG,CAACG,KAAJ,CAAU,GAAV,CAAvB,EAAuC;AACtCF,QAAAA,MAAM,GAAGA,MAAM,GAAGA,MAAM,CAACC,QAAD,CAAT,GAAsB,EAArC;AACA;;AAED,aAAOb,UAAU,CAACe,MAAM,CAACH,MAAD,CAAP,CAAjB;AACA,KARU,CAAX;AASA;;AAED,QAAMI,UAAU,GAAG,iDAAnB;AAEA,SAAOZ,QAAQ,CAACK,OAAT,CAAiBO,UAAjB,EAA6B,CAACN,CAAD,EAAIC,GAAJ,KAAY;AAC/C,QAAIC,MAAM,GAAGP,IAAb;;AAEA,SAAK,MAAMQ,QAAX,IAAuBF,GAAG,CAACG,KAAJ,CAAU,GAAV,CAAvB,EAAuC;AACtCF,MAAAA,MAAM,GAAGA,MAAM,GAAGA,MAAM,CAACC,QAAD,CAAT,GAAsB,EAArC;AACA;;AAED,WAAOE,MAAM,CAACH,MAAD,CAAb;AACA,GARM,CAAP;AASA,CAnCD","sourcesContent":["'use strict';\nconst {htmlEscape} = require('escape-goat');\n\nmodule.exports = (template, data) => {\n\tif (typeof template !== 'string') {\n\t\tthrow new TypeError(`Expected a \\`string\\` in the first argument, got \\`${typeof template}\\``);\n\t}\n\n\tif (typeof data !== 'object') {\n\t\tthrow new TypeError(`Expected an \\`object\\` or \\`Array\\` in the second argument, got \\`${typeof data}\\``);\n\t}\n\n\t// The regex tries to match either a number inside `{{ }}` or a valid JS identifier or key path.\n\tconst doubleBraceRegex = /{{(\\d+|[a-z$_][a-z\\d$_]*?(?:\\.[a-z\\d$_]*?)*?)}}/gi;\n\n\tif (doubleBraceRegex.test(template)) {\n\t\ttemplate = template.replace(doubleBraceRegex, (_, key) => {\n\t\t\tlet result = data;\n\n\t\t\tfor (const property of key.split('.')) {\n\t\t\t\tresult = result ? result[property] : '';\n\t\t\t}\n\n\t\t\treturn htmlEscape(String(result));\n\t\t});\n\t}\n\n\tconst braceRegex = /{(\\d+|[a-z$_][a-z\\d$_]*?(?:\\.[a-z\\d$_]*?)*?)}/gi;\n\n\treturn template.replace(braceRegex, (_, key) => {\n\t\tlet result = data;\n\n\t\tfor (const property of key.split('.')) {\n\t\t\tresult = result ? result[property] : '';\n\t\t}\n\n\t\treturn String(result);\n\t});\n};\n"]},"metadata":{},"sourceType":"module"}