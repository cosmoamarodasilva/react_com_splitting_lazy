{"ast":null,"code":"const tap = require('tap');\n\nconst test = tap.test;\n\nconst readFile = require('fs').readFileSync;\n\nconst spawn = require('child_process').spawn;\n\nconst pstree = require('../');\n\nconst {\n  tree,\n  pidsForTree,\n  getStat\n} = require('../lib/utils');\n\nif (process.platform !== 'darwin') {\n  test('reads from /proc', async t => {\n    const ps = await getStat();\n    t.ok(ps.split('\\n').length > 1);\n  });\n}\n\ntest('tree for live env', async t => {\n  const pid = 4079;\n  const fixture = readFile(__dirname + '/fixtures/out2', 'utf8');\n  const ps = await tree(fixture);\n  t.deepEqual(pidsForTree(ps, pid).map(_ => _.PID), ['4080']);\n});\n\nfunction testTree(t, runCallCount) {\n  const sub = spawn('node', [`${__dirname}/fixtures/index.js`, runCallCount], {\n    stdio: 'pipe'\n  });\n  setTimeout(() => {\n    const pid = sub.pid;\n    pstree(pid, (error, pids) => {\n      pids.concat([pid]).forEach(p => {\n        spawn('kill', ['-s', 'SIGTERM', p]);\n      }); // the fixture launches `sh` which launches node which is why we\n      // are looking for two processes.\n      // Important: IDKW but MacOS seems to skip the `sh` process. no idea.\n\n      t.equal(pids.length, runCallCount * 2);\n      t.end();\n    });\n  }, 1000);\n}\n\ntest('can read full process tree', t => {\n  testTree(t, 1);\n});\ntest('can read full process tree with multiple processes', t => {\n  testTree(t, 2);\n});","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/pstree.remy/tests/index.test.js"],"names":["tap","require","test","readFile","readFileSync","spawn","pstree","tree","pidsForTree","getStat","process","platform","t","ps","ok","split","length","pid","fixture","__dirname","deepEqual","map","_","PID","testTree","runCallCount","sub","stdio","setTimeout","error","pids","concat","forEach","p","equal","end"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMC,IAAI,GAAGF,GAAG,CAACE,IAAjB;;AACA,MAAMC,QAAQ,GAAGF,OAAO,CAAC,IAAD,CAAP,CAAcG,YAA/B;;AACA,MAAMC,KAAK,GAAGJ,OAAO,CAAC,eAAD,CAAP,CAAyBI,KAAvC;;AACA,MAAMC,MAAM,GAAGL,OAAO,CAAC,KAAD,CAAtB;;AACA,MAAM;AAAEM,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqBC,EAAAA;AAArB,IAAiCR,OAAO,CAAC,cAAD,CAA9C;;AAEA,IAAIS,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmC;AACjCT,EAAAA,IAAI,CAAC,kBAAD,EAAqB,MAAOU,CAAP,IAAa;AACpC,UAAMC,EAAE,GAAG,MAAMJ,OAAO,EAAxB;AACAG,IAAAA,CAAC,CAACE,EAAF,CAAKD,EAAE,CAACE,KAAH,CAAS,IAAT,EAAeC,MAAf,GAAwB,CAA7B;AACD,GAHG,CAAJ;AAID;;AAEDd,IAAI,CAAC,mBAAD,EAAsB,MAAOU,CAAP,IAAa;AACrC,QAAMK,GAAG,GAAG,IAAZ;AACA,QAAMC,OAAO,GAAGf,QAAQ,CAACgB,SAAS,GAAG,gBAAb,EAA+B,MAA/B,CAAxB;AACA,QAAMN,EAAE,GAAG,MAAMN,IAAI,CAACW,OAAD,CAArB;AACAN,EAAAA,CAAC,CAACQ,SAAF,CACEZ,WAAW,CAACK,EAAD,EAAKI,GAAL,CAAX,CAAqBI,GAArB,CAA0BC,CAAD,IAAOA,CAAC,CAACC,GAAlC,CADF,EAEE,CAAC,MAAD,CAFF;AAID,CARG,CAAJ;;AAUA,SAASC,QAAT,CAAkBZ,CAAlB,EAAqBa,YAArB,EAAmC;AACjC,QAAMC,GAAG,GAAGrB,KAAK,CAAC,MAAD,EAAS,CAAE,GAAEc,SAAU,oBAAd,EAAmCM,YAAnC,CAAT,EAA2D;AAC1EE,IAAAA,KAAK,EAAE;AADmE,GAA3D,CAAjB;AAGAC,EAAAA,UAAU,CAAC,MAAM;AACf,UAAMX,GAAG,GAAGS,GAAG,CAACT,GAAhB;AAEAX,IAAAA,MAAM,CAACW,GAAD,EAAM,CAACY,KAAD,EAAQC,IAAR,KAAiB;AAC3BA,MAAAA,IAAI,CAACC,MAAL,CAAY,CAACd,GAAD,CAAZ,EAAmBe,OAAnB,CAA4BC,CAAD,IAAO;AAChC5B,QAAAA,KAAK,CAAC,MAAD,EAAS,CAAC,IAAD,EAAO,SAAP,EAAkB4B,CAAlB,CAAT,CAAL;AACD,OAFD,EAD2B,CAK3B;AACA;AACA;;AACArB,MAAAA,CAAC,CAACsB,KAAF,CAAQJ,IAAI,CAACd,MAAb,EAAqBS,YAAY,GAAG,CAApC;AACAb,MAAAA,CAAC,CAACuB,GAAF;AACD,KAVK,CAAN;AAWD,GAdS,EAcP,IAdO,CAAV;AAeD;;AAEDjC,IAAI,CAAC,4BAAD,EAAgCU,CAAD,IAAO;AACxCY,EAAAA,QAAQ,CAACZ,CAAD,EAAI,CAAJ,CAAR;AACD,CAFG,CAAJ;AAGAV,IAAI,CAAC,oDAAD,EAAwDU,CAAD,IAAO;AAChEY,EAAAA,QAAQ,CAACZ,CAAD,EAAI,CAAJ,CAAR;AACD,CAFG,CAAJ","sourcesContent":["const tap = require('tap');\nconst test = tap.test;\nconst readFile = require('fs').readFileSync;\nconst spawn = require('child_process').spawn;\nconst pstree = require('../');\nconst { tree, pidsForTree, getStat } = require('../lib/utils');\n\nif (process.platform !== 'darwin') {\n  test('reads from /proc', async (t) => {\n    const ps = await getStat();\n    t.ok(ps.split('\\n').length > 1);\n  });\n}\n\ntest('tree for live env', async (t) => {\n  const pid = 4079;\n  const fixture = readFile(__dirname + '/fixtures/out2', 'utf8');\n  const ps = await tree(fixture);\n  t.deepEqual(\n    pidsForTree(ps, pid).map((_) => _.PID),\n    ['4080']\n  );\n});\n\nfunction testTree(t, runCallCount) {\n  const sub = spawn('node', [`${__dirname}/fixtures/index.js`, runCallCount], {\n    stdio: 'pipe',\n  });\n  setTimeout(() => {\n    const pid = sub.pid;\n\n    pstree(pid, (error, pids) => {\n      pids.concat([pid]).forEach((p) => {\n        spawn('kill', ['-s', 'SIGTERM', p]);\n      });\n\n      // the fixture launches `sh` which launches node which is why we\n      // are looking for two processes.\n      // Important: IDKW but MacOS seems to skip the `sh` process. no idea.\n      t.equal(pids.length, runCallCount * 2);\n      t.end();\n    });\n  }, 1000);\n}\n\ntest('can read full process tree', (t) => {\n  testTree(t, 1);\n});\ntest('can read full process tree with multiple processes', (t) => {\n  testTree(t, 2);\n});\n"]},"metadata":{},"sourceType":"module"}