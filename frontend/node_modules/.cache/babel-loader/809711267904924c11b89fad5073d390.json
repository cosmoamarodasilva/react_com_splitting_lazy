{"ast":null,"code":"let fs = require('fs');\n\nlet path = require('path');\n\nlet proc = require('child_process');\n\nconst PROJECT_DIR = process.cwd();\nprocess.env.PROJECT_DIR = PROJECT_DIR;\nnamespace('doc', function () {\n  task('generate', ['doc:clobber'], function () {\n    var cmd = '../node-jsdoc-toolkit/app/run.js -n -r=100 ' + '-t=../node-jsdoc-toolkit/templates/codeview -d=./doc/ ./lib';\n    jake.logger.log('Generating docs ...');\n    jake.exec([cmd], function () {\n      jake.logger.log('Done.');\n      complete();\n    });\n  }, {\n    async: true\n  });\n  task('clobber', function () {\n    var cmd = 'rm -fr ./doc/*';\n    jake.exec([cmd], function () {\n      jake.logger.log('Clobbered old docs.');\n      complete();\n    });\n  }, {\n    async: true\n  });\n});\ndesc('Generate docs for Jake');\ntask('doc', ['doc:generate']);\nnpmPublishTask('jake', function () {\n  this.packageFiles.include(['Makefile', 'jakefile.js', 'README.md', 'package.json', 'usage.txt', 'lib/**', 'bin/**', 'test/**']);\n  this.packageFiles.exclude(['test/tmp']);\n});\njake.Task['publish:package'].directory = PROJECT_DIR;\nnamespace('test', function () {\n  let integrationTest = task('integration', ['publish:package'], async function () {\n    let pkg = JSON.parse(fs.readFileSync(`${PROJECT_DIR}/package.json`).toString());\n    let version = pkg.version;\n    proc.execSync('rm -rf ./node_modules'); // Install from the actual package, run tests from the packaged binary\n\n    proc.execSync(`mkdir -p node_modules/.bin && mv ${PROJECT_DIR}/pkg/jake-v` + `${version} node_modules/jake && ln -s ${process.cwd()}` + '/node_modules/jake/bin/cli.js ./node_modules/.bin/jake');\n    let testArgs = [];\n\n    if (process.env.filter) {\n      testArgs.push(process.env.filter);\n    } else {\n      testArgs.push('*.js');\n    }\n\n    let spawned = proc.spawn(`${PROJECT_DIR}/node_modules/.bin/mocha`, testArgs, {\n      stdio: 'inherit'\n    });\n    return new Promise((resolve, reject) => {\n      spawned.on('exit', () => {\n        if (!(process.env.noclobber || process.env.noClobber)) {\n          proc.execSync('rm -rf tmp_publish && rm -rf package.json' + ' && rm -rf package-lock.json && rm -rf node_modules'); // Rather than invoking 'clobber' task\n\n          jake.rmRf(`${PROJECT_DIR}/pkg`);\n        }\n\n        resolve();\n      });\n    });\n  });\n  integrationTest.directory = `${PROJECT_DIR}/test/integration`;\n  let unitTest = task('unit', async function () {\n    let testArgs = [];\n\n    if (process.env.filter) {\n      testArgs.push(process.env.filter);\n    } else {\n      testArgs.push('*.js');\n    }\n\n    let spawned = proc.spawn(`${PROJECT_DIR}/node_modules/.bin/mocha`, testArgs, {\n      stdio: 'inherit'\n    });\n  });\n  unitTest.directory = `${PROJECT_DIR}/test/unit`;\n});\ndesc('Runs all tests');\ntask('test', ['test:unit', 'test:integration']);","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/jake/jakefile.js"],"names":["fs","require","path","proc","PROJECT_DIR","process","cwd","env","namespace","task","cmd","jake","logger","log","exec","complete","async","desc","npmPublishTask","packageFiles","include","exclude","Task","directory","integrationTest","pkg","JSON","parse","readFileSync","toString","version","execSync","testArgs","filter","push","spawned","spawn","stdio","Promise","resolve","reject","on","noclobber","noClobber","rmRf","unitTest"],"mappings":"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","sourcesContent":["let fs = require('fs')\nlet path = require('path');\nlet proc = require('child_process');\n\nconst PROJECT_DIR = process.cwd();\nprocess.env.PROJECT_DIR = PROJECT_DIR;\n\nnamespace('doc', function () {\n  task('generate', ['doc:clobber'], function () {\n    var cmd = '../node-jsdoc-toolkit/app/run.js -n -r=100 ' +\n        '-t=../node-jsdoc-toolkit/templates/codeview -d=./doc/ ./lib';\n    jake.logger.log('Generating docs ...');\n    jake.exec([cmd], function () {\n      jake.logger.log('Done.');\n      complete();\n    });\n  }, {async: true});\n\n  task('clobber', function () {\n    var cmd = 'rm -fr ./doc/*';\n    jake.exec([cmd], function () {\n      jake.logger.log('Clobbered old docs.');\n      complete();\n    });\n  }, {async: true});\n\n});\n\ndesc('Generate docs for Jake');\ntask('doc', ['doc:generate']);\n\nnpmPublishTask('jake', function () {\n  this.packageFiles.include([\n    'Makefile',\n    'jakefile.js',\n    'README.md',\n    'package.json',\n    'usage.txt',\n    'lib/**',\n    'bin/**',\n    'test/**'\n    ]);\n  this.packageFiles.exclude([\n    'test/tmp'\n  ]);\n});\n\njake.Task['publish:package'].directory = PROJECT_DIR;\n\nnamespace('test', function () {\n\n  let integrationTest = task('integration', ['publish:package'], async function () {\n    let pkg = JSON.parse(fs.readFileSync(`${PROJECT_DIR}/package.json`).toString());\n    let version = pkg.version;\n\n    proc.execSync('rm -rf ./node_modules');\n    // Install from the actual package, run tests from the packaged binary\n    proc.execSync(`mkdir -p node_modules/.bin && mv ${PROJECT_DIR}/pkg/jake-v` +\n        `${version} node_modules/jake && ln -s ${process.cwd()}` +\n      '/node_modules/jake/bin/cli.js ./node_modules/.bin/jake');\n\n    let testArgs = [];\n    if (process.env.filter) {\n      testArgs.push(process.env.filter);\n    }\n    else {\n      testArgs.push('*.js');\n    }\n    let spawned = proc.spawn(`${PROJECT_DIR}/node_modules/.bin/mocha`, testArgs, {\n      stdio: 'inherit'\n    });\n    return new Promise((resolve, reject) => {\n      spawned.on('exit', () => {\n        if (!(process.env.noclobber || process.env.noClobber)) {\n          proc.execSync('rm -rf tmp_publish && rm -rf package.json' +\n              ' && rm -rf package-lock.json && rm -rf node_modules');\n          // Rather than invoking 'clobber' task\n          jake.rmRf(`${PROJECT_DIR}/pkg`);\n        }\n        resolve();\n      });\n    });\n\n  });\n\n  integrationTest.directory = `${PROJECT_DIR}/test/integration`;\n\n  let unitTest = task('unit', async function () {\n    let testArgs = [];\n    if (process.env.filter) {\n      testArgs.push(process.env.filter);\n    }\n    else {\n      testArgs.push('*.js');\n    }\n    let spawned = proc.spawn(`${PROJECT_DIR}/node_modules/.bin/mocha`, testArgs, {\n      stdio: 'inherit'\n    });\n  });\n\n  unitTest.directory = `${PROJECT_DIR}/test/unit`;\n});\n\ndesc('Runs all tests');\ntask('test', ['test:unit', 'test:integration']);\n"]},"metadata":{},"sourceType":"module"}