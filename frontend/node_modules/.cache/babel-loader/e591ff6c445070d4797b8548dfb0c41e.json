{"ast":null,"code":"/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\nlet util = require('util'); // Native Node util module\n\n\nlet spawn = require('child_process').spawn;\n\nlet EventEmitter = require('events').EventEmitter;\n\nlet logger = require('./logger');\n\nlet file = require('./file');\n\nlet Exec;\n\nconst _UUID_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\nlet parseArgs = function (argumentsObj) {\n  let args;\n  let arg;\n  let cmds;\n  let callback;\n  let opts = {\n    interactive: false,\n    printStdout: false,\n    printStderr: false,\n    breakOnError: true\n  };\n  args = Array.prototype.slice.call(argumentsObj);\n  cmds = args.shift(); // Arrayize if passed a single string command\n\n  if (typeof cmds == 'string') {\n    cmds = [cmds];\n  } // Make a copy if it's an actual list\n  else {\n      cmds = cmds.slice();\n    } // Get optional callback or opts\n\n\n  while (arg = args.shift()) {\n    if (typeof arg == 'function') {\n      callback = arg;\n    } else if (typeof arg == 'object') {\n      opts = Object.assign(opts, arg);\n    }\n  } // Backward-compat shim\n\n\n  if (typeof opts.stdout != 'undefined') {\n    opts.printStdout = opts.stdout;\n    delete opts.stdout;\n  }\n\n  if (typeof opts.stderr != 'undefined') {\n    opts.printStderr = opts.stderr;\n    delete opts.stderr;\n  }\n\n  return {\n    cmds: cmds,\n    opts: opts,\n    callback: callback\n  };\n};\n/**\n  @name jake\n  @namespace jake\n*/\n\n\nlet utils = new function () {\n  /**\n    @name jake.exec\n    @static\n    @function\n    @description Executes shell-commands asynchronously with an optional\n    final callback.\n    `\n    @param {String[]} cmds The list of shell-commands to execute\n    @param {Object} [opts]\n      @param {Boolean} [opts.printStdout=false] Print stdout from each command\n      @param {Boolean} [opts.printStderr=false] Print stderr from each command\n      @param {Boolean} [opts.breakOnError=true] Stop further execution on\n      the first error.\n      @param {Boolean} [opts.windowsVerbatimArguments=false] Don't translate\n      arguments on Windows.\n    @param {Function} [callback] Callback to run after executing  the\n    commands\n     @example\n    let cmds = [\n          'echo \"showing directories\"'\n        , 'ls -al | grep ^d'\n        , 'echo \"moving up a directory\"'\n        , 'cd ../'\n        ]\n      , callback = function () {\n          console.log('Finished running commands.');\n        }\n    jake.exec(cmds, {stdout: true}, callback);\n   */\n  this.exec = function (a, b, c) {\n    let parsed = parseArgs(arguments);\n    let cmds = parsed.cmds;\n    let opts = parsed.opts;\n    let callback = parsed.callback;\n    let ex = new Exec(cmds, opts, callback);\n    ex.addListener('error', function (msg, code) {\n      if (opts.breakOnError) {\n        fail(msg, code);\n      }\n    });\n    ex.run();\n    return ex;\n  };\n\n  this.createExec = function (a, b, c) {\n    return new Exec(a, b, c);\n  }; // From Math.uuid.js, https://github.com/broofa/node-uuid\n  // Robert Kieffer (robert@broofa.com), MIT license\n\n\n  this.uuid = function (length, radix) {\n    var chars = _UUID_CHARS,\n        uuid = [],\n        r,\n        i;\n    radix = radix || chars.length;\n\n    if (length) {\n      // Compact form\n      i = -1;\n\n      while (++i < length) {\n        uuid[i] = chars[0 | Math.random() * radix];\n      }\n    } else {\n      // rfc4122, version 4 form\n      // rfc4122 requires these characters\n      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n      uuid[14] = '4'; // Fill in random data.  At i==19 set the high bits of clock sequence as\n      // per rfc4122, sec. 4.1.5\n\n      i = -1;\n\n      while (++i < 36) {\n        if (!uuid[i]) {\n          r = 0 | Math.random() * 16;\n          uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];\n        }\n      }\n    }\n\n    return uuid.join('');\n  };\n}();\n\nExec = function () {\n  let parsed = parseArgs(arguments);\n  let cmds = parsed.cmds;\n  let opts = parsed.opts;\n  let callback = parsed.callback;\n  this._cmds = cmds;\n  this._callback = callback;\n  this._config = opts;\n};\n\nutil.inherits(Exec, EventEmitter);\nObject.assign(Exec.prototype, new function () {\n  let _run = function () {\n    let self = this;\n    let sh;\n    let cmd;\n    let args;\n\n    let next = this._cmds.shift();\n\n    let config = this._config;\n    let errData = '';\n    let shStdio;\n\n    let handleStdoutData = function (data) {\n      self.emit('stdout', data);\n    };\n\n    let handleStderrData = function (data) {\n      let d = data.toString();\n      self.emit('stderr', data); // Accumulate the error-data so we can use it as the\n      // stack if the process exits with an error\n\n      errData += d;\n    }; // Keep running as long as there are commands in the array\n\n\n    if (next) {\n      let spawnOpts = {};\n      this.emit('cmdStart', next); // Ganking part of Node's child_process.exec to get cmdline args parsed\n\n      if (process.platform == 'win32') {\n        cmd = 'cmd';\n        args = ['/c', next];\n\n        if (config.windowsVerbatimArguments) {\n          spawnOpts.windowsVerbatimArguments = true;\n        }\n      } else {\n        cmd = '/bin/sh';\n        args = ['-c', next];\n      }\n\n      if (config.interactive) {\n        spawnOpts.stdio = 'inherit';\n        sh = spawn(cmd, args, spawnOpts);\n      } else {\n        shStdio = [process.stdin];\n\n        if (config.printStdout) {\n          shStdio.push(process.stdout);\n        } else {\n          shStdio.push('pipe');\n        }\n\n        if (config.printStderr) {\n          shStdio.push(process.stderr);\n        } else {\n          shStdio.push('pipe');\n        }\n\n        spawnOpts.stdio = shStdio;\n        sh = spawn(cmd, args, spawnOpts);\n\n        if (!config.printStdout) {\n          sh.stdout.addListener('data', handleStdoutData);\n        }\n\n        if (!config.printStderr) {\n          sh.stderr.addListener('data', handleStderrData);\n        }\n      } // Exit, handle err or run next\n\n\n      sh.on('exit', function (code) {\n        let msg;\n\n        if (code !== 0) {\n          msg = errData || 'Process exited with error.';\n          msg = msg.trim();\n          self.emit('error', msg, code);\n        }\n\n        if (code === 0 || !config.breakOnError) {\n          self.emit('cmdEnd', next);\n          setTimeout(function () {\n            _run.call(self);\n          }, 0);\n        }\n      });\n    } else {\n      self.emit('end');\n\n      if (typeof self._callback == 'function') {\n        self._callback();\n      }\n    }\n  };\n\n  this.append = function (cmd) {\n    this._cmds.push(cmd);\n  };\n\n  this.run = function () {\n    _run.call(this);\n  };\n}());\nutils.Exec = Exec;\nutils.file = file;\nutils.logger = logger;\nmodule.exports = utils;","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/jake/lib/utils/index.js"],"names":["util","require","spawn","EventEmitter","logger","file","Exec","_UUID_CHARS","split","parseArgs","argumentsObj","args","arg","cmds","callback","opts","interactive","printStdout","printStderr","breakOnError","Array","prototype","slice","call","shift","Object","assign","stdout","stderr","utils","exec","a","b","c","parsed","arguments","ex","addListener","msg","code","fail","run","createExec","uuid","length","radix","chars","r","i","Math","random","join","_cmds","_callback","_config","inherits","_run","self","sh","cmd","next","config","errData","shStdio","handleStdoutData","data","emit","handleStderrData","d","toString","spawnOpts","process","platform","windowsVerbatimArguments","stdio","stdin","push","on","trim","setTimeout","append","module","exports"],"mappings":"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","sourcesContent":["/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\n\nlet util = require('util'); // Native Node util module\nlet spawn = require('child_process').spawn;\nlet EventEmitter = require('events').EventEmitter;\nlet logger = require('./logger');\nlet file = require('./file');\nlet Exec;\n\nconst _UUID_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\nlet parseArgs = function (argumentsObj) {\n  let args;\n  let arg;\n  let cmds;\n  let callback;\n  let opts = {\n    interactive: false,\n    printStdout: false,\n    printStderr: false,\n    breakOnError: true\n  };\n\n  args = Array.prototype.slice.call(argumentsObj);\n\n  cmds = args.shift();\n  // Arrayize if passed a single string command\n  if (typeof cmds == 'string') {\n    cmds = [cmds];\n  }\n  // Make a copy if it's an actual list\n  else {\n    cmds = cmds.slice();\n  }\n\n  // Get optional callback or opts\n  while((arg = args.shift())) {\n    if (typeof arg == 'function') {\n      callback = arg;\n    }\n    else if (typeof arg == 'object') {\n      opts = Object.assign(opts, arg);\n    }\n  }\n\n  // Backward-compat shim\n  if (typeof opts.stdout != 'undefined') {\n    opts.printStdout = opts.stdout;\n    delete opts.stdout;\n  }\n  if (typeof opts.stderr != 'undefined') {\n    opts.printStderr = opts.stderr;\n    delete opts.stderr;\n  }\n\n  return {\n    cmds: cmds,\n    opts: opts,\n    callback: callback\n  };\n};\n\n/**\n  @name jake\n  @namespace jake\n*/\nlet utils = new (function () {\n  /**\n    @name jake.exec\n    @static\n    @function\n    @description Executes shell-commands asynchronously with an optional\n    final callback.\n    `\n    @param {String[]} cmds The list of shell-commands to execute\n    @param {Object} [opts]\n      @param {Boolean} [opts.printStdout=false] Print stdout from each command\n      @param {Boolean} [opts.printStderr=false] Print stderr from each command\n      @param {Boolean} [opts.breakOnError=true] Stop further execution on\n      the first error.\n      @param {Boolean} [opts.windowsVerbatimArguments=false] Don't translate\n      arguments on Windows.\n    @param {Function} [callback] Callback to run after executing  the\n    commands\n\n    @example\n    let cmds = [\n          'echo \"showing directories\"'\n        , 'ls -al | grep ^d'\n        , 'echo \"moving up a directory\"'\n        , 'cd ../'\n        ]\n      , callback = function () {\n          console.log('Finished running commands.');\n        }\n    jake.exec(cmds, {stdout: true}, callback);\n   */\n  this.exec = function (a, b, c) {\n    let parsed = parseArgs(arguments);\n    let cmds = parsed.cmds;\n    let opts = parsed.opts;\n    let callback = parsed.callback;\n\n    let ex = new Exec(cmds, opts, callback);\n\n    ex.addListener('error', function (msg, code) {\n      if (opts.breakOnError) {\n        fail(msg, code);\n      }\n    });\n    ex.run();\n\n    return ex;\n  };\n\n  this.createExec = function (a, b, c) {\n    return new Exec(a, b, c);\n  };\n\n  // From Math.uuid.js, https://github.com/broofa/node-uuid\n  // Robert Kieffer (robert@broofa.com), MIT license\n  this.uuid = function (length, radix) {\n    var chars = _UUID_CHARS\n      , uuid = []\n      , r\n      , i;\n\n    radix = radix || chars.length;\n\n    if (length) {\n      // Compact form\n      i = -1;\n      while (++i < length) {\n        uuid[i] = chars[0 | Math.random()*radix];\n      }\n    } else {\n      // rfc4122, version 4 form\n\n      // rfc4122 requires these characters\n      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n      uuid[14] = '4';\n\n      // Fill in random data.  At i==19 set the high bits of clock sequence as\n      // per rfc4122, sec. 4.1.5\n      i = -1;\n      while (++i < 36) {\n        if (!uuid[i]) {\n          r = 0 | Math.random()*16;\n          uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n        }\n      }\n    }\n\n    return uuid.join('');\n  };\n\n})();\n\nExec = function () {\n  let parsed = parseArgs(arguments);\n  let cmds = parsed.cmds;\n  let opts = parsed.opts;\n  let callback = parsed.callback;\n\n  this._cmds = cmds;\n  this._callback = callback;\n  this._config = opts;\n};\n\nutil.inherits(Exec, EventEmitter);\n\nObject.assign(Exec.prototype, new (function () {\n\n  let _run = function () {\n    let self = this;\n    let sh;\n    let cmd;\n    let args;\n    let next = this._cmds.shift();\n    let config = this._config;\n    let errData = '';\n    let shStdio;\n    let handleStdoutData = function (data) {\n      self.emit('stdout', data);\n    };\n    let handleStderrData = function (data) {\n      let d = data.toString();\n      self.emit('stderr', data);\n      // Accumulate the error-data so we can use it as the\n      // stack if the process exits with an error\n      errData += d;\n    };\n\n    // Keep running as long as there are commands in the array\n    if (next) {\n      let spawnOpts = {};\n      this.emit('cmdStart', next);\n\n      // Ganking part of Node's child_process.exec to get cmdline args parsed\n      if (process.platform == 'win32') {\n        cmd = 'cmd';\n        args = ['/c', next];\n        if (config.windowsVerbatimArguments) {\n          spawnOpts.windowsVerbatimArguments = true;\n        }\n      }\n      else {\n        cmd = '/bin/sh';\n        args = ['-c', next];\n      }\n\n      if (config.interactive) {\n        spawnOpts.stdio = 'inherit';\n        sh = spawn(cmd, args, spawnOpts);\n      }\n      else {\n        shStdio = [\n          process.stdin\n        ];\n        if (config.printStdout) {\n          shStdio.push(process.stdout);\n        }\n        else {\n          shStdio.push('pipe');\n        }\n        if (config.printStderr) {\n          shStdio.push(process.stderr);\n        }\n        else {\n          shStdio.push('pipe');\n        }\n        spawnOpts.stdio = shStdio;\n        sh = spawn(cmd, args, spawnOpts);\n        if (!config.printStdout) {\n          sh.stdout.addListener('data', handleStdoutData);\n        }\n        if (!config.printStderr) {\n          sh.stderr.addListener('data', handleStderrData);\n        }\n      }\n\n      // Exit, handle err or run next\n      sh.on('exit', function (code) {\n        let msg;\n        if (code !== 0) {\n          msg = errData || 'Process exited with error.';\n          msg = msg.trim();\n          self.emit('error', msg, code);\n        }\n        if (code === 0 || !config.breakOnError) {\n          self.emit('cmdEnd', next);\n          setTimeout(function () { _run.call(self); }, 0);\n        }\n      });\n\n    }\n    else {\n      self.emit('end');\n      if (typeof self._callback == 'function') {\n        self._callback();\n      }\n    }\n  };\n\n  this.append = function (cmd) {\n    this._cmds.push(cmd);\n  };\n\n  this.run = function () {\n    _run.call(this);\n  };\n\n})());\n\nutils.Exec = Exec;\nutils.file = file;\nutils.logger = logger;\n\nmodule.exports = utils;\n\n"]},"metadata":{},"sourceType":"module"}