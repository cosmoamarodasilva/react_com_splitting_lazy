{"ast":null,"code":"/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\nconst PROJECT_DIR = process.env.PROJECT_DIR;\n\nlet parseargs = require(`${PROJECT_DIR}/lib/parseargs`);\n\nlet assert = require('assert');\n\nlet optsReg = [{\n  full: 'directory',\n  abbr: 'C',\n  preempts: false,\n  expectValue: true\n}, {\n  full: 'jakefile',\n  abbr: 'f',\n  preempts: false,\n  expectValue: true\n}, {\n  full: 'tasks',\n  abbr: 'T',\n  preempts: true\n}, {\n  full: 'tasks',\n  abbr: 'ls',\n  preempts: true\n}, {\n  full: 'trace',\n  abbr: 't',\n  preempts: false,\n  expectValue: false\n}, {\n  full: 'help',\n  abbr: 'h',\n  preempts: true\n}, {\n  full: 'version',\n  abbr: 'V',\n  preempts: true\n}];\nlet p = new parseargs.Parser(optsReg);\n\nlet z = function (s) {\n  return s.split(' ');\n};\n\nlet res;\nsuite('parseargs', function () {\n  test('long preemptive opt and val with equal-sign, ignore further opts', function () {\n    res = p.parse(z('--tasks=foo --jakefile=asdf'));\n    assert.equal('foo', res.opts.tasks);\n    assert.equal(undefined, res.opts.jakefile);\n  });\n  test('long preemptive opt and val without equal-sign, ignore further opts', function () {\n    res = p.parse(z('--tasks foo --jakefile=asdf'));\n    assert.equal('foo', res.opts.tasks);\n    assert.equal(undefined, res.opts.jakefile);\n  });\n  test('long preemptive opt and no val, ignore further opts', function () {\n    res = p.parse(z('--tasks --jakefile=asdf'));\n    assert.equal(true, res.opts.tasks);\n    assert.equal(undefined, res.opts.jakefile);\n  });\n  test('preemptive opt with no val, should be true', function () {\n    res = p.parse(z('-T'));\n    assert.equal(true, res.opts.tasks);\n  });\n  test('preemptive opt with no val, should be true and ignore further opts', function () {\n    res = p.parse(z('-T -f'));\n    assert.equal(true, res.opts.tasks);\n    assert.equal(undefined, res.opts.jakefile);\n  });\n  test('preemptive opt with val, should be val', function () {\n    res = p.parse(z('-T zoobie -f foo/bar/baz'));\n    assert.equal('zoobie', res.opts.tasks);\n    assert.equal(undefined, res.opts.jakefile);\n  });\n  test('-f expects a value, -t does not (howdy is task-name)', function () {\n    res = p.parse(z('-f zoobie -t howdy'));\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal(true, res.opts.trace);\n    assert.equal('howdy', res.taskNames[0]);\n  });\n  test('different order, -f expects a value, -t does not (howdy is task-name)', function () {\n    res = p.parse(z('-f zoobie howdy -t'));\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal(true, res.opts.trace);\n    assert.equal('howdy', res.taskNames[0]);\n  });\n  test('-f expects a value, -t does not (foo=bar is env var)', function () {\n    res = p.parse(z('-f zoobie -t foo=bar'));\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal(true, res.opts.trace);\n    assert.equal('bar', res.envVars.foo);\n    assert.equal(undefined, res.taskNames[0]);\n  });\n  test('-f expects a value, -t does not (foo=bar is env-var, task-name follows)', function () {\n    res = p.parse(z('-f zoobie -t howdy foo=bar'));\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal(true, res.opts.trace);\n    assert.equal('bar', res.envVars.foo);\n    assert.equal('howdy', res.taskNames[0]);\n  });\n  test('-t does not expect a value, -f does (howdy is task-name)', function () {\n    res = p.parse(z('-t howdy -f zoobie'));\n    assert.equal(true, res.opts.trace);\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal('howdy', res.taskNames[0]);\n  });\n  test('--trace does not expect a value, -f does (howdy is task-name)', function () {\n    res = p.parse(z('--trace howdy --jakefile zoobie'));\n    assert.equal(true, res.opts.trace);\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal('howdy', res.taskNames[0]);\n  });\n  test('--trace does not expect a value (equal), -f does (throw howdy away)', function () {\n    res = p.parse(z('--trace=howdy --jakefile=zoobie'));\n    assert.equal(true, res.opts.trace);\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal(undefined, res.taskNames[0]);\n  });\n  /*\n  , test('task-name with positional args', function () {\n    res = p.parse(z('foo:bar[asdf,qwer]'));\n    assert.equal('asdf', p.taskArgs[0]);\n    assert.equal('qwer', p.taskArgs[1]);\n  }\n  , test('opts, env vars, task-name with positional args', function () {\n    res = p.parse(z('-f ./tests/Jakefile -t default[asdf,qwer] foo=bar'));\n    assert.equal('./tests/Jakefile', res.opts.jakefile);\n    assert.equal(true, res.opts.trace);\n    assert.equal('bar', res.envVars.foo);\n    assert.equal('default', res.taskName);\n    assert.equal('asdf', p.taskArgs[0]);\n    assert.equal('qwer', p.taskArgs[1]);\n  }\n  */\n});","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/jake/test/unit/parseargs.js"],"names":["PROJECT_DIR","process","env","parseargs","require","assert","optsReg","full","abbr","preempts","expectValue","p","Parser","z","s","split","res","suite","test","parse","equal","opts","tasks","undefined","jakefile","trace","taskNames","envVars","foo"],"mappings":"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","sourcesContent":["/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\nconst PROJECT_DIR = process.env.PROJECT_DIR;\n\nlet parseargs = require(`${PROJECT_DIR}/lib/parseargs`);\nlet assert = require('assert');\nlet optsReg = [\n  { full: 'directory',\n    abbr: 'C',\n    preempts: false,\n    expectValue: true\n  },\n  { full: 'jakefile',\n    abbr: 'f',\n    preempts: false,\n    expectValue: true\n  },\n  { full: 'tasks',\n    abbr: 'T',\n    preempts: true\n  },\n  { full: 'tasks',\n    abbr: 'ls',\n    preempts: true\n  },\n  { full: 'trace',\n    abbr: 't',\n    preempts: false,\n    expectValue: false\n  },\n  { full: 'help',\n    abbr: 'h',\n    preempts: true\n  },\n  { full: 'version',\n    abbr: 'V',\n    preempts: true\n  }\n];\nlet p = new parseargs.Parser(optsReg);\nlet z = function (s) { return s.split(' '); };\nlet res;\n\nsuite('parseargs', function () {\n\n  test('long preemptive opt and val with equal-sign, ignore further opts', function () {\n    res = p.parse(z('--tasks=foo --jakefile=asdf'));\n    assert.equal('foo', res.opts.tasks);\n    assert.equal(undefined, res.opts.jakefile);\n  });\n\n  test('long preemptive opt and val without equal-sign, ignore further opts', function () {\n    res = p.parse(z('--tasks foo --jakefile=asdf'));\n    assert.equal('foo', res.opts.tasks);\n    assert.equal(undefined, res.opts.jakefile);\n  });\n\n  test('long preemptive opt and no val, ignore further opts', function () {\n    res = p.parse(z('--tasks --jakefile=asdf'));\n    assert.equal(true, res.opts.tasks);\n    assert.equal(undefined, res.opts.jakefile);\n  });\n\n  test('preemptive opt with no val, should be true', function () {\n    res = p.parse(z('-T'));\n    assert.equal(true, res.opts.tasks);\n  });\n\n  test('preemptive opt with no val, should be true and ignore further opts', function () {\n    res = p.parse(z('-T -f'));\n    assert.equal(true, res.opts.tasks);\n    assert.equal(undefined, res.opts.jakefile);\n  });\n\n  test('preemptive opt with val, should be val', function () {\n    res = p.parse(z('-T zoobie -f foo/bar/baz'));\n    assert.equal('zoobie', res.opts.tasks);\n    assert.equal(undefined, res.opts.jakefile);\n  });\n\n  test('-f expects a value, -t does not (howdy is task-name)', function () {\n    res = p.parse(z('-f zoobie -t howdy'));\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal(true, res.opts.trace);\n    assert.equal('howdy', res.taskNames[0]);\n  });\n\n  test('different order, -f expects a value, -t does not (howdy is task-name)', function () {\n    res = p.parse(z('-f zoobie howdy -t'));\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal(true, res.opts.trace);\n    assert.equal('howdy', res.taskNames[0]);\n  });\n\n  test('-f expects a value, -t does not (foo=bar is env var)', function () {\n    res = p.parse(z('-f zoobie -t foo=bar'));\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal(true, res.opts.trace);\n    assert.equal('bar', res.envVars.foo);\n    assert.equal(undefined, res.taskNames[0]);\n  });\n\n  test('-f expects a value, -t does not (foo=bar is env-var, task-name follows)', function () {\n    res = p.parse(z('-f zoobie -t howdy foo=bar'));\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal(true, res.opts.trace);\n    assert.equal('bar', res.envVars.foo);\n    assert.equal('howdy', res.taskNames[0]);\n  });\n\n  test('-t does not expect a value, -f does (howdy is task-name)', function () {\n    res = p.parse(z('-t howdy -f zoobie'));\n    assert.equal(true, res.opts.trace);\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal('howdy', res.taskNames[0]);\n  });\n\n  test('--trace does not expect a value, -f does (howdy is task-name)', function () {\n    res = p.parse(z('--trace howdy --jakefile zoobie'));\n    assert.equal(true, res.opts.trace);\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal('howdy', res.taskNames[0]);\n  });\n\n  test('--trace does not expect a value (equal), -f does (throw howdy away)', function () {\n    res = p.parse(z('--trace=howdy --jakefile=zoobie'));\n    assert.equal(true, res.opts.trace);\n    assert.equal('zoobie', res.opts.jakefile);\n    assert.equal(undefined, res.taskNames[0]);\n  });\n\n  /*\n, test('task-name with positional args', function () {\n    res = p.parse(z('foo:bar[asdf,qwer]'));\n    assert.equal('asdf', p.taskArgs[0]);\n    assert.equal('qwer', p.taskArgs[1]);\n  }\n\n, test('opts, env vars, task-name with positional args', function () {\n    res = p.parse(z('-f ./tests/Jakefile -t default[asdf,qwer] foo=bar'));\n    assert.equal('./tests/Jakefile', res.opts.jakefile);\n    assert.equal(true, res.opts.trace);\n    assert.equal('bar', res.envVars.foo);\n    assert.equal('default', res.taskName);\n    assert.equal('asdf', p.taskArgs[0]);\n    assert.equal('qwer', p.taskArgs[1]);\n  }\n*/\n\n\n});\n\n\n"]},"metadata":{},"sourceType":"module"}