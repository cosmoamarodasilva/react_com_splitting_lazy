{"ast":null,"code":"'use strict';\n\nconst stringWidth = require('string-width');\n\nfunction ansiAlign(text, opts) {\n  if (!text) return text;\n  opts = opts || {};\n  const align = opts.align || 'center'; // short-circuit `align: 'left'` as no-op\n\n  if (align === 'left') return text;\n  const split = opts.split || '\\n';\n  const pad = opts.pad || ' ';\n  const widthDiffFn = align !== 'right' ? halfDiff : fullDiff;\n  let returnString = false;\n\n  if (!Array.isArray(text)) {\n    returnString = true;\n    text = String(text).split(split);\n  }\n\n  let width;\n  let maxWidth = 0;\n  text = text.map(function (str) {\n    str = String(str);\n    width = stringWidth(str);\n    maxWidth = Math.max(width, maxWidth);\n    return {\n      str,\n      width\n    };\n  }).map(function (obj) {\n    return new Array(widthDiffFn(maxWidth, obj.width) + 1).join(pad) + obj.str;\n  });\n  return returnString ? text.join(split) : text;\n}\n\nansiAlign.left = function left(text) {\n  return ansiAlign(text, {\n    align: 'left'\n  });\n};\n\nansiAlign.center = function center(text) {\n  return ansiAlign(text, {\n    align: 'center'\n  });\n};\n\nansiAlign.right = function right(text) {\n  return ansiAlign(text, {\n    align: 'right'\n  });\n};\n\nmodule.exports = ansiAlign;\n\nfunction halfDiff(maxWidth, curWidth) {\n  return Math.floor((maxWidth - curWidth) / 2);\n}\n\nfunction fullDiff(maxWidth, curWidth) {\n  return maxWidth - curWidth;\n}","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/ansi-align/index.js"],"names":["stringWidth","require","ansiAlign","text","opts","align","split","pad","widthDiffFn","halfDiff","fullDiff","returnString","Array","isArray","String","width","maxWidth","map","str","Math","max","obj","join","left","center","right","module","exports","curWidth","floor"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AAEA,SAASC,SAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;AAC9B,MAAI,CAACD,IAAL,EAAW,OAAOA,IAAP;AAEXC,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,QAAMC,KAAK,GAAGD,IAAI,CAACC,KAAL,IAAc,QAA5B,CAJ8B,CAM9B;;AACA,MAAIA,KAAK,KAAK,MAAd,EAAsB,OAAOF,IAAP;AAEtB,QAAMG,KAAK,GAAGF,IAAI,CAACE,KAAL,IAAc,IAA5B;AACA,QAAMC,GAAG,GAAGH,IAAI,CAACG,GAAL,IAAY,GAAxB;AACA,QAAMC,WAAW,GAAGH,KAAK,KAAK,OAAV,GAAoBI,QAApB,GAA+BC,QAAnD;AAEA,MAAIC,YAAY,GAAG,KAAnB;;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcV,IAAd,CAAL,EAA0B;AACxBQ,IAAAA,YAAY,GAAG,IAAf;AACAR,IAAAA,IAAI,GAAGW,MAAM,CAACX,IAAD,CAAN,CAAaG,KAAb,CAAmBA,KAAnB,CAAP;AACD;;AAED,MAAIS,KAAJ;AACA,MAAIC,QAAQ,GAAG,CAAf;AACAb,EAAAA,IAAI,GAAGA,IAAI,CAACc,GAAL,CAAS,UAAUC,GAAV,EAAe;AAC7BA,IAAAA,GAAG,GAAGJ,MAAM,CAACI,GAAD,CAAZ;AACAH,IAAAA,KAAK,GAAGf,WAAW,CAACkB,GAAD,CAAnB;AACAF,IAAAA,QAAQ,GAAGG,IAAI,CAACC,GAAL,CAASL,KAAT,EAAgBC,QAAhB,CAAX;AACA,WAAO;AACLE,MAAAA,GADK;AAELH,MAAAA;AAFK,KAAP;AAID,GARM,EAQJE,GARI,CAQA,UAAUI,GAAV,EAAe;AACpB,WAAO,IAAIT,KAAJ,CAAUJ,WAAW,CAACQ,QAAD,EAAWK,GAAG,CAACN,KAAf,CAAX,GAAmC,CAA7C,EAAgDO,IAAhD,CAAqDf,GAArD,IAA4Dc,GAAG,CAACH,GAAvE;AACD,GAVM,CAAP;AAYA,SAAOP,YAAY,GAAGR,IAAI,CAACmB,IAAL,CAAUhB,KAAV,CAAH,GAAsBH,IAAzC;AACD;;AAEDD,SAAS,CAACqB,IAAV,GAAiB,SAASA,IAAT,CAAepB,IAAf,EAAqB;AACpC,SAAOD,SAAS,CAACC,IAAD,EAAO;AAAEE,IAAAA,KAAK,EAAE;AAAT,GAAP,CAAhB;AACD,CAFD;;AAIAH,SAAS,CAACsB,MAAV,GAAmB,SAASA,MAAT,CAAiBrB,IAAjB,EAAuB;AACxC,SAAOD,SAAS,CAACC,IAAD,EAAO;AAAEE,IAAAA,KAAK,EAAE;AAAT,GAAP,CAAhB;AACD,CAFD;;AAIAH,SAAS,CAACuB,KAAV,GAAkB,SAASA,KAAT,CAAgBtB,IAAhB,EAAsB;AACtC,SAAOD,SAAS,CAACC,IAAD,EAAO;AAAEE,IAAAA,KAAK,EAAE;AAAT,GAAP,CAAhB;AACD,CAFD;;AAIAqB,MAAM,CAACC,OAAP,GAAiBzB,SAAjB;;AAEA,SAASO,QAAT,CAAmBO,QAAnB,EAA6BY,QAA7B,EAAuC;AACrC,SAAOT,IAAI,CAACU,KAAL,CAAW,CAACb,QAAQ,GAAGY,QAAZ,IAAwB,CAAnC,CAAP;AACD;;AAED,SAASlB,QAAT,CAAmBM,QAAnB,EAA6BY,QAA7B,EAAuC;AACrC,SAAOZ,QAAQ,GAAGY,QAAlB;AACD","sourcesContent":["'use strict'\n\nconst stringWidth = require('string-width')\n\nfunction ansiAlign (text, opts) {\n  if (!text) return text\n\n  opts = opts || {}\n  const align = opts.align || 'center'\n\n  // short-circuit `align: 'left'` as no-op\n  if (align === 'left') return text\n\n  const split = opts.split || '\\n'\n  const pad = opts.pad || ' '\n  const widthDiffFn = align !== 'right' ? halfDiff : fullDiff\n\n  let returnString = false\n  if (!Array.isArray(text)) {\n    returnString = true\n    text = String(text).split(split)\n  }\n\n  let width\n  let maxWidth = 0\n  text = text.map(function (str) {\n    str = String(str)\n    width = stringWidth(str)\n    maxWidth = Math.max(width, maxWidth)\n    return {\n      str,\n      width\n    }\n  }).map(function (obj) {\n    return new Array(widthDiffFn(maxWidth, obj.width) + 1).join(pad) + obj.str\n  })\n\n  return returnString ? text.join(split) : text\n}\n\nansiAlign.left = function left (text) {\n  return ansiAlign(text, { align: 'left' })\n}\n\nansiAlign.center = function center (text) {\n  return ansiAlign(text, { align: 'center' })\n}\n\nansiAlign.right = function right (text) {\n  return ansiAlign(text, { align: 'right' })\n}\n\nmodule.exports = ansiAlign\n\nfunction halfDiff (maxWidth, curWidth) {\n  return Math.floor((maxWidth - curWidth) / 2)\n}\n\nfunction fullDiff (maxWidth, curWidth) {\n  return maxWidth - curWidth\n}\n"]},"metadata":{},"sourceType":"module"}