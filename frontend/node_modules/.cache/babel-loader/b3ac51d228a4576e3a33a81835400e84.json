{"ast":null,"code":"'use strict';\n\nconst {\n  URL\n} = require('url');\n\nconst {\n  Agent: HttpAgent\n} = require('http');\n\nconst {\n  Agent: HttpsAgent\n} = require('https');\n\nconst got = require('got');\n\nconst registryUrl = require('registry-url');\n\nconst registryAuthToken = require('registry-auth-token');\n\nconst semver = require('semver'); // These agent options are chosen to match the npm client defaults and help with performance\n// See: `npm config get maxsockets` and #50\n\n\nconst agentOptions = {\n  keepAlive: true,\n  maxSockets: 50\n};\nconst httpAgent = new HttpAgent(agentOptions);\nconst httpsAgent = new HttpsAgent(agentOptions);\n\nclass PackageNotFoundError extends Error {\n  constructor(packageName) {\n    super(`Package \\`${packageName}\\` could not be found`);\n    this.name = 'PackageNotFoundError';\n  }\n\n}\n\nclass VersionNotFoundError extends Error {\n  constructor(packageName, version) {\n    super(`Version \\`${version}\\` for package \\`${packageName}\\` could not be found`);\n    this.name = 'VersionNotFoundError';\n  }\n\n}\n\nconst packageJson = async (packageName, options) => {\n  options = {\n    version: 'latest',\n    ...options\n  };\n  const scope = packageName.split('/')[0];\n  const registryUrl_ = options.registryUrl || registryUrl(scope);\n  const packageUrl = new URL(encodeURIComponent(packageName).replace(/^%40/, '@'), registryUrl_);\n  const authInfo = registryAuthToken(registryUrl_.toString(), {\n    recursive: true\n  });\n  const headers = {\n    accept: 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*'\n  };\n\n  if (options.fullMetadata) {\n    delete headers.accept;\n  }\n\n  if (authInfo) {\n    headers.authorization = `${authInfo.type} ${authInfo.token}`;\n  }\n\n  const gotOptions = {\n    json: true,\n    headers,\n    agent: {\n      http: httpAgent,\n      https: httpsAgent\n    }\n  };\n\n  if (options.agent) {\n    gotOptions.agent = options.agent;\n  }\n\n  let response;\n\n  try {\n    response = await got(packageUrl, gotOptions);\n  } catch (error) {\n    if (error.statusCode === 404) {\n      throw new PackageNotFoundError(packageName);\n    }\n\n    throw error;\n  }\n\n  let data = response.body;\n\n  if (options.allVersions) {\n    return data;\n  }\n\n  let {\n    version\n  } = options;\n  const versionError = new VersionNotFoundError(packageName, version);\n\n  if (data['dist-tags'][version]) {\n    data = data.versions[data['dist-tags'][version]];\n  } else if (version) {\n    if (!data.versions[version]) {\n      const versions = Object.keys(data.versions);\n      version = semver.maxSatisfying(versions, version);\n\n      if (!version) {\n        throw versionError;\n      }\n    }\n\n    data = data.versions[version];\n\n    if (!data) {\n      throw versionError;\n    }\n  }\n\n  return data;\n};\n\nmodule.exports = packageJson; // TODO: remove this in the next major version\n\nmodule.exports.default = packageJson;\nmodule.exports.PackageNotFoundError = PackageNotFoundError;\nmodule.exports.VersionNotFoundError = VersionNotFoundError;","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/package-json/index.js"],"names":["URL","require","Agent","HttpAgent","HttpsAgent","got","registryUrl","registryAuthToken","semver","agentOptions","keepAlive","maxSockets","httpAgent","httpsAgent","PackageNotFoundError","Error","constructor","packageName","name","VersionNotFoundError","version","packageJson","options","scope","split","registryUrl_","packageUrl","encodeURIComponent","replace","authInfo","toString","recursive","headers","accept","fullMetadata","authorization","type","token","gotOptions","json","agent","http","https","response","error","statusCode","data","body","allVersions","versionError","versions","Object","keys","maxSatisfying","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\nconst {URL} = require('url');\nconst {Agent: HttpAgent} = require('http');\nconst {Agent: HttpsAgent} = require('https');\nconst got = require('got');\nconst registryUrl = require('registry-url');\nconst registryAuthToken = require('registry-auth-token');\nconst semver = require('semver');\n\n// These agent options are chosen to match the npm client defaults and help with performance\n// See: `npm config get maxsockets` and #50\nconst agentOptions = {\n\tkeepAlive: true,\n\tmaxSockets: 50\n};\nconst httpAgent = new HttpAgent(agentOptions);\nconst httpsAgent = new HttpsAgent(agentOptions);\n\nclass PackageNotFoundError extends Error {\n\tconstructor(packageName) {\n\t\tsuper(`Package \\`${packageName}\\` could not be found`);\n\t\tthis.name = 'PackageNotFoundError';\n\t}\n}\n\nclass VersionNotFoundError extends Error {\n\tconstructor(packageName, version) {\n\t\tsuper(`Version \\`${version}\\` for package \\`${packageName}\\` could not be found`);\n\t\tthis.name = 'VersionNotFoundError';\n\t}\n}\n\nconst packageJson = async (packageName, options) => {\n\toptions = {\n\t\tversion: 'latest',\n\t\t...options\n\t};\n\n\tconst scope = packageName.split('/')[0];\n\tconst registryUrl_ = options.registryUrl || registryUrl(scope);\n\tconst packageUrl = new URL(encodeURIComponent(packageName).replace(/^%40/, '@'), registryUrl_);\n\tconst authInfo = registryAuthToken(registryUrl_.toString(), {recursive: true});\n\n\tconst headers = {\n\t\taccept: 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*'\n\t};\n\n\tif (options.fullMetadata) {\n\t\tdelete headers.accept;\n\t}\n\n\tif (authInfo) {\n\t\theaders.authorization = `${authInfo.type} ${authInfo.token}`;\n\t}\n\n\tconst gotOptions = {\n\t\tjson: true,\n\t\theaders,\n\t\tagent: {\n\t\t\thttp: httpAgent,\n\t\t\thttps: httpsAgent\n\t\t}\n\t};\n\n\tif (options.agent) {\n\t\tgotOptions.agent = options.agent;\n\t}\n\n\tlet response;\n\ttry {\n\t\tresponse = await got(packageUrl, gotOptions);\n\t} catch (error) {\n\t\tif (error.statusCode === 404) {\n\t\t\tthrow new PackageNotFoundError(packageName);\n\t\t}\n\n\t\tthrow error;\n\t}\n\n\tlet data = response.body;\n\n\tif (options.allVersions) {\n\t\treturn data;\n\t}\n\n\tlet {version} = options;\n\tconst versionError = new VersionNotFoundError(packageName, version);\n\n\tif (data['dist-tags'][version]) {\n\t\tdata = data.versions[data['dist-tags'][version]];\n\t} else if (version) {\n\t\tif (!data.versions[version]) {\n\t\t\tconst versions = Object.keys(data.versions);\n\t\t\tversion = semver.maxSatisfying(versions, version);\n\n\t\t\tif (!version) {\n\t\t\t\tthrow versionError;\n\t\t\t}\n\t\t}\n\n\t\tdata = data.versions[version];\n\n\t\tif (!data) {\n\t\t\tthrow versionError;\n\t\t}\n\t}\n\n\treturn data;\n};\n\nmodule.exports = packageJson;\n// TODO: remove this in the next major version\nmodule.exports.default = packageJson;\nmodule.exports.PackageNotFoundError = PackageNotFoundError;\nmodule.exports.VersionNotFoundError = VersionNotFoundError;\n"]},"metadata":{},"sourceType":"module"}