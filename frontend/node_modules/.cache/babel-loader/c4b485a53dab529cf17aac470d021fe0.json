{"ast":null,"code":"var url = require('url');\n\nvar base64 = require('./base64');\n\nvar decodeBase64 = base64.decodeBase64;\nvar encodeBase64 = base64.encodeBase64;\nvar tokenKey = ':_authToken';\nvar legacyTokenKey = ':_auth';\nvar userKey = ':username';\nvar passwordKey = ':_password';\n\nmodule.exports = function () {\n  var checkUrl;\n  var options;\n\n  if (arguments.length >= 2) {\n    checkUrl = arguments[0];\n    options = arguments[1];\n  } else if (typeof arguments[0] === 'string') {\n    checkUrl = arguments[0];\n  } else {\n    options = arguments[0];\n  }\n\n  options = options || {};\n  options.npmrc = options.npmrc || require('rc')('npm', {\n    registry: 'https://registry.npmjs.org/'\n  }, {\n    config: process.env.npm_config_userconfig || process.env.NPM_CONFIG_USERCONFIG\n  });\n  checkUrl = checkUrl || options.npmrc.registry;\n  return getRegistryAuthInfo(checkUrl, options) || getLegacyAuthInfo(options.npmrc);\n};\n\nfunction getRegistryAuthInfo(checkUrl, options) {\n  var parsed = url.parse(checkUrl, false, true);\n  var pathname;\n\n  while (pathname !== '/' && parsed.pathname !== pathname) {\n    pathname = parsed.pathname || '/';\n    var regUrl = '//' + parsed.host + pathname.replace(/\\/$/, '');\n    var authInfo = getAuthInfoForUrl(regUrl, options.npmrc);\n\n    if (authInfo) {\n      return authInfo;\n    } // break if not recursive\n\n\n    if (!options.recursive) {\n      return /\\/$/.test(checkUrl) ? undefined : getRegistryAuthInfo(url.resolve(checkUrl, '.'), options);\n    }\n\n    parsed.pathname = url.resolve(normalizePath(pathname), '..') || '/';\n  }\n\n  return undefined;\n}\n\nfunction getLegacyAuthInfo(npmrc) {\n  if (!npmrc._auth) {\n    return undefined;\n  }\n\n  var token = replaceEnvironmentVariable(npmrc._auth);\n  return {\n    token: token,\n    type: 'Basic'\n  };\n}\n\nfunction normalizePath(path) {\n  return path[path.length - 1] === '/' ? path : path + '/';\n}\n\nfunction getAuthInfoForUrl(regUrl, npmrc) {\n  // try to get bearer token\n  var bearerAuth = getBearerToken(npmrc[regUrl + tokenKey] || npmrc[regUrl + '/' + tokenKey]);\n\n  if (bearerAuth) {\n    return bearerAuth;\n  } // try to get basic token\n\n\n  var username = npmrc[regUrl + userKey] || npmrc[regUrl + '/' + userKey];\n  var password = npmrc[regUrl + passwordKey] || npmrc[regUrl + '/' + passwordKey];\n  var basicAuth = getTokenForUsernameAndPassword(username, password);\n\n  if (basicAuth) {\n    return basicAuth;\n  }\n\n  var basicAuthWithToken = getLegacyAuthToken(npmrc[regUrl + legacyTokenKey] || npmrc[regUrl + '/' + legacyTokenKey]);\n\n  if (basicAuthWithToken) {\n    return basicAuthWithToken;\n  }\n\n  return undefined;\n}\n\nfunction replaceEnvironmentVariable(token) {\n  return token.replace(/^\\$\\{?([^}]*)\\}?$/, function (fullMatch, envVar) {\n    return process.env[envVar];\n  });\n}\n\nfunction getBearerToken(tok) {\n  if (!tok) {\n    return undefined;\n  } // check if bearer token is set as environment variable\n\n\n  var token = replaceEnvironmentVariable(tok);\n  return {\n    token: token,\n    type: 'Bearer'\n  };\n}\n\nfunction getTokenForUsernameAndPassword(username, password) {\n  if (!username || !password) {\n    return undefined;\n  } // passwords are base64 encoded, so we need to decode it\n  // See https://github.com/npm/npm/blob/v3.10.6/lib/config/set-credentials-by-uri.js#L26\n\n\n  var pass = decodeBase64(replaceEnvironmentVariable(password)); // a basic auth token is base64 encoded 'username:password'\n  // See https://github.com/npm/npm/blob/v3.10.6/lib/config/get-credentials-by-uri.js#L70\n\n  var token = encodeBase64(username + ':' + pass); // we found a basicToken token so let's exit the loop\n\n  return {\n    token: token,\n    type: 'Basic',\n    password: pass,\n    username: username\n  };\n}\n\nfunction getLegacyAuthToken(tok) {\n  if (!tok) {\n    return undefined;\n  } // check if legacy auth token is set as environment variable\n\n\n  var token = replaceEnvironmentVariable(tok);\n  return {\n    token: token,\n    type: 'Basic'\n  };\n}","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/registry-auth-token/index.js"],"names":["url","require","base64","decodeBase64","encodeBase64","tokenKey","legacyTokenKey","userKey","passwordKey","module","exports","checkUrl","options","arguments","length","npmrc","registry","config","process","env","npm_config_userconfig","NPM_CONFIG_USERCONFIG","getRegistryAuthInfo","getLegacyAuthInfo","parsed","parse","pathname","regUrl","host","replace","authInfo","getAuthInfoForUrl","recursive","test","undefined","resolve","normalizePath","_auth","token","replaceEnvironmentVariable","type","path","bearerAuth","getBearerToken","username","password","basicAuth","getTokenForUsernameAndPassword","basicAuthWithToken","getLegacyAuthToken","fullMatch","envVar","tok","pass"],"mappings":"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","sourcesContent":["var url = require('url')\nvar base64 = require('./base64')\n\nvar decodeBase64 = base64.decodeBase64\nvar encodeBase64 = base64.encodeBase64\n\nvar tokenKey = ':_authToken'\nvar legacyTokenKey = ':_auth'\nvar userKey = ':username'\nvar passwordKey = ':_password'\n\nmodule.exports = function () {\n  var checkUrl\n  var options\n  if (arguments.length >= 2) {\n    checkUrl = arguments[0]\n    options = arguments[1]\n  } else if (typeof arguments[0] === 'string') {\n    checkUrl = arguments[0]\n  } else {\n    options = arguments[0]\n  }\n  options = options || {}\n  options.npmrc = options.npmrc || require('rc')('npm', { registry: 'https://registry.npmjs.org/' }, {\n    config: process.env.npm_config_userconfig || process.env.NPM_CONFIG_USERCONFIG\n  })\n  checkUrl = checkUrl || options.npmrc.registry\n  return getRegistryAuthInfo(checkUrl, options) || getLegacyAuthInfo(options.npmrc)\n}\n\nfunction getRegistryAuthInfo (checkUrl, options) {\n  var parsed = url.parse(checkUrl, false, true)\n  var pathname\n\n  while (pathname !== '/' && parsed.pathname !== pathname) {\n    pathname = parsed.pathname || '/'\n\n    var regUrl = '//' + parsed.host + pathname.replace(/\\/$/, '')\n    var authInfo = getAuthInfoForUrl(regUrl, options.npmrc)\n    if (authInfo) {\n      return authInfo\n    }\n\n    // break if not recursive\n    if (!options.recursive) {\n      return /\\/$/.test(checkUrl)\n        ? undefined\n        : getRegistryAuthInfo(url.resolve(checkUrl, '.'), options)\n    }\n\n    parsed.pathname = url.resolve(normalizePath(pathname), '..') || '/'\n  }\n\n  return undefined\n}\n\nfunction getLegacyAuthInfo (npmrc) {\n  if (!npmrc._auth) {\n    return undefined\n  }\n\n  var token = replaceEnvironmentVariable(npmrc._auth)\n\n  return { token: token, type: 'Basic' }\n}\n\nfunction normalizePath (path) {\n  return path[path.length - 1] === '/' ? path : path + '/'\n}\n\nfunction getAuthInfoForUrl (regUrl, npmrc) {\n  // try to get bearer token\n  var bearerAuth = getBearerToken(npmrc[regUrl + tokenKey] || npmrc[regUrl + '/' + tokenKey])\n  if (bearerAuth) {\n    return bearerAuth\n  }\n\n  // try to get basic token\n  var username = npmrc[regUrl + userKey] || npmrc[regUrl + '/' + userKey]\n  var password = npmrc[regUrl + passwordKey] || npmrc[regUrl + '/' + passwordKey]\n  var basicAuth = getTokenForUsernameAndPassword(username, password)\n  if (basicAuth) {\n    return basicAuth\n  }\n\n  var basicAuthWithToken = getLegacyAuthToken(npmrc[regUrl + legacyTokenKey] || npmrc[regUrl + '/' + legacyTokenKey])\n  if (basicAuthWithToken) {\n    return basicAuthWithToken\n  }\n\n  return undefined\n}\n\nfunction replaceEnvironmentVariable (token) {\n  return token.replace(/^\\$\\{?([^}]*)\\}?$/, function (fullMatch, envVar) {\n    return process.env[envVar]\n  })\n}\n\nfunction getBearerToken (tok) {\n  if (!tok) {\n    return undefined\n  }\n\n  // check if bearer token is set as environment variable\n  var token = replaceEnvironmentVariable(tok)\n\n  return { token: token, type: 'Bearer' }\n}\n\nfunction getTokenForUsernameAndPassword (username, password) {\n  if (!username || !password) {\n    return undefined\n  }\n\n  // passwords are base64 encoded, so we need to decode it\n  // See https://github.com/npm/npm/blob/v3.10.6/lib/config/set-credentials-by-uri.js#L26\n  var pass = decodeBase64(replaceEnvironmentVariable(password))\n\n  // a basic auth token is base64 encoded 'username:password'\n  // See https://github.com/npm/npm/blob/v3.10.6/lib/config/get-credentials-by-uri.js#L70\n  var token = encodeBase64(username + ':' + pass)\n\n  // we found a basicToken token so let's exit the loop\n  return {\n    token: token,\n    type: 'Basic',\n    password: pass,\n    username: username\n  }\n}\n\nfunction getLegacyAuthToken (tok) {\n  if (!tok) {\n    return undefined\n  }\n\n  // check if legacy auth token is set as environment variable\n  var token = replaceEnvironmentVariable(tok)\n\n  return { token: token, type: 'Basic' }\n}\n"]},"metadata":{},"sourceType":"module"}