{"ast":null,"code":"'use strict';\n\nconst {\n  spawn\n} = require('child_process');\n\nconst path = require('path');\n\nconst {\n  format\n} = require('util');\n\nconst importLazy = require('import-lazy')(require);\n\nconst configstore = importLazy('configstore');\nconst chalk = importLazy('chalk');\nconst semverDiff = importLazy('semver-diff');\nconst latestVersion = importLazy('latest-version');\nconst isNpm = importLazy('is-npm');\nconst isInstalledGlobally = importLazy('is-installed-globally');\nconst isYarnGlobal = importLazy('is-yarn-global');\nconst hasYarn = importLazy('has-yarn');\nconst boxen = importLazy('boxen');\nconst xdgBasedir = importLazy('xdg-basedir');\nconst isCi = importLazy('is-ci');\nconst pupa = importLazy('pupa');\nconst ONE_DAY = 1000 * 60 * 60 * 24;\n\nclass UpdateNotifier {\n  constructor(options = {}) {\n    this.options = options;\n    options.pkg = options.pkg || {};\n    options.distTag = options.distTag || 'latest'; // Reduce pkg to the essential keys. with fallback to deprecated options\n    // TODO: Remove deprecated options at some point far into the future\n\n    options.pkg = {\n      name: options.pkg.name || options.packageName,\n      version: options.pkg.version || options.packageVersion\n    };\n\n    if (!options.pkg.name || !options.pkg.version) {\n      throw new Error('pkg.name and pkg.version required');\n    }\n\n    this.packageName = options.pkg.name;\n    this.packageVersion = options.pkg.version;\n    this.updateCheckInterval = typeof options.updateCheckInterval === 'number' ? options.updateCheckInterval : ONE_DAY;\n    this.disabled = 'NO_UPDATE_NOTIFIER' in process.env || process.env.NODE_ENV === 'test' || process.argv.includes('--no-update-notifier') || isCi();\n    this.shouldNotifyInNpmScript = options.shouldNotifyInNpmScript;\n\n    if (!this.disabled) {\n      try {\n        const ConfigStore = configstore();\n        this.config = new ConfigStore(`update-notifier-${this.packageName}`, {\n          optOut: false,\n          // Init with the current time so the first check is only\n          // after the set interval, so not to bother users right away\n          lastUpdateCheck: Date.now()\n        });\n      } catch (_) {\n        // Expecting error code EACCES or EPERM\n        const message = chalk().yellow(format(' %s update check failed ', options.pkg.name)) + format('\\n Try running with %s or get access ', chalk().cyan('sudo')) + '\\n to the local update config store via \\n' + chalk().cyan(format(' sudo chown -R $USER:$(id -gn $USER) %s ', xdgBasedir().config));\n        process.on('exit', () => {\n          console.error(boxen()(message, {\n            align: 'center'\n          }));\n        });\n      }\n    }\n  }\n\n  check() {\n    if (!this.config || this.config.get('optOut') || this.disabled) {\n      return;\n    }\n\n    this.update = this.config.get('update');\n\n    if (this.update) {\n      // Use the real latest version instead of the cached one\n      this.update.current = this.packageVersion; // Clear cached information\n\n      this.config.delete('update');\n    } // Only check for updates on a set interval\n\n\n    if (Date.now() - this.config.get('lastUpdateCheck') < this.updateCheckInterval) {\n      return;\n    } // Spawn a detached process, passing the options as an environment property\n\n\n    spawn(process.execPath, [path.join(__dirname, 'check.js'), JSON.stringify(this.options)], {\n      detached: true,\n      stdio: 'ignore'\n    }).unref();\n  }\n\n  async fetchInfo() {\n    const {\n      distTag\n    } = this.options;\n    const latest = await latestVersion()(this.packageName, {\n      version: distTag\n    });\n    return {\n      latest,\n      current: this.packageVersion,\n      type: semverDiff()(this.packageVersion, latest) || distTag,\n      name: this.packageName\n    };\n  }\n\n  notify(options) {\n    const suppressForNpm = !this.shouldNotifyInNpmScript && isNpm().isNpmOrYarn;\n\n    if (!process.stdout.isTTY || suppressForNpm || !this.update || this.update.current === this.update.latest) {\n      return this;\n    }\n\n    options = Object.assign({\n      isGlobal: isInstalledGlobally(),\n      isYarnGlobal: isYarnGlobal()()\n    }, options);\n    let installCommand;\n\n    if (options.isYarnGlobal) {\n      installCommand = `yarn global add ${this.packageName}`;\n    } else if (options.isGlobal) {\n      installCommand = `npm i -g ${this.packageName}`;\n    } else if (hasYarn()()) {\n      installCommand = `yarn add ${this.packageName}`;\n    } else {\n      installCommand = `npm i ${this.packageName}`;\n    }\n\n    const defaultTemplate = 'Update available ' + chalk().dim('{currentVersion}') + chalk().reset(' â†’ ') + chalk().green('{latestVersion}') + ' \\nRun ' + chalk().cyan('{updateCommand}') + ' to update';\n    const template = options.message || defaultTemplate;\n    options.boxenOptions = options.boxenOptions || {\n      padding: 1,\n      margin: 1,\n      align: 'center',\n      borderColor: 'yellow',\n      borderStyle: 'round'\n    };\n    const message = boxen()(pupa()(template, {\n      packageName: this.packageName,\n      currentVersion: this.update.current,\n      latestVersion: this.update.latest,\n      updateCommand: installCommand\n    }), options.boxenOptions);\n\n    if (options.defer === false) {\n      console.error(message);\n    } else {\n      process.on('exit', () => {\n        console.error(message);\n      });\n      process.on('SIGINT', () => {\n        console.error('');\n        process.exit();\n      });\n    }\n\n    return this;\n  }\n\n}\n\nmodule.exports = options => {\n  const updateNotifier = new UpdateNotifier(options);\n  updateNotifier.check();\n  return updateNotifier;\n};\n\nmodule.exports.UpdateNotifier = UpdateNotifier;","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/update-notifier/index.js"],"names":["spawn","require","path","format","importLazy","configstore","chalk","semverDiff","latestVersion","isNpm","isInstalledGlobally","isYarnGlobal","hasYarn","boxen","xdgBasedir","isCi","pupa","ONE_DAY","UpdateNotifier","constructor","options","pkg","distTag","name","packageName","version","packageVersion","Error","updateCheckInterval","disabled","process","env","NODE_ENV","argv","includes","shouldNotifyInNpmScript","ConfigStore","config","optOut","lastUpdateCheck","Date","now","_","message","yellow","cyan","on","console","error","align","check","get","update","current","delete","execPath","join","__dirname","JSON","stringify","detached","stdio","unref","fetchInfo","latest","type","notify","suppressForNpm","isNpmOrYarn","stdout","isTTY","Object","assign","isGlobal","installCommand","defaultTemplate","dim","reset","green","template","boxenOptions","padding","margin","borderColor","borderStyle","currentVersion","updateCommand","defer","exit","module","exports","updateNotifier"],"mappings":"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","sourcesContent":["'use strict';\nconst {spawn} = require('child_process');\nconst path = require('path');\nconst {format} = require('util');\nconst importLazy = require('import-lazy')(require);\n\nconst configstore = importLazy('configstore');\nconst chalk = importLazy('chalk');\nconst semverDiff = importLazy('semver-diff');\nconst latestVersion = importLazy('latest-version');\nconst isNpm = importLazy('is-npm');\nconst isInstalledGlobally = importLazy('is-installed-globally');\nconst isYarnGlobal = importLazy('is-yarn-global');\nconst hasYarn = importLazy('has-yarn');\nconst boxen = importLazy('boxen');\nconst xdgBasedir = importLazy('xdg-basedir');\nconst isCi = importLazy('is-ci');\nconst pupa = importLazy('pupa');\n\nconst ONE_DAY = 1000 * 60 * 60 * 24;\n\nclass UpdateNotifier {\n\tconstructor(options = {}) {\n\t\tthis.options = options;\n\t\toptions.pkg = options.pkg || {};\n\t\toptions.distTag = options.distTag || 'latest';\n\n\t\t// Reduce pkg to the essential keys. with fallback to deprecated options\n\t\t// TODO: Remove deprecated options at some point far into the future\n\t\toptions.pkg = {\n\t\t\tname: options.pkg.name || options.packageName,\n\t\t\tversion: options.pkg.version || options.packageVersion\n\t\t};\n\n\t\tif (!options.pkg.name || !options.pkg.version) {\n\t\t\tthrow new Error('pkg.name and pkg.version required');\n\t\t}\n\n\t\tthis.packageName = options.pkg.name;\n\t\tthis.packageVersion = options.pkg.version;\n\t\tthis.updateCheckInterval = typeof options.updateCheckInterval === 'number' ? options.updateCheckInterval : ONE_DAY;\n\t\tthis.disabled = 'NO_UPDATE_NOTIFIER' in process.env ||\n\t\t\tprocess.env.NODE_ENV === 'test' ||\n\t\t\tprocess.argv.includes('--no-update-notifier') ||\n\t\t\tisCi();\n\t\tthis.shouldNotifyInNpmScript = options.shouldNotifyInNpmScript;\n\n\t\tif (!this.disabled) {\n\t\t\ttry {\n\t\t\t\tconst ConfigStore = configstore();\n\t\t\t\tthis.config = new ConfigStore(`update-notifier-${this.packageName}`, {\n\t\t\t\t\toptOut: false,\n\t\t\t\t\t// Init with the current time so the first check is only\n\t\t\t\t\t// after the set interval, so not to bother users right away\n\t\t\t\t\tlastUpdateCheck: Date.now()\n\t\t\t\t});\n\t\t\t} catch (_) {\n\t\t\t\t// Expecting error code EACCES or EPERM\n\t\t\t\tconst message =\n\t\t\t\t\tchalk().yellow(format(' %s update check failed ', options.pkg.name)) +\n\t\t\t\t\tformat('\\n Try running with %s or get access ', chalk().cyan('sudo')) +\n\t\t\t\t\t'\\n to the local update config store via \\n' +\n\t\t\t\t\tchalk().cyan(format(' sudo chown -R $USER:$(id -gn $USER) %s ', xdgBasedir().config));\n\n\t\t\t\tprocess.on('exit', () => {\n\t\t\t\t\tconsole.error(boxen()(message, {align: 'center'}));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tcheck() {\n\t\tif (\n\t\t\t!this.config ||\n\t\t\tthis.config.get('optOut') ||\n\t\t\tthis.disabled\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.update = this.config.get('update');\n\n\t\tif (this.update) {\n\t\t\t// Use the real latest version instead of the cached one\n\t\t\tthis.update.current = this.packageVersion;\n\n\t\t\t// Clear cached information\n\t\t\tthis.config.delete('update');\n\t\t}\n\n\t\t// Only check for updates on a set interval\n\t\tif (Date.now() - this.config.get('lastUpdateCheck') < this.updateCheckInterval) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Spawn a detached process, passing the options as an environment property\n\t\tspawn(process.execPath, [path.join(__dirname, 'check.js'), JSON.stringify(this.options)], {\n\t\t\tdetached: true,\n\t\t\tstdio: 'ignore'\n\t\t}).unref();\n\t}\n\n\tasync fetchInfo() {\n\t\tconst {distTag} = this.options;\n\t\tconst latest = await latestVersion()(this.packageName, {version: distTag});\n\n\t\treturn {\n\t\t\tlatest,\n\t\t\tcurrent: this.packageVersion,\n\t\t\ttype: semverDiff()(this.packageVersion, latest) || distTag,\n\t\t\tname: this.packageName\n\t\t};\n\t}\n\n\tnotify(options) {\n\t\tconst suppressForNpm = !this.shouldNotifyInNpmScript && isNpm().isNpmOrYarn;\n\t\tif (!process.stdout.isTTY || suppressForNpm || !this.update || this.update.current === this.update.latest) {\n\t\t\treturn this;\n\t\t}\n\n\t\toptions = Object.assign({\n\t\t\tisGlobal: isInstalledGlobally(),\n\t\t\tisYarnGlobal: isYarnGlobal()()\n\t\t}, options);\n\n\t\tlet installCommand;\n\n\t\tif (options.isYarnGlobal) {\n\t\t\tinstallCommand = `yarn global add ${this.packageName}`;\n\t\t} else if (options.isGlobal) {\n\t\t\tinstallCommand = `npm i -g ${this.packageName}`;\n\t\t} else if (hasYarn()()) {\n\t\t\tinstallCommand = `yarn add ${this.packageName}`;\n\t\t} else {\n\t\t\tinstallCommand = `npm i ${this.packageName}`;\n\t\t}\n\n\t\tconst defaultTemplate = 'Update available ' +\n\t\t\tchalk().dim('{currentVersion}') +\n\t\t\tchalk().reset(' â†’ ') +\n\t\t\tchalk().green('{latestVersion}') +\n\t\t\t' \\nRun ' + chalk().cyan('{updateCommand}') + ' to update';\n\n\t\tconst template = options.message || defaultTemplate;\n\n\t\toptions.boxenOptions = options.boxenOptions || {\n\t\t\tpadding: 1,\n\t\t\tmargin: 1,\n\t\t\talign: 'center',\n\t\t\tborderColor: 'yellow',\n\t\t\tborderStyle: 'round'\n\t\t};\n\n\t\tconst message = boxen()(\n\t\t\tpupa()(template, {\n\t\t\t\tpackageName: this.packageName,\n\t\t\t\tcurrentVersion: this.update.current,\n\t\t\t\tlatestVersion: this.update.latest,\n\t\t\t\tupdateCommand: installCommand\n\t\t\t}),\n\t\t\toptions.boxenOptions\n\t\t);\n\n\t\tif (options.defer === false) {\n\t\t\tconsole.error(message);\n\t\t} else {\n\t\t\tprocess.on('exit', () => {\n\t\t\t\tconsole.error(message);\n\t\t\t});\n\n\t\t\tprocess.on('SIGINT', () => {\n\t\t\t\tconsole.error('');\n\t\t\t\tprocess.exit();\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n}\n\nmodule.exports = options => {\n\tconst updateNotifier = new UpdateNotifier(options);\n\tupdateNotifier.check();\n\treturn updateNotifier;\n};\n\nmodule.exports.UpdateNotifier = UpdateNotifier;\n"]},"metadata":{},"sourceType":"module"}