{"ast":null,"code":"const genfun = require('./');\n\nconst {\n  d\n} = genfun.formats;\n\nfunction multiply(a, b) {\n  return a * b;\n}\n\nfunction addAndMultiplyNumber(val) {\n  const fn = genfun(`\n    function (n) {\n      if (typeof n !== 'number') {\n        throw new Error('argument should be a number')\n      }\n      const result = multiply(${d(val)}, n + ${d(val)})\n      return result\n    }\n  `); // use fn.toString() if you want to see the generated source\n\n  return fn.toFunction({\n    multiply\n  });\n}\n\nconst addAndMultiply2 = addAndMultiplyNumber(2);\nconsole.log(addAndMultiply2.toString());\nconsole.log('(3 + 2) * 2 =', addAndMultiply2(3));","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/generate-function/example.js"],"names":["genfun","require","d","formats","multiply","a","b","addAndMultiplyNumber","val","fn","toFunction","addAndMultiply2","console","log","toString"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,IAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAQF,MAAM,CAACG,OAArB;;AAEA,SAASC,QAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AACvB,SAAOD,CAAC,GAAGC,CAAX;AACD;;AAED,SAASC,oBAAT,CAA+BC,GAA/B,EAAoC;AAClC,QAAMC,EAAE,GAAGT,MAAM,CAAE;AACrB;AACA;AACA;AACA;AACA,gCAAgCE,CAAC,CAACM,GAAD,CAAM,SAAQN,CAAC,CAACM,GAAD,CAAM;AACtD;AACA;AACA,GARmB,CAAjB,CADkC,CAWlC;;AAEA,SAAOC,EAAE,CAACC,UAAH,CAAc;AAACN,IAAAA;AAAD,GAAd,CAAP;AACD;;AAED,MAAMO,eAAe,GAAGJ,oBAAoB,CAAC,CAAD,CAA5C;AAEAK,OAAO,CAACC,GAAR,CAAYF,eAAe,CAACG,QAAhB,EAAZ;AACAF,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,eAAe,CAAC,CAAD,CAA5C","sourcesContent":["const genfun = require('./')\nconst { d } = genfun.formats\n\nfunction multiply (a, b) {\n  return a * b\n}\n\nfunction addAndMultiplyNumber (val) {\n  const fn = genfun(`\n    function (n) {\n      if (typeof n !== 'number') {\n        throw new Error('argument should be a number')\n      }\n      const result = multiply(${d(val)}, n + ${d(val)})\n      return result\n    }\n  `)\n\n  // use fn.toString() if you want to see the generated source\n\n  return fn.toFunction({multiply})\n}\n\nconst addAndMultiply2 = addAndMultiplyNumber(2)\n\nconsole.log(addAndMultiply2.toString())\nconsole.log('(3 + 2) * 2 =', addAndMultiply2(3))\n"]},"metadata":{},"sourceType":"module"}