{"ast":null,"code":"'use strict';\n\nconst process = require('process');\n\nconst AuthSwitchRequest = require('./auth_switch_request');\n\nconst AuthSwitchRequestMoreData = require('./auth_switch_request_more_data');\n\nconst AuthSwitchResponse = require('./auth_switch_response');\n\nconst BinaryRow = require('./binary_row');\n\nconst BinlogDump = require('./binlog_dump');\n\nconst ChangeUser = require('./change_user');\n\nconst CloseStatement = require('./close_statement');\n\nconst ColumnDefinition = require('./column_definition');\n\nconst Execute = require('./execute');\n\nconst Handshake = require('./handshake');\n\nconst HandshakeResponse = require('./handshake_response');\n\nconst PrepareStatement = require('./prepare_statement');\n\nconst PreparedStatementHeader = require('./prepared_statement_header');\n\nconst Query = require('./query');\n\nconst RegisterSlave = require('./register_slave');\n\nconst ResultSetHeader = require('./resultset_header');\n\nconst SSLRequest = require('./ssl_request');\n\nconst TextRow = require('./text_row');\n\nconst ctorMap = {\n  AuthSwitchRequest,\n  AuthSwitchRequestMoreData,\n  AuthSwitchResponse,\n  BinaryRow,\n  BinlogDump,\n  ChangeUser,\n  CloseStatement,\n  ColumnDefinition,\n  Execute,\n  Handshake,\n  HandshakeResponse,\n  PrepareStatement,\n  PreparedStatementHeader,\n  Query,\n  RegisterSlave,\n  ResultSetHeader,\n  SSLRequest,\n  TextRow\n};\nObject.entries(ctorMap).forEach(([name, ctor]) => {\n  module.exports[name] = ctor; // monkey-patch it to include name if debug is on\n\n  if (process.env.NODE_DEBUG) {\n    if (ctor.prototype.toPacket) {\n      const old = ctor.prototype.toPacket;\n\n      ctor.prototype.toPacket = function () {\n        const p = old.call(this);\n        p._name = name;\n        return p;\n      };\n    }\n  }\n}); // simple packets:\n\nconst Packet = require('./packet');\n\nexports.Packet = Packet;\n\nclass OK {\n  static toPacket(args, encoding) {\n    args = args || {};\n    const affectedRows = args.affectedRows || 0;\n    const insertId = args.insertId || 0;\n    const serverStatus = args.serverStatus || 0;\n    const warningCount = args.warningCount || 0;\n    const message = args.message || '';\n    let length = 9 + Packet.lengthCodedNumberLength(affectedRows);\n    length += Packet.lengthCodedNumberLength(insertId);\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    packet.offset = 4;\n    packet.writeInt8(0);\n    packet.writeLengthCodedNumber(affectedRows);\n    packet.writeLengthCodedNumber(insertId);\n    packet.writeInt16(serverStatus);\n    packet.writeInt16(warningCount);\n    packet.writeString(message, encoding);\n    packet._name = 'OK';\n    return packet;\n  }\n\n}\n\nexports.OK = OK; // warnings, statusFlags\n\nclass EOF {\n  static toPacket(warnings, statusFlags) {\n    if (typeof warnings === 'undefined') {\n      warnings = 0;\n    }\n\n    if (typeof statusFlags === 'undefined') {\n      statusFlags = 0;\n    }\n\n    const packet = new Packet(0, Buffer.allocUnsafe(9), 0, 9);\n    packet.offset = 4;\n    packet.writeInt8(0xfe);\n    packet.writeInt16(warnings);\n    packet.writeInt16(statusFlags);\n    packet._name = 'EOF';\n    return packet;\n  }\n\n}\n\nexports.EOF = EOF;\n\nclass Error {\n  static toPacket(args, encoding) {\n    const length = 13 + Buffer.byteLength(args.message, 'utf8');\n    const packet = new Packet(0, Buffer.allocUnsafe(length), 0, length);\n    packet.offset = 4;\n    packet.writeInt8(0xff);\n    packet.writeInt16(args.code); // TODO: sql state parameter\n\n    packet.writeString('#_____', encoding);\n    packet.writeString(args.message, encoding);\n    packet._name = 'Error';\n    return packet;\n  }\n\n}\n\nexports.Error = Error;","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/mysql2/lib/packets/index.js"],"names":["process","require","AuthSwitchRequest","AuthSwitchRequestMoreData","AuthSwitchResponse","BinaryRow","BinlogDump","ChangeUser","CloseStatement","ColumnDefinition","Execute","Handshake","HandshakeResponse","PrepareStatement","PreparedStatementHeader","Query","RegisterSlave","ResultSetHeader","SSLRequest","TextRow","ctorMap","Object","entries","forEach","name","ctor","module","exports","env","NODE_DEBUG","prototype","toPacket","old","p","call","_name","Packet","OK","args","encoding","affectedRows","insertId","serverStatus","warningCount","message","length","lengthCodedNumberLength","buffer","Buffer","allocUnsafe","packet","offset","writeInt8","writeLengthCodedNumber","writeInt16","writeString","EOF","warnings","statusFlags","Error","byteLength","code"],"mappings":"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","sourcesContent":["'use strict';\n\nconst process = require('process');\n\nconst AuthSwitchRequest = require('./auth_switch_request');\nconst AuthSwitchRequestMoreData = require('./auth_switch_request_more_data');\nconst AuthSwitchResponse = require('./auth_switch_response');\nconst BinaryRow = require('./binary_row');\nconst BinlogDump = require('./binlog_dump');\nconst ChangeUser = require('./change_user');\nconst CloseStatement = require('./close_statement');\nconst ColumnDefinition = require('./column_definition');\nconst Execute = require('./execute');\nconst Handshake = require('./handshake');\nconst HandshakeResponse = require('./handshake_response');\nconst PrepareStatement = require('./prepare_statement');\nconst PreparedStatementHeader = require('./prepared_statement_header');\nconst Query = require('./query');\nconst RegisterSlave = require('./register_slave');\nconst ResultSetHeader = require('./resultset_header');\nconst SSLRequest = require('./ssl_request');\nconst TextRow = require('./text_row');\n\nconst ctorMap = {\n  AuthSwitchRequest,\n  AuthSwitchRequestMoreData,\n  AuthSwitchResponse,\n  BinaryRow,\n  BinlogDump,\n  ChangeUser,\n  CloseStatement,\n  ColumnDefinition,\n  Execute,\n  Handshake,\n  HandshakeResponse,\n  PrepareStatement,\n  PreparedStatementHeader,\n  Query,\n  RegisterSlave,\n  ResultSetHeader,\n  SSLRequest,\n  TextRow\n};\nObject.entries(ctorMap).forEach(([name, ctor]) => {\n  module.exports[name] = ctor;\n  // monkey-patch it to include name if debug is on\n  if (process.env.NODE_DEBUG) {\n    if (ctor.prototype.toPacket) {\n      const old = ctor.prototype.toPacket;\n      ctor.prototype.toPacket = function() {\n        const p = old.call(this);\n        p._name = name;\n        return p;\n      };\n    }\n  }\n});\n\n// simple packets:\nconst Packet = require('./packet');\nexports.Packet = Packet;\n\nclass OK {\n  static toPacket(args, encoding) {\n    args = args || {};\n    const affectedRows = args.affectedRows || 0;\n    const insertId = args.insertId || 0;\n    const serverStatus = args.serverStatus || 0;\n    const warningCount = args.warningCount || 0;\n    const message = args.message || '';\n\n    let length = 9 + Packet.lengthCodedNumberLength(affectedRows);\n    length += Packet.lengthCodedNumberLength(insertId);\n\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    packet.offset = 4;\n    packet.writeInt8(0);\n    packet.writeLengthCodedNumber(affectedRows);\n    packet.writeLengthCodedNumber(insertId);\n    packet.writeInt16(serverStatus);\n    packet.writeInt16(warningCount);\n    packet.writeString(message, encoding);\n    packet._name = 'OK';\n    return packet;\n  }\n}\n\nexports.OK = OK;\n\n// warnings, statusFlags\nclass EOF {\n  static toPacket(warnings, statusFlags) {\n    if (typeof warnings === 'undefined') {\n      warnings = 0;\n    }\n    if (typeof statusFlags === 'undefined') {\n      statusFlags = 0;\n    }\n    const packet = new Packet(0, Buffer.allocUnsafe(9), 0, 9);\n    packet.offset = 4;\n    packet.writeInt8(0xfe);\n    packet.writeInt16(warnings);\n    packet.writeInt16(statusFlags);\n    packet._name = 'EOF';\n    return packet;\n  }\n}\n\nexports.EOF = EOF;\n\nclass Error {\n  static toPacket(args, encoding) {\n    const length = 13 + Buffer.byteLength(args.message, 'utf8');\n    const packet = new Packet(0, Buffer.allocUnsafe(length), 0, length);\n    packet.offset = 4;\n    packet.writeInt8(0xff);\n    packet.writeInt16(args.code);\n    // TODO: sql state parameter\n    packet.writeString('#_____', encoding);\n    packet.writeString(args.message, encoding);\n    packet._name = 'Error';\n    return packet;\n  }\n}\n\nexports.Error = Error;\n"]},"metadata":{},"sourceType":"module"}