{"ast":null,"code":"'use strict';\n\nconst {\n  execFileSync\n} = require('child_process');\n\nconst path = require('path');\n\nconst exec = (command, arguments_, shell) => execFileSync(command, arguments_, {\n  encoding: 'utf8',\n  shell\n}).trim();\n\nconst create = (columns, rows) => ({\n  columns: parseInt(columns, 10),\n  rows: parseInt(rows, 10)\n});\n\nmodule.exports = () => {\n  const {\n    env,\n    stdout,\n    stderr\n  } = process;\n\n  if (stdout && stdout.columns && stdout.rows) {\n    return create(stdout.columns, stdout.rows);\n  }\n\n  if (stderr && stderr.columns && stderr.rows) {\n    return create(stderr.columns, stderr.rows);\n  } // These values are static, so not the first choice\n\n\n  if (env.COLUMNS && env.LINES) {\n    return create(env.COLUMNS, env.LINES);\n  }\n\n  if (process.platform === 'win32') {\n    try {\n      // Binary: https://github.com/sindresorhus/win-term-size\n      const size = exec(path.join(__dirname, 'vendor/windows/term-size.exe')).split(/\\r?\\n/);\n\n      if (size.length === 2) {\n        return create(size[0], size[1]);\n      }\n    } catch (_) {}\n  } else {\n    if (process.platform === 'darwin') {\n      try {\n        // Binary: https://github.com/sindresorhus/macos-term-size\n        const size = exec(path.join(__dirname, 'vendor/macos/term-size'), [], true).split(/\\r?\\n/);\n\n        if (size.length === 2) {\n          return create(size[0], size[1]);\n        }\n      } catch (_) {}\n    } // `resize` is preferred as it works even when all file descriptors are redirected\n    // https://linux.die.net/man/1/resize\n\n\n    try {\n      const size = exec('resize', ['-u']).match(/\\d+/g);\n\n      if (size.length === 2) {\n        return create(size[0], size[1]);\n      }\n    } catch (_) {}\n\n    if (process.env.TERM) {\n      try {\n        const columns = exec('tput', ['cols']);\n        const rows = exec('tput', ['lines']);\n\n        if (columns && rows) {\n          return create(columns, rows);\n        }\n      } catch (_) {}\n    }\n  }\n\n  return create(80, 24);\n};","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/term-size/index.js"],"names":["execFileSync","require","path","exec","command","arguments_","shell","encoding","trim","create","columns","rows","parseInt","module","exports","env","stdout","stderr","process","COLUMNS","LINES","platform","size","join","__dirname","split","length","_","match","TERM"],"mappings":"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","sourcesContent":["'use strict';\nconst {execFileSync} = require('child_process');\nconst path = require('path');\n\nconst exec = (command, arguments_, shell) => execFileSync(command, arguments_, {encoding: 'utf8', shell}).trim();\n\nconst create = (columns, rows) => ({\n\tcolumns: parseInt(columns, 10),\n\trows: parseInt(rows, 10)\n});\n\nmodule.exports = () => {\n\tconst {env, stdout, stderr} = process;\n\n\tif (stdout && stdout.columns && stdout.rows) {\n\t\treturn create(stdout.columns, stdout.rows);\n\t}\n\n\tif (stderr && stderr.columns && stderr.rows) {\n\t\treturn create(stderr.columns, stderr.rows);\n\t}\n\n\t// These values are static, so not the first choice\n\tif (env.COLUMNS && env.LINES) {\n\t\treturn create(env.COLUMNS, env.LINES);\n\t}\n\n\tif (process.platform === 'win32') {\n\t\ttry {\n\t\t\t// Binary: https://github.com/sindresorhus/win-term-size\n\t\t\tconst size = exec(path.join(__dirname, 'vendor/windows/term-size.exe')).split(/\\r?\\n/);\n\n\t\t\tif (size.length === 2) {\n\t\t\t\treturn create(size[0], size[1]);\n\t\t\t}\n\t\t} catch (_) {}\n\t} else {\n\t\tif (process.platform === 'darwin') {\n\t\t\ttry {\n\t\t\t\t// Binary: https://github.com/sindresorhus/macos-term-size\n\t\t\t\tconst size = exec(path.join(__dirname, 'vendor/macos/term-size'), [], true).split(/\\r?\\n/);\n\n\t\t\t\tif (size.length === 2) {\n\t\t\t\t\treturn create(size[0], size[1]);\n\t\t\t\t}\n\t\t\t} catch (_) {}\n\t\t}\n\n\t\t// `resize` is preferred as it works even when all file descriptors are redirected\n\t\t// https://linux.die.net/man/1/resize\n\t\ttry {\n\t\t\tconst size = exec('resize', ['-u']).match(/\\d+/g);\n\n\t\t\tif (size.length === 2) {\n\t\t\t\treturn create(size[0], size[1]);\n\t\t\t}\n\t\t} catch (_) {}\n\n\t\tif (process.env.TERM) {\n\t\t\ttry {\n\t\t\t\tconst columns = exec('tput', ['cols']);\n\t\t\t\tconst rows = exec('tput', ['lines']);\n\n\t\t\t\tif (columns && rows) {\n\t\t\t\t\treturn create(columns, rows);\n\t\t\t\t}\n\t\t\t} catch (_) {}\n\t\t}\n\t}\n\n\treturn create(80, 24);\n};\n"]},"metadata":{},"sourceType":"module"}