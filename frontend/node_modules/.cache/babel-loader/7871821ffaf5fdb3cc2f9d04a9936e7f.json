{"ast":null,"code":"!function (t, i) {\n  \"object\" == typeof exports && \"object\" == typeof module ? module.exports = i() : \"function\" == typeof define && define.amd ? define([], i) : \"object\" == typeof exports ? exports.Long = i() : t.Long = i();\n}(\"undefined\" != typeof self ? self : this, function () {\n  return function (t) {\n    function i(e) {\n      if (n[e]) return n[e].exports;\n      var r = n[e] = {\n        i: e,\n        l: !1,\n        exports: {}\n      };\n      return t[e].call(r.exports, r, r.exports, i), r.l = !0, r.exports;\n    }\n\n    var n = {};\n    return i.m = t, i.c = n, i.d = function (t, n, e) {\n      i.o(t, n) || Object.defineProperty(t, n, {\n        configurable: !1,\n        enumerable: !0,\n        get: e\n      });\n    }, i.n = function (t) {\n      var n = t && t.__esModule ? function () {\n        return t.default;\n      } : function () {\n        return t;\n      };\n      return i.d(n, \"a\", n), n;\n    }, i.o = function (t, i) {\n      return Object.prototype.hasOwnProperty.call(t, i);\n    }, i.p = \"\", i(i.s = 0);\n  }([function (t, i) {\n    function n(t, i, n) {\n      this.low = 0 | t, this.high = 0 | i, this.unsigned = !!n;\n    }\n\n    function e(t) {\n      return !0 === (t && t.__isLong__);\n    }\n\n    function r(t, i) {\n      var n, e, r;\n      return i ? (t >>>= 0, (r = 0 <= t && t < 256) && (e = l[t]) ? e : (n = h(t, (0 | t) < 0 ? -1 : 0, !0), r && (l[t] = n), n)) : (t |= 0, (r = -128 <= t && t < 128) && (e = f[t]) ? e : (n = h(t, t < 0 ? -1 : 0, !1), r && (f[t] = n), n));\n    }\n\n    function s(t, i) {\n      if (isNaN(t)) return i ? p : m;\n\n      if (i) {\n        if (t < 0) return p;\n        if (t >= c) return q;\n      } else {\n        if (t <= -v) return _;\n        if (t + 1 >= v) return E;\n      }\n\n      return t < 0 ? s(-t, i).neg() : h(t % d | 0, t / d | 0, i);\n    }\n\n    function h(t, i, e) {\n      return new n(t, i, e);\n    }\n\n    function u(t, i, n) {\n      if (0 === t.length) throw Error(\"empty string\");\n      if (\"NaN\" === t || \"Infinity\" === t || \"+Infinity\" === t || \"-Infinity\" === t) return m;\n      if (\"number\" == typeof i ? (n = i, i = !1) : i = !!i, (n = n || 10) < 2 || 36 < n) throw RangeError(\"radix\");\n      var e;\n      if ((e = t.indexOf(\"-\")) > 0) throw Error(\"interior hyphen\");\n      if (0 === e) return u(t.substring(1), i, n).neg();\n\n      for (var r = s(a(n, 8)), h = m, o = 0; o < t.length; o += 8) {\n        var g = Math.min(8, t.length - o),\n            f = parseInt(t.substring(o, o + g), n);\n\n        if (g < 8) {\n          var l = s(a(n, g));\n          h = h.mul(l).add(s(f));\n        } else h = h.mul(r), h = h.add(s(f));\n      }\n\n      return h.unsigned = i, h;\n    }\n\n    function o(t, i) {\n      return \"number\" == typeof t ? s(t, i) : \"string\" == typeof t ? u(t, i) : h(t.low, t.high, \"boolean\" == typeof i ? i : t.unsigned);\n    }\n\n    t.exports = n;\n    var g = null;\n\n    try {\n      g = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n    } catch (t) {}\n\n    n.prototype.__isLong__, Object.defineProperty(n.prototype, \"__isLong__\", {\n      value: !0\n    }), n.isLong = e;\n    var f = {},\n        l = {};\n    n.fromInt = r, n.fromNumber = s, n.fromBits = h;\n    var a = Math.pow;\n    n.fromString = u, n.fromValue = o;\n    var d = 4294967296,\n        c = d * d,\n        v = c / 2,\n        w = r(1 << 24),\n        m = r(0);\n    n.ZERO = m;\n    var p = r(0, !0);\n    n.UZERO = p;\n    var y = r(1);\n    n.ONE = y;\n    var b = r(1, !0);\n    n.UONE = b;\n    var N = r(-1);\n    n.NEG_ONE = N;\n    var E = h(-1, 2147483647, !1);\n    n.MAX_VALUE = E;\n    var q = h(-1, -1, !0);\n    n.MAX_UNSIGNED_VALUE = q;\n\n    var _ = h(0, -2147483648, !1);\n\n    n.MIN_VALUE = _;\n    var B = n.prototype;\n    B.toInt = function () {\n      return this.unsigned ? this.low >>> 0 : this.low;\n    }, B.toNumber = function () {\n      return this.unsigned ? (this.high >>> 0) * d + (this.low >>> 0) : this.high * d + (this.low >>> 0);\n    }, B.toString = function (t) {\n      if ((t = t || 10) < 2 || 36 < t) throw RangeError(\"radix\");\n      if (this.isZero()) return \"0\";\n\n      if (this.isNegative()) {\n        if (this.eq(_)) {\n          var i = s(t),\n              n = this.div(i),\n              e = n.mul(i).sub(this);\n          return n.toString(t) + e.toInt().toString(t);\n        }\n\n        return \"-\" + this.neg().toString(t);\n      }\n\n      for (var r = s(a(t, 6), this.unsigned), h = this, u = \"\";;) {\n        var o = h.div(r),\n            g = h.sub(o.mul(r)).toInt() >>> 0,\n            f = g.toString(t);\n        if (h = o, h.isZero()) return f + u;\n\n        for (; f.length < 6;) f = \"0\" + f;\n\n        u = \"\" + f + u;\n      }\n    }, B.getHighBits = function () {\n      return this.high;\n    }, B.getHighBitsUnsigned = function () {\n      return this.high >>> 0;\n    }, B.getLowBits = function () {\n      return this.low;\n    }, B.getLowBitsUnsigned = function () {\n      return this.low >>> 0;\n    }, B.getNumBitsAbs = function () {\n      if (this.isNegative()) return this.eq(_) ? 64 : this.neg().getNumBitsAbs();\n\n      for (var t = 0 != this.high ? this.high : this.low, i = 31; i > 0 && 0 == (t & 1 << i); i--);\n\n      return 0 != this.high ? i + 33 : i + 1;\n    }, B.isZero = function () {\n      return 0 === this.high && 0 === this.low;\n    }, B.eqz = B.isZero, B.isNegative = function () {\n      return !this.unsigned && this.high < 0;\n    }, B.isPositive = function () {\n      return this.unsigned || this.high >= 0;\n    }, B.isOdd = function () {\n      return 1 == (1 & this.low);\n    }, B.isEven = function () {\n      return 0 == (1 & this.low);\n    }, B.equals = function (t) {\n      return e(t) || (t = o(t)), (this.unsigned === t.unsigned || this.high >>> 31 != 1 || t.high >>> 31 != 1) && this.high === t.high && this.low === t.low;\n    }, B.eq = B.equals, B.notEquals = function (t) {\n      return !this.eq(t);\n    }, B.neq = B.notEquals, B.ne = B.notEquals, B.lessThan = function (t) {\n      return this.comp(t) < 0;\n    }, B.lt = B.lessThan, B.lessThanOrEqual = function (t) {\n      return this.comp(t) <= 0;\n    }, B.lte = B.lessThanOrEqual, B.le = B.lessThanOrEqual, B.greaterThan = function (t) {\n      return this.comp(t) > 0;\n    }, B.gt = B.greaterThan, B.greaterThanOrEqual = function (t) {\n      return this.comp(t) >= 0;\n    }, B.gte = B.greaterThanOrEqual, B.ge = B.greaterThanOrEqual, B.compare = function (t) {\n      if (e(t) || (t = o(t)), this.eq(t)) return 0;\n      var i = this.isNegative(),\n          n = t.isNegative();\n      return i && !n ? -1 : !i && n ? 1 : this.unsigned ? t.high >>> 0 > this.high >>> 0 || t.high === this.high && t.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(t).isNegative() ? -1 : 1;\n    }, B.comp = B.compare, B.negate = function () {\n      return !this.unsigned && this.eq(_) ? _ : this.not().add(y);\n    }, B.neg = B.negate, B.add = function (t) {\n      e(t) || (t = o(t));\n      var i = this.high >>> 16,\n          n = 65535 & this.high,\n          r = this.low >>> 16,\n          s = 65535 & this.low,\n          u = t.high >>> 16,\n          g = 65535 & t.high,\n          f = t.low >>> 16,\n          l = 65535 & t.low,\n          a = 0,\n          d = 0,\n          c = 0,\n          v = 0;\n      return v += s + l, c += v >>> 16, v &= 65535, c += r + f, d += c >>> 16, c &= 65535, d += n + g, a += d >>> 16, d &= 65535, a += i + u, a &= 65535, h(c << 16 | v, a << 16 | d, this.unsigned);\n    }, B.subtract = function (t) {\n      return e(t) || (t = o(t)), this.add(t.neg());\n    }, B.sub = B.subtract, B.multiply = function (t) {\n      if (this.isZero()) return m;\n\n      if (e(t) || (t = o(t)), g) {\n        return h(g.mul(this.low, this.high, t.low, t.high), g.get_high(), this.unsigned);\n      }\n\n      if (t.isZero()) return m;\n      if (this.eq(_)) return t.isOdd() ? _ : m;\n      if (t.eq(_)) return this.isOdd() ? _ : m;\n      if (this.isNegative()) return t.isNegative() ? this.neg().mul(t.neg()) : this.neg().mul(t).neg();\n      if (t.isNegative()) return this.mul(t.neg()).neg();\n      if (this.lt(w) && t.lt(w)) return s(this.toNumber() * t.toNumber(), this.unsigned);\n      var i = this.high >>> 16,\n          n = 65535 & this.high,\n          r = this.low >>> 16,\n          u = 65535 & this.low,\n          f = t.high >>> 16,\n          l = 65535 & t.high,\n          a = t.low >>> 16,\n          d = 65535 & t.low,\n          c = 0,\n          v = 0,\n          p = 0,\n          y = 0;\n      return y += u * d, p += y >>> 16, y &= 65535, p += r * d, v += p >>> 16, p &= 65535, p += u * a, v += p >>> 16, p &= 65535, v += n * d, c += v >>> 16, v &= 65535, v += r * a, c += v >>> 16, v &= 65535, v += u * l, c += v >>> 16, v &= 65535, c += i * d + n * a + r * l + u * f, c &= 65535, h(p << 16 | y, c << 16 | v, this.unsigned);\n    }, B.mul = B.multiply, B.divide = function (t) {\n      if (e(t) || (t = o(t)), t.isZero()) throw Error(\"division by zero\");\n\n      if (g) {\n        if (!this.unsigned && -2147483648 === this.high && -1 === t.low && -1 === t.high) return this;\n        return h((this.unsigned ? g.div_u : g.div_s)(this.low, this.high, t.low, t.high), g.get_high(), this.unsigned);\n      }\n\n      if (this.isZero()) return this.unsigned ? p : m;\n      var i, n, r;\n\n      if (this.unsigned) {\n        if (t.unsigned || (t = t.toUnsigned()), t.gt(this)) return p;\n        if (t.gt(this.shru(1))) return b;\n        r = p;\n      } else {\n        if (this.eq(_)) {\n          if (t.eq(y) || t.eq(N)) return _;\n          if (t.eq(_)) return y;\n          return i = this.shr(1).div(t).shl(1), i.eq(m) ? t.isNegative() ? y : N : (n = this.sub(t.mul(i)), r = i.add(n.div(t)));\n        }\n\n        if (t.eq(_)) return this.unsigned ? p : m;\n        if (this.isNegative()) return t.isNegative() ? this.neg().div(t.neg()) : this.neg().div(t).neg();\n        if (t.isNegative()) return this.div(t.neg()).neg();\n        r = m;\n      }\n\n      for (n = this; n.gte(t);) {\n        i = Math.max(1, Math.floor(n.toNumber() / t.toNumber()));\n\n        for (var u = Math.ceil(Math.log(i) / Math.LN2), f = u <= 48 ? 1 : a(2, u - 48), l = s(i), d = l.mul(t); d.isNegative() || d.gt(n);) i -= f, l = s(i, this.unsigned), d = l.mul(t);\n\n        l.isZero() && (l = y), r = r.add(l), n = n.sub(d);\n      }\n\n      return r;\n    }, B.div = B.divide, B.modulo = function (t) {\n      if (e(t) || (t = o(t)), g) {\n        return h((this.unsigned ? g.rem_u : g.rem_s)(this.low, this.high, t.low, t.high), g.get_high(), this.unsigned);\n      }\n\n      return this.sub(this.div(t).mul(t));\n    }, B.mod = B.modulo, B.rem = B.modulo, B.not = function () {\n      return h(~this.low, ~this.high, this.unsigned);\n    }, B.and = function (t) {\n      return e(t) || (t = o(t)), h(this.low & t.low, this.high & t.high, this.unsigned);\n    }, B.or = function (t) {\n      return e(t) || (t = o(t)), h(this.low | t.low, this.high | t.high, this.unsigned);\n    }, B.xor = function (t) {\n      return e(t) || (t = o(t)), h(this.low ^ t.low, this.high ^ t.high, this.unsigned);\n    }, B.shiftLeft = function (t) {\n      return e(t) && (t = t.toInt()), 0 == (t &= 63) ? this : t < 32 ? h(this.low << t, this.high << t | this.low >>> 32 - t, this.unsigned) : h(0, this.low << t - 32, this.unsigned);\n    }, B.shl = B.shiftLeft, B.shiftRight = function (t) {\n      return e(t) && (t = t.toInt()), 0 == (t &= 63) ? this : t < 32 ? h(this.low >>> t | this.high << 32 - t, this.high >> t, this.unsigned) : h(this.high >> t - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n    }, B.shr = B.shiftRight, B.shiftRightUnsigned = function (t) {\n      if (e(t) && (t = t.toInt()), 0 === (t &= 63)) return this;\n      var i = this.high;\n\n      if (t < 32) {\n        return h(this.low >>> t | i << 32 - t, i >>> t, this.unsigned);\n      }\n\n      return 32 === t ? h(i, 0, this.unsigned) : h(i >>> t - 32, 0, this.unsigned);\n    }, B.shru = B.shiftRightUnsigned, B.shr_u = B.shiftRightUnsigned, B.toSigned = function () {\n      return this.unsigned ? h(this.low, this.high, !1) : this;\n    }, B.toUnsigned = function () {\n      return this.unsigned ? this : h(this.low, this.high, !0);\n    }, B.toBytes = function (t) {\n      return t ? this.toBytesLE() : this.toBytesBE();\n    }, B.toBytesLE = function () {\n      var t = this.high,\n          i = this.low;\n      return [255 & i, i >>> 8 & 255, i >>> 16 & 255, i >>> 24, 255 & t, t >>> 8 & 255, t >>> 16 & 255, t >>> 24];\n    }, B.toBytesBE = function () {\n      var t = this.high,\n          i = this.low;\n      return [t >>> 24, t >>> 16 & 255, t >>> 8 & 255, 255 & t, i >>> 24, i >>> 16 & 255, i >>> 8 & 255, 255 & i];\n    }, n.fromBytes = function (t, i, e) {\n      return e ? n.fromBytesLE(t, i) : n.fromBytesBE(t, i);\n    }, n.fromBytesLE = function (t, i) {\n      return new n(t[0] | t[1] << 8 | t[2] << 16 | t[3] << 24, t[4] | t[5] << 8 | t[6] << 16 | t[7] << 24, i);\n    }, n.fromBytesBE = function (t, i) {\n      return new n(t[4] << 24 | t[5] << 16 | t[6] << 8 | t[7], t[0] << 24 | t[1] << 16 | t[2] << 8 | t[3], i);\n    };\n  }]);\n});","map":{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///long.js","webpack:/webpack/bootstrap d8921b8c3ad0790b3cc1","webpack:///src/long.js"],"names":["module","define","exports","root","modules","i","l","__webpack_require__","Object","configurable","enumerable","get","wasm","this","Long","value","UINT_CACHE","cache","cachedObj","obj","INT_CACHE","fromNumber","fromBits","radix","unsigned","radixToPower","result","fromString","TWO_PWR_32_DBL","TWO_PWR_64_DBL","TWO_PWR_63_DBL","TWO_PWR_24","ZERO","LongPrototype","div","rem1","rem","intval","digits","val","bit","isLong","other","otherNeg","thisNeg","MIN_VALUE","addend","a32","a16","a00","b48","b32","b16","b00","c48","c00","c16","c32","subtrahend","multiplier","divisor","approx","res","delta","approxRes","approxRem","numBits","lo","hi","bytes"],"mappings":"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,CAAAA,CADAA;AAIAA;;AAAAA,aAAAA,CAAAA,CAAAA,QAAAA,GAAAA,CAAAA,EACA,CADAA;AAqBA;;AAAA,aAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,aAAA,YAAA,OAAA,CAAA,GACAL,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CADA,GAEA,YAAA,OAAA,CAAA,GACAM,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CADA,GAGAL,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,EAAAA,aAAAA,OAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,CAAAA,QAAAA,CALA;AAxRAtB;;AAAAA,IAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA;AAKA,QAAA,CAAA,GAAA,IAAA;;AAEA,QAAA;AACAY,MAAAA,CAAAA,GAAAA,IAAAA,WAAAA,CAAAA,QAAAA,CAAAA,IAAAA,WAAAA,CAAAA,MAAAA,CAAAA,IAAAA,UAAAA,CAAAA,CACA,CADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,EADAA,EACA,CADAA,EACA,EADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,CADAA,EACA,GADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,CADAA,EACA,EADAA,EACA,CADAA,EACA,EADAA,EACA,CADAA,EACA,EADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,GADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,GADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,GADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,GADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,CADAA,EACA,CADAA,EACA,EADAA,EACA,GADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,CADAA,EACA,EADAA,EACA,CADAA,EACA,EADAA,EACA,EADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,CADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EACA,GADAA,EACA,EADAA,EACA,EADAA,EACA,GADAA,EACA,GADAA,EACA,GADAA,EACA,EADAA,EACA,CADAA,EAC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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Long\"] = factory();\n\telse\n\t\troot[\"Long\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Long\"] = factory();\n\telse\n\t\troot[\"Long\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// long.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d8921b8c3ad0790b3cc1","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/long.js\n// module id = 0\n// module chunks = 0"],"sourceRoot":""},"metadata":{},"sourceType":"module"}