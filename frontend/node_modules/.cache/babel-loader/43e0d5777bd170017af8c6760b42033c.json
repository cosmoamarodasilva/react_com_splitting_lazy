{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import {Primitive} from './basic';\n\n/**\nCreate a type from another type with all keys and nested keys set to optional.\n\nUse-cases:\n- Merging a default settings/config object with another object, the second object would be a deep partial of the default object.\n- Mocking and testing complex entities, where populating an entire object with its keys would be redundant in terms of the mock or test.\n\n@example\n```\nimport {PartialDeep} from 'type-fest';\n\nconst settings: Settings = {\n\ttextEditor: {\n\t\tfontSize: 14;\n\t\tfontColor: '#000000';\n\t\tfontWeight: 400;\n\t}\n\tautocomplete: false;\n\tautosave: true;\n};\n\nconst applySavedSettings = (savedSettings: PartialDeep<Settings>) => {\n\treturn {...settings, ...savedSettings};\n}\n\nsettings = applySavedSettings({textEditor: {fontWeight: 500}});\n```\n*/\nexport type PartialDeep<T> = T extends Primitive\n\t? Partial<T>\n\t: T extends Map<infer KeyType, infer ValueType>\n\t? PartialMapDeep<KeyType, ValueType>\n\t: T extends Set<infer ItemType>\n\t? PartialSetDeep<ItemType>\n\t: T extends ReadonlyMap<infer KeyType, infer ValueType>\n\t? PartialReadonlyMapDeep<KeyType, ValueType>\n\t: T extends ReadonlySet<infer ItemType>\n\t? PartialReadonlySetDeep<ItemType>\n\t: T extends ((...arguments: any[]) => unknown)\n\t? T | undefined\n\t: T extends object\n\t? PartialObjectDeep<T>\n\t: unknown;\n\n/**\nSame as `PartialDeep`, but accepts only `Map`s and  as inputs. Internal helper for `PartialDeep`.\n*/\ninterface PartialMapDeep<KeyType, ValueType> extends Map<PartialDeep<KeyType>, PartialDeep<ValueType>> {}\n\n/**\nSame as `PartialDeep`, but accepts only `Set`s as inputs. Internal helper for `PartialDeep`.\n*/\ninterface PartialSetDeep<T> extends Set<PartialDeep<T>> {}\n\n/**\nSame as `PartialDeep`, but accepts only `ReadonlyMap`s as inputs. Internal helper for `PartialDeep`.\n*/\ninterface PartialReadonlyMapDeep<KeyType, ValueType> extends ReadonlyMap<PartialDeep<KeyType>, PartialDeep<ValueType>> {}\n\n/**\nSame as `PartialDeep`, but accepts only `ReadonlySet`s as inputs. Internal helper for `PartialDeep`.\n*/\ninterface PartialReadonlySetDeep<T> extends ReadonlySet<PartialDeep<T>> {}\n\n/**\nSame as `PartialDeep`, but accepts only `object`s as inputs. Internal helper for `PartialDeep`.\n*/\ntype PartialObjectDeep<ObjectType extends object> = {\n\t[KeyType in keyof ObjectType]?: PartialDeep<ObjectType[KeyType]>\n};\n"]},"metadata":{},"sourceType":"module"}