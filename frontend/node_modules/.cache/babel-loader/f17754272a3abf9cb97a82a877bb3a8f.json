{"ast":null,"code":"/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\nconst PROJECT_DIR = process.env.PROJECT_DIR;\n\nlet assert = require('assert');\n\nlet fs = require('fs');\n\nlet exec = require('child_process').execSync;\n\nlet {\n  rmRf\n} = require(`${PROJECT_DIR}/lib/jake`);\n\nlet cleanUpAndNext = function (callback) {\n  rmRf('./foo', {\n    silent: true\n  });\n  callback && callback();\n};\n\nsuite('fileTask', function () {\n  this.timeout(7000);\n  setup(function () {\n    cleanUpAndNext();\n  });\n  test('where a file-task prereq does not change with --always-make', function () {\n    let out;\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/from-src1.txt').toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\nfileTest:foo/from-src1.txt task', out);\n    out = exec('./node_modules/.bin/jake -q -B fileTest:foo/from-src1.txt').toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\nfileTest:foo/from-src1.txt task', out);\n    cleanUpAndNext();\n  });\n  test('concating two files', function () {\n    let out;\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/concat.txt').toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\ndefault task\\nfileTest:foo/src2.txt task\\n' + 'fileTest:foo/concat.txt task', out); // Check to see the two files got concat'd\n\n    let data = fs.readFileSync(process.cwd() + '/foo/concat.txt');\n    assert.equal('src1src2', data.toString());\n    cleanUpAndNext();\n  });\n  test('where a file-task prereq does not change', function () {\n    let out;\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/from-src1.txt').toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\nfileTest:foo/from-src1.txt task', out);\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/from-src1.txt').toString().trim(); // Second time should be a no-op\n\n    assert.equal('', out);\n    cleanUpAndNext();\n  });\n  test('where a file-task prereq does change, then does not', function (next) {\n    exec('mkdir -p ./foo');\n    exec('touch ./foo/from-src1.txt');\n    setTimeout(() => {\n      fs.writeFileSync('./foo/src1.txt', '-SRC'); // Task should run the first time\n\n      let out;\n      out = exec('./node_modules/.bin/jake -q fileTest:foo/from-src1.txt').toString().trim();\n      assert.equal('fileTest:foo/from-src1.txt task', out); // Task should not run on subsequent invocation\n\n      out = exec('./node_modules/.bin/jake -q fileTest:foo/from-src1.txt').toString().trim();\n      assert.equal('', out);\n      cleanUpAndNext(next);\n    }, 1000);\n  });\n  test('a preexisting file', function () {\n    let prereqData = 'howdy';\n    exec('mkdir -p ./foo');\n    fs.writeFileSync('foo/prereq.txt', prereqData);\n    let out;\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/from-prereq.txt').toString().trim();\n    assert.equal('fileTest:foo/from-prereq.txt task', out);\n    let data = fs.readFileSync(process.cwd() + '/foo/from-prereq.txt');\n    assert.equal(prereqData, data.toString());\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/from-prereq.txt').toString().trim(); // Second time should be a no-op\n\n    assert.equal('', out);\n    cleanUpAndNext();\n  });\n  test('a preexisting file with --always-make flag', function () {\n    let prereqData = 'howdy';\n    exec('mkdir -p ./foo');\n    fs.writeFileSync('foo/prereq.txt', prereqData);\n    let out;\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/from-prereq.txt').toString().trim();\n    assert.equal('fileTest:foo/from-prereq.txt task', out);\n    let data = fs.readFileSync(process.cwd() + '/foo/from-prereq.txt');\n    assert.equal(prereqData, data.toString());\n    out = exec('./node_modules/.bin/jake -q -B fileTest:foo/from-prereq.txt').toString().trim();\n    assert.equal('fileTest:foo/from-prereq.txt task', out);\n    cleanUpAndNext();\n  });\n  test('nested directory-task', function () {\n    exec('./node_modules/.bin/jake -q fileTest:foo/bar/baz/bamf.txt');\n    let data = fs.readFileSync(process.cwd() + '/foo/bar/baz/bamf.txt');\n    assert.equal('w00t', data);\n    cleanUpAndNext();\n  });\n});","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/jake/test/integration/file_task.js"],"names":["PROJECT_DIR","process","env","assert","require","fs","exec","execSync","rmRf","cleanUpAndNext","callback","silent","suite","timeout","setup","test","out","toString","trim","equal","data","readFileSync","cwd","next","setTimeout","writeFileSync","prereqData"],"mappings":"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","sourcesContent":["/*\n * Jake JavaScript build tool\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\nconst PROJECT_DIR = process.env.PROJECT_DIR;\n\nlet assert = require('assert');\nlet fs = require('fs');\nlet exec = require('child_process').execSync;\nlet { rmRf } = require(`${PROJECT_DIR}/lib/jake`);\n\nlet cleanUpAndNext = function (callback) {\n  rmRf('./foo', {\n    silent: true\n  });\n  callback && callback();\n};\n\nsuite('fileTask', function () {\n  this.timeout(7000);\n\n  setup(function () {\n    cleanUpAndNext();\n  });\n\n  test('where a file-task prereq does not change with --always-make', function () {\n    let out;\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/from-src1.txt').toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\nfileTest:foo/from-src1.txt task',\n      out);\n    out = exec('./node_modules/.bin/jake -q -B fileTest:foo/from-src1.txt').toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\nfileTest:foo/from-src1.txt task',\n      out);\n    cleanUpAndNext();\n  });\n\n  test('concating two files', function () {\n    let out;\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/concat.txt').toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\ndefault task\\nfileTest:foo/src2.txt task\\n' +\n          'fileTest:foo/concat.txt task', out);\n    // Check to see the two files got concat'd\n    let data = fs.readFileSync(process.cwd() + '/foo/concat.txt');\n    assert.equal('src1src2', data.toString());\n    cleanUpAndNext();\n  });\n\n  test('where a file-task prereq does not change', function () {\n    let out;\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/from-src1.txt').toString().trim();\n    assert.equal('fileTest:foo/src1.txt task\\nfileTest:foo/from-src1.txt task', out);\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/from-src1.txt').toString().trim();\n    // Second time should be a no-op\n    assert.equal('', out);\n    cleanUpAndNext();\n  });\n\n  test('where a file-task prereq does change, then does not', function (next) {\n    exec('mkdir -p ./foo');\n    exec('touch ./foo/from-src1.txt');\n    setTimeout(() => {\n      fs.writeFileSync('./foo/src1.txt', '-SRC');\n      // Task should run the first time\n      let out;\n      out = exec('./node_modules/.bin/jake -q fileTest:foo/from-src1.txt').toString().trim();\n      assert.equal('fileTest:foo/from-src1.txt task', out);\n      // Task should not run on subsequent invocation\n      out = exec('./node_modules/.bin/jake -q fileTest:foo/from-src1.txt').toString().trim();\n      assert.equal('', out);\n      cleanUpAndNext(next);\n    }, 1000);\n  });\n\n  test('a preexisting file', function () {\n    let prereqData = 'howdy';\n    exec('mkdir -p ./foo');\n    fs.writeFileSync('foo/prereq.txt', prereqData);\n    let out;\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/from-prereq.txt').toString().trim();\n    assert.equal('fileTest:foo/from-prereq.txt task', out);\n    let data = fs.readFileSync(process.cwd() + '/foo/from-prereq.txt');\n    assert.equal(prereqData, data.toString());\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/from-prereq.txt').toString().trim();\n    // Second time should be a no-op\n    assert.equal('', out);\n    cleanUpAndNext();\n  });\n\n  test('a preexisting file with --always-make flag', function () {\n    let prereqData = 'howdy';\n    exec('mkdir -p ./foo');\n    fs.writeFileSync('foo/prereq.txt', prereqData);\n    let out;\n    out = exec('./node_modules/.bin/jake -q fileTest:foo/from-prereq.txt').toString().trim();\n    assert.equal('fileTest:foo/from-prereq.txt task', out);\n    let data = fs.readFileSync(process.cwd() + '/foo/from-prereq.txt');\n    assert.equal(prereqData, data.toString());\n    out = exec('./node_modules/.bin/jake -q -B fileTest:foo/from-prereq.txt').toString().trim();\n    assert.equal('fileTest:foo/from-prereq.txt task', out);\n    cleanUpAndNext();\n  });\n\n  test('nested directory-task', function () {\n    exec('./node_modules/.bin/jake -q fileTest:foo/bar/baz/bamf.txt');\n    let data = fs.readFileSync(process.cwd() + '/foo/bar/baz/bamf.txt');\n    assert.equal('w00t', data);\n    cleanUpAndNext();\n  });\n\n});\n\n"]},"metadata":{},"sourceType":"module"}