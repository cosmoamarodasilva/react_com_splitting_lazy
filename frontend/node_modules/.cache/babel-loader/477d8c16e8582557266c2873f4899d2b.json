{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import {Primitive} from './basic';\n\n/**\nConvert `object`s, `Map`s, `Set`s, and `Array`s and all of their keys/elements into immutable structures recursively.\n\nThis is useful when a deeply nested structure needs to be exposed as completely immutable, for example, an imported JSON module or when receiving an API response that is passed around.\n\nPlease upvote [this issue](https://github.com/microsoft/TypeScript/issues/13923) if you want to have this type as a built-in in TypeScript.\n\n@example\n```\n// data.json\n{\n\t\"foo\": [\"bar\"]\n}\n\n// main.ts\nimport {ReadonlyDeep} from 'type-fest';\nimport dataJson = require('./data.json');\n\nconst data: ReadonlyDeep<typeof dataJson> = dataJson;\n\nexport default data;\n\n// test.ts\nimport data from './main';\n\ndata.foo.push('bar');\n//=> error TS2339: Property 'push' does not exist on type 'readonly string[]'\n```\n*/\nexport type ReadonlyDeep<T> = T extends Primitive | ((...arguments: any[]) => unknown)\n\t? T\n\t: T extends ReadonlyMap<infer KeyType, infer ValueType>\n\t? ReadonlyMapDeep<KeyType, ValueType>\n\t: T extends ReadonlySet<infer ItemType>\n\t? ReadonlySetDeep<ItemType>\n\t: T extends object\n\t? ReadonlyObjectDeep<T>\n\t: unknown;\n\n/**\nSame as `ReadonlyDeep`, but accepts only `ReadonlyMap`s as inputs. Internal helper for `ReadonlyDeep`.\n*/\ninterface ReadonlyMapDeep<KeyType, ValueType>\n\textends ReadonlyMap<ReadonlyDeep<KeyType>, ReadonlyDeep<ValueType>> {}\n\n/**\nSame as `ReadonlyDeep`, but accepts only `ReadonlySet`s as inputs. Internal helper for `ReadonlyDeep`.\n*/\ninterface ReadonlySetDeep<ItemType>\n\textends ReadonlySet<ReadonlyDeep<ItemType>> {}\n\n/**\nSame as `ReadonlyDeep`, but accepts only `object`s as inputs. Internal helper for `ReadonlyDeep`.\n*/\ntype ReadonlyObjectDeep<ObjectType extends object> = {\n\treadonly [KeyType in keyof ObjectType]: ReadonlyDeep<ObjectType[KeyType]>\n};\n"]},"metadata":{},"sourceType":"module"}