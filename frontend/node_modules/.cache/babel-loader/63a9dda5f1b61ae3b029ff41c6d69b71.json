{"ast":null,"code":"'use strict';\n\nconst Types = require('../constants/types.js');\n\nconst Charsets = require('../constants/charsets.js');\n\nconst helpers = require('../helpers');\n\nconst genFunc = require('generate-function');\n\nconst parserCache = require('./parser_cache.js');\n\nconst typeNames = [];\n\nfor (const t in Types) {\n  typeNames[Types[t]] = t;\n}\n\nfunction readCodeFor(type, charset, encodingExpr, config, options) {\n  const supportBigNumbers = options.supportBigNumbers || config.supportBigNumbers;\n  const bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;\n  const timezone = options.timezone || config.timezone;\n  const dateStrings = options.dateStrings || config.dateStrings;\n\n  switch (type) {\n    case Types.TINY:\n    case Types.SHORT:\n    case Types.LONG:\n    case Types.INT24:\n    case Types.YEAR:\n      return 'packet.parseLengthCodedIntNoBigCheck()';\n\n    case Types.LONGLONG:\n      if (supportBigNumbers && bigNumberStrings) {\n        return 'packet.parseLengthCodedIntString()';\n      }\n\n      return `packet.parseLengthCodedInt(${supportBigNumbers})`;\n\n    case Types.FLOAT:\n    case Types.DOUBLE:\n      return 'packet.parseLengthCodedFloat()';\n\n    case Types.NULL:\n      return 'packet.readLengthCodedNumber()';\n\n    case Types.DECIMAL:\n    case Types.NEWDECIMAL:\n      if (config.decimalNumbers) {\n        return 'packet.parseLengthCodedFloat()';\n      }\n\n      return 'packet.readLengthCodedString(\"ascii\")';\n\n    case Types.DATE:\n      if (helpers.typeMatch(type, dateStrings, Types)) {\n        return 'packet.readLengthCodedString(\"ascii\")';\n      }\n\n      return `packet.parseDate('${timezone}')`;\n\n    case Types.DATETIME:\n    case Types.TIMESTAMP:\n      if (helpers.typeMatch(type, dateStrings, Types)) {\n        return 'packet.readLengthCodedString(\"ascii\")';\n      }\n\n      return `packet.parseDateTime('${timezone}')`;\n\n    case Types.TIME:\n      return 'packet.readLengthCodedString(\"ascii\")';\n\n    case Types.GEOMETRY:\n      return 'packet.parseGeometryValue()';\n\n    case Types.JSON:\n      // Since for JSON columns mysql always returns charset 63 (BINARY),\n      // we have to handle it according to JSON specs and use \"utf8\",\n      // see https://github.com/sidorares/node-mysql2/issues/409\n      return 'JSON.parse(packet.readLengthCodedString(\"utf8\"))';\n\n    default:\n      if (charset === Charsets.BINARY) {\n        return 'packet.readLengthCodedBuffer()';\n      }\n\n      return `packet.readLengthCodedString(${encodingExpr})`;\n  }\n}\n\nfunction compile(fields, options, config) {\n  // node-mysql typeCast compatibility wrapper\n  // see https://github.com/mysqljs/mysql/blob/96fdd0566b654436624e2375c7b6604b1f50f825/lib/protocol/packets/Field.js\n  function wrap(field, type, packet, encoding) {\n    return {\n      type: type,\n      length: field.columnLength,\n      db: field.schema,\n      table: field.table,\n      name: field.name,\n      string: function () {\n        return packet.readLengthCodedString(encoding);\n      },\n      buffer: function () {\n        return packet.readLengthCodedBuffer();\n      },\n      geometry: function () {\n        return packet.parseGeometryValue();\n      }\n    };\n  } // use global typeCast if current query doesn't specify one\n\n\n  if (typeof config.typeCast === 'function' && typeof options.typeCast !== 'function') {\n    options.typeCast = config.typeCast;\n  }\n\n  const parserFn = genFunc();\n  let i = 0;\n  /* eslint-disable no-trailing-spaces */\n\n  /* eslint-disable no-spaced-func */\n\n  /* eslint-disable no-unexpected-multiline */\n\n  parserFn('(function () {')('return function TextRow(packet, fields, options, CharsetToEncoding) {');\n\n  if (options.rowsAsArray) {\n    parserFn(`const result = new Array(${fields.length})`);\n  }\n\n  if (typeof options.typeCast === 'function') {\n    parserFn(`const wrap = ${wrap.toString()}`);\n  }\n\n  const resultTables = {};\n  let resultTablesArray = [];\n\n  if (options.nestTables === true) {\n    for (i = 0; i < fields.length; i++) {\n      resultTables[fields[i].table] = 1;\n    }\n\n    resultTablesArray = Object.keys(resultTables);\n\n    for (i = 0; i < resultTablesArray.length; i++) {\n      parserFn(`this[${helpers.srcEscape(resultTablesArray[i])}] = {};`);\n    }\n  }\n\n  let lvalue = '';\n  let fieldName = '';\n\n  for (i = 0; i < fields.length; i++) {\n    fieldName = helpers.srcEscape(fields[i].name);\n    parserFn(`// ${fieldName}: ${typeNames[fields[i].columnType]}`);\n\n    if (typeof options.nestTables === 'string') {\n      lvalue = `this[${helpers.srcEscape(fields[i].table + options.nestTables + fields[i].name)}]`;\n    } else if (options.nestTables === true) {\n      lvalue = `this[${helpers.srcEscape(fields[i].table)}][${fieldName}]`;\n    } else if (options.rowsAsArray) {\n      lvalue = `result[${i.toString(10)}]`;\n    } else {\n      lvalue = `this[${fieldName}]`;\n    }\n\n    const encodingExpr = `CharsetToEncoding[fields[${i}].characterSet]`;\n    const readCode = readCodeFor(fields[i].columnType, fields[i].characterSet, encodingExpr, config, options);\n\n    if (typeof options.typeCast === 'function') {\n      parserFn(`${lvalue} = options.typeCast(wrap(fields[${i}], ${helpers.srcEscape(typeNames[fields[i].columnType])}, packet, ${encodingExpr}), function() { return ${readCode};})`);\n    } else if (options.typeCast === false) {\n      parserFn(`${lvalue} = packet.readLengthCodedBuffer();`);\n    } else {\n      parserFn(`${lvalue} = ${readCode};`);\n    }\n  }\n\n  if (options.rowsAsArray) {\n    parserFn('return result;');\n  }\n\n  parserFn('};')('})()');\n  /* eslint-enable no-trailing-spaces */\n\n  /* eslint-enable no-spaced-func */\n\n  /* eslint-enable no-unexpected-multiline */\n\n  if (config.debug) {\n    helpers.printDebugWithCode('Compiled text protocol row parser', parserFn.toString());\n  }\n\n  return parserFn.toFunction();\n}\n\nfunction getTextParser(fields, options, config) {\n  return parserCache.getParser('text', fields, options, config, compile);\n}\n\nmodule.exports = getTextParser;","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/mysql2/lib/parsers/text_parser.js"],"names":["Types","require","Charsets","helpers","genFunc","parserCache","typeNames","t","readCodeFor","type","charset","encodingExpr","config","options","supportBigNumbers","bigNumberStrings","timezone","dateStrings","TINY","SHORT","LONG","INT24","YEAR","LONGLONG","FLOAT","DOUBLE","NULL","DECIMAL","NEWDECIMAL","decimalNumbers","DATE","typeMatch","DATETIME","TIMESTAMP","TIME","GEOMETRY","JSON","BINARY","compile","fields","wrap","field","packet","encoding","length","columnLength","db","schema","table","name","string","readLengthCodedString","buffer","readLengthCodedBuffer","geometry","parseGeometryValue","typeCast","parserFn","i","rowsAsArray","toString","resultTables","resultTablesArray","nestTables","Object","keys","srcEscape","lvalue","fieldName","columnType","readCode","characterSet","debug","printDebugWithCode","toFunction","getTextParser","getParser","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Types = require('../constants/types.js');\nconst Charsets = require('../constants/charsets.js');\nconst helpers = require('../helpers');\nconst genFunc = require('generate-function');\nconst parserCache = require('./parser_cache.js');\n\nconst typeNames = [];\nfor (const t in Types) {\n  typeNames[Types[t]] = t;\n}\n\nfunction readCodeFor(type, charset, encodingExpr, config, options) {\n  const supportBigNumbers =\n    options.supportBigNumbers || config.supportBigNumbers;\n  const bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;\n  const timezone = options.timezone || config.timezone;\n  const dateStrings = options.dateStrings || config.dateStrings;\n\n  switch (type) {\n    case Types.TINY:\n    case Types.SHORT:\n    case Types.LONG:\n    case Types.INT24:\n    case Types.YEAR:\n      return 'packet.parseLengthCodedIntNoBigCheck()';\n    case Types.LONGLONG:\n      if (supportBigNumbers && bigNumberStrings) {\n        return 'packet.parseLengthCodedIntString()';\n      }\n      return `packet.parseLengthCodedInt(${supportBigNumbers})`;\n    case Types.FLOAT:\n    case Types.DOUBLE:\n      return 'packet.parseLengthCodedFloat()';\n    case Types.NULL:\n      return 'packet.readLengthCodedNumber()';\n    case Types.DECIMAL:\n    case Types.NEWDECIMAL:\n      if (config.decimalNumbers) {\n        return 'packet.parseLengthCodedFloat()';\n      }\n      return 'packet.readLengthCodedString(\"ascii\")';\n    case Types.DATE:\n      if (helpers.typeMatch(type, dateStrings, Types)) {\n        return 'packet.readLengthCodedString(\"ascii\")';\n      }\n      return `packet.parseDate('${timezone}')`;\n    case Types.DATETIME:\n    case Types.TIMESTAMP:\n      if (helpers.typeMatch(type, dateStrings, Types)) {\n        return 'packet.readLengthCodedString(\"ascii\")';\n      }\n      return `packet.parseDateTime('${timezone}')`;\n    case Types.TIME:\n      return 'packet.readLengthCodedString(\"ascii\")';\n    case Types.GEOMETRY:\n      return 'packet.parseGeometryValue()';\n    case Types.JSON:\n      // Since for JSON columns mysql always returns charset 63 (BINARY),\n      // we have to handle it according to JSON specs and use \"utf8\",\n      // see https://github.com/sidorares/node-mysql2/issues/409\n      return 'JSON.parse(packet.readLengthCodedString(\"utf8\"))';\n    default:\n      if (charset === Charsets.BINARY) {\n        return 'packet.readLengthCodedBuffer()';\n      }\n      return `packet.readLengthCodedString(${encodingExpr})`;\n  }\n}\n\nfunction compile(fields, options, config) {\n  // node-mysql typeCast compatibility wrapper\n  // see https://github.com/mysqljs/mysql/blob/96fdd0566b654436624e2375c7b6604b1f50f825/lib/protocol/packets/Field.js\n  function wrap(field, type, packet, encoding) {\n    return {\n      type: type,\n      length: field.columnLength,\n      db: field.schema,\n      table: field.table,\n      name: field.name,\n      string: function() {\n        return packet.readLengthCodedString(encoding);\n      },\n      buffer: function() {\n        return packet.readLengthCodedBuffer();\n      },\n      geometry: function() {\n        return packet.parseGeometryValue();\n      }\n    };\n  }\n\n  // use global typeCast if current query doesn't specify one\n  if (\n    typeof config.typeCast === 'function' &&\n    typeof options.typeCast !== 'function'\n  ) {\n    options.typeCast = config.typeCast;\n  }\n\n  const parserFn = genFunc();\n  let i = 0;\n\n  /* eslint-disable no-trailing-spaces */\n  /* eslint-disable no-spaced-func */\n  /* eslint-disable no-unexpected-multiline */\n  parserFn('(function () {')(\n    'return function TextRow(packet, fields, options, CharsetToEncoding) {'\n  );\n\n  if (options.rowsAsArray) {\n    parserFn(`const result = new Array(${fields.length})`);\n  }\n\n  if (typeof options.typeCast === 'function') {\n    parserFn(`const wrap = ${wrap.toString()}`);\n  }\n\n  const resultTables = {};\n  let resultTablesArray = [];\n\n  if (options.nestTables === true) {\n    for (i = 0; i < fields.length; i++) {\n      resultTables[fields[i].table] = 1;\n    }\n    resultTablesArray = Object.keys(resultTables);\n    for (i = 0; i < resultTablesArray.length; i++) {\n      parserFn(`this[${helpers.srcEscape(resultTablesArray[i])}] = {};`);\n    }\n  }\n\n  let lvalue = '';\n  let fieldName = '';\n  for (i = 0; i < fields.length; i++) {\n    fieldName = helpers.srcEscape(fields[i].name);\n    parserFn(`// ${fieldName}: ${typeNames[fields[i].columnType]}`);\n    if (typeof options.nestTables === 'string') {\n      lvalue = `this[${helpers.srcEscape(\n        fields[i].table + options.nestTables + fields[i].name\n      )}]`;\n    } else if (options.nestTables === true) {\n      lvalue = `this[${helpers.srcEscape(fields[i].table)}][${fieldName}]`;\n    } else if (options.rowsAsArray) {\n      lvalue = `result[${i.toString(10)}]`;\n    } else {\n      lvalue = `this[${fieldName}]`;\n    }\n    const encodingExpr = `CharsetToEncoding[fields[${i}].characterSet]`;\n    const readCode = readCodeFor(\n      fields[i].columnType,\n      fields[i].characterSet,\n      encodingExpr,\n      config,\n      options\n    );\n    if (typeof options.typeCast === 'function') {\n      parserFn(\n        `${lvalue} = options.typeCast(wrap(fields[${i}], ${helpers.srcEscape(\n          typeNames[fields[i].columnType]\n        )}, packet, ${encodingExpr}), function() { return ${readCode};})`\n      );\n    } else if (options.typeCast === false) {\n      parserFn(`${lvalue} = packet.readLengthCodedBuffer();`);\n    } else {\n      parserFn(`${lvalue} = ${readCode};`);\n    }\n  }\n\n  if (options.rowsAsArray) {\n    parserFn('return result;');\n  }\n\n  parserFn('};')('})()');\n\n  /* eslint-enable no-trailing-spaces */\n  /* eslint-enable no-spaced-func */\n  /* eslint-enable no-unexpected-multiline */\n\n  if (config.debug) {\n    helpers.printDebugWithCode(\n      'Compiled text protocol row parser',\n      parserFn.toString()\n    );\n  }\n  return parserFn.toFunction();\n}\n\nfunction getTextParser(fields, options, config) {\n  return parserCache.getParser('text', fields, options, config, compile);\n}\n\nmodule.exports = getTextParser;\n"]},"metadata":{},"sourceType":"module"}