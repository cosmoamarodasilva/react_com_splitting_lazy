{"ast":null,"code":"var seed = Math.random();\nvar n = 'rc' + seed;\nvar N = 'RC' + seed;\n\nvar assert = require('assert'); // Basic usage\n\n\nprocess.env[n + '_someOpt__a'] = 42;\nprocess.env[n + '_someOpt__x__'] = 99;\nprocess.env[n + '_someOpt__a__b'] = 186;\nprocess.env[n + '_someOpt__a__b__c'] = 243;\nprocess.env[n + '_someOpt__x__y'] = 1862;\nprocess.env[n + '_someOpt__z'] = 186577; // Should ignore empty strings from orphaned '__'\n\nprocess.env[n + '_someOpt__z__x__'] = 18629;\nprocess.env[n + '_someOpt__w__w__'] = 18629; // Leading '__' should ignore everything up to 'z'\n\nprocess.env[n + '___z__i__'] = 9999; // should ignore case for config name section.\n\nprocess.env[N + '_test_upperCase'] = 187;\n\nfunction testPrefix(prefix) {\n  var config = require('../')(prefix, {\n    option: true\n  });\n\n  console.log('\\n\\n------ nested-env-vars ------\\n', {\n    prefix: prefix\n  }, '\\n', config);\n  assert.equal(config.option, true);\n  assert.equal(config.someOpt.a, 42);\n  assert.equal(config.someOpt.x, 99); // Should not override `a` once it's been set\n\n  assert.equal(config.someOpt.a\n  /*.b*/\n  , 42); // Should not override `x` once it's been set\n\n  assert.equal(config.someOpt.x\n  /*.y*/\n  , 99);\n  assert.equal(config.someOpt.z, 186577); // Should not override `z` once it's been set\n\n  assert.equal(config.someOpt.z\n  /*.x*/\n  , 186577);\n  assert.equal(config.someOpt.w.w, 18629);\n  assert.equal(config.z.i, 9999);\n  assert.equal(config.test_upperCase, 187);\n}\n\ntestPrefix(n);\ntestPrefix(N);","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/rc/test/nested-env-vars.js"],"names":["seed","Math","random","n","N","assert","require","process","env","testPrefix","prefix","config","option","console","log","equal","someOpt","a","x","z","w","i","test_upperCase"],"mappings":"AACA,IAAIA,IAAI,GAAGC,IAAI,CAACC,MAAL,EAAX;AACA,IAAIC,CAAC,GAAG,OAAMH,IAAd;AACA,IAAII,CAAC,GAAG,OAAMJ,IAAd;;AACA,IAAIK,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB,C,CAGA;;;AACAC,OAAO,CAACC,GAAR,CAAYL,CAAC,GAAC,aAAd,IAA+B,EAA/B;AACAI,OAAO,CAACC,GAAR,CAAYL,CAAC,GAAC,eAAd,IAAiC,EAAjC;AACAI,OAAO,CAACC,GAAR,CAAYL,CAAC,GAAC,gBAAd,IAAkC,GAAlC;AACAI,OAAO,CAACC,GAAR,CAAYL,CAAC,GAAC,mBAAd,IAAqC,GAArC;AACAI,OAAO,CAACC,GAAR,CAAYL,CAAC,GAAC,gBAAd,IAAkC,IAAlC;AACAI,OAAO,CAACC,GAAR,CAAYL,CAAC,GAAC,aAAd,IAA+B,MAA/B,C,CAEA;;AACAI,OAAO,CAACC,GAAR,CAAYL,CAAC,GAAC,kBAAd,IAAoC,KAApC;AACAI,OAAO,CAACC,GAAR,CAAYL,CAAC,GAAC,kBAAd,IAAoC,KAApC,C,CAEA;;AACAI,OAAO,CAACC,GAAR,CAAYL,CAAC,GAAC,WAAd,IAA6B,IAA7B,C,CAEA;;AACAI,OAAO,CAACC,GAAR,CAAYJ,CAAC,GAAC,iBAAd,IAAmC,GAAnC;;AAEA,SAASK,UAAT,CAAoBC,MAApB,EAA4B;AAC3B,MAAIC,MAAM,GAAGL,OAAO,CAAC,KAAD,CAAP,CAAeI,MAAf,EAAuB;AAClCE,IAAAA,MAAM,EAAE;AAD0B,GAAvB,CAAb;;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAkD;AAACJ,IAAAA,MAAM,EAAEA;AAAT,GAAlD,EAAoE,IAApE,EAA0EC,MAA1E;AAEAN,EAAAA,MAAM,CAACU,KAAP,CAAaJ,MAAM,CAACC,MAApB,EAA4B,IAA5B;AACAP,EAAAA,MAAM,CAACU,KAAP,CAAaJ,MAAM,CAACK,OAAP,CAAeC,CAA5B,EAA+B,EAA/B;AACAZ,EAAAA,MAAM,CAACU,KAAP,CAAaJ,MAAM,CAACK,OAAP,CAAeE,CAA5B,EAA+B,EAA/B,EAT2B,CAU3B;;AACAb,EAAAA,MAAM,CAACU,KAAP,CAAaJ,MAAM,CAACK,OAAP,CAAeC;AAAC;AAA7B,IAAqC,EAArC,EAX2B,CAY3B;;AACAZ,EAAAA,MAAM,CAACU,KAAP,CAAaJ,MAAM,CAACK,OAAP,CAAeE;AAAC;AAA7B,IAAqC,EAArC;AACAb,EAAAA,MAAM,CAACU,KAAP,CAAaJ,MAAM,CAACK,OAAP,CAAeG,CAA5B,EAA+B,MAA/B,EAd2B,CAe3B;;AACAd,EAAAA,MAAM,CAACU,KAAP,CAAaJ,MAAM,CAACK,OAAP,CAAeG;AAAC;AAA7B,IAAqC,MAArC;AACAd,EAAAA,MAAM,CAACU,KAAP,CAAaJ,MAAM,CAACK,OAAP,CAAeI,CAAf,CAAiBA,CAA9B,EAAiC,KAAjC;AACAf,EAAAA,MAAM,CAACU,KAAP,CAAaJ,MAAM,CAACQ,CAAP,CAASE,CAAtB,EAAyB,IAAzB;AAEAhB,EAAAA,MAAM,CAACU,KAAP,CAAaJ,MAAM,CAACW,cAApB,EAAoC,GAApC;AACA;;AAEDb,UAAU,CAACN,CAAD,CAAV;AACAM,UAAU,CAACL,CAAD,CAAV","sourcesContent":["\nvar seed = Math.random();\nvar n = 'rc'+ seed;\nvar N = 'RC'+ seed;\nvar assert = require('assert')\n\n\n// Basic usage\nprocess.env[n+'_someOpt__a'] = 42\nprocess.env[n+'_someOpt__x__'] = 99\nprocess.env[n+'_someOpt__a__b'] = 186\nprocess.env[n+'_someOpt__a__b__c'] = 243\nprocess.env[n+'_someOpt__x__y'] = 1862\nprocess.env[n+'_someOpt__z'] = 186577\n\n// Should ignore empty strings from orphaned '__'\nprocess.env[n+'_someOpt__z__x__'] = 18629\nprocess.env[n+'_someOpt__w__w__'] = 18629\n\n// Leading '__' should ignore everything up to 'z'\nprocess.env[n+'___z__i__'] = 9999\n\n// should ignore case for config name section.\nprocess.env[N+'_test_upperCase'] = 187\n\nfunction testPrefix(prefix) {\n\tvar config = require('../')(prefix, {\n\t  option: true\n\t})\n\n\tconsole.log('\\n\\n------ nested-env-vars ------\\n',{prefix: prefix}, '\\n', config);\n\n\tassert.equal(config.option, true)\n\tassert.equal(config.someOpt.a, 42)\n\tassert.equal(config.someOpt.x, 99)\n\t// Should not override `a` once it's been set\n\tassert.equal(config.someOpt.a/*.b*/, 42)\n\t// Should not override `x` once it's been set\n\tassert.equal(config.someOpt.x/*.y*/, 99)\n\tassert.equal(config.someOpt.z, 186577)\n\t// Should not override `z` once it's been set\n\tassert.equal(config.someOpt.z/*.x*/, 186577)\n\tassert.equal(config.someOpt.w.w, 18629)\n\tassert.equal(config.z.i, 9999)\n\n\tassert.equal(config.test_upperCase, 187)\n}\n\ntestPrefix(n);\ntestPrefix(N);\n"]},"metadata":{},"sourceType":"module"}