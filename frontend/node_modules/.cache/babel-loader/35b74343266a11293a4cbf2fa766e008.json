{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["/**\nCreate an opaque type, which hides its internal details from the public, and can only be created by being used explicitly.\n\nThe generic type parameter can be anything. It doesn't have to be an object.\n\n[Read more about opaque types.](https://codemix.com/opaque-types-in-javascript/)\n\nThere have been several discussions about adding this feature to TypeScript via the `opaque type` operator, similar to how Flow does it. Unfortunately, nothing has (yet) moved forward:\n\t- [Microsoft/TypeScript#15408](https://github.com/Microsoft/TypeScript/issues/15408)\n\t- [Microsoft/TypeScript#15807](https://github.com/Microsoft/TypeScript/issues/15807)\n\n@example\n```\nimport {Opaque} from 'type-fest';\n\ntype AccountNumber = Opaque<number>;\ntype AccountBalance = Opaque<number>;\n\nfunction createAccountNumber(): AccountNumber {\n\treturn 2 as AccountNumber;\n}\n\nfunction getMoneyForAccount(accountNumber: AccountNumber): AccountBalance {\n\treturn 4 as AccountBalance;\n}\n\n// This will compile successfully.\ngetMoneyForAccount(createAccountNumber());\n\n// But this won't, because it has to be explicitly passed as an `AccountNumber` type.\ngetMoneyForAccount(2);\n\n// You can use opaque values like they aren't opaque too.\nconst accountNumber = createAccountNumber();\n\n// This will compile successfully.\naccountNumber + 2;\n```\n*/\nexport type Opaque<Type> = Type & {readonly __opaque__: unique symbol};\n"]},"metadata":{},"sourceType":"module"}