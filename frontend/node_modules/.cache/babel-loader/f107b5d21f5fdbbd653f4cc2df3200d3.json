{"ast":null,"code":"export * from './typings/mysql';","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/mysql2/index.d.ts"],"names":[],"mappings":"AAOA,cAAc,iBAAd","sourcesContent":["import {\n  Connection as PromiseConnection,\n  Pool as PromisePool,\n  PoolConnection as PromisePoolConnection\n} from './promise';\n\nimport * as mysql from './typings/mysql';\nexport * from './typings/mysql';\n\nexport interface Connection extends mysql.Connection {\n  execute<\n    T extends\n      | mysql.RowDataPacket[][]\n      | mysql.RowDataPacket[]\n      | mysql.OkPacket\n      | mysql.OkPacket[]\n      | mysql.ResultSetHeader\n  >(\n    sql: string,\n    callback?: (\n      err: mysql.QueryError | null,\n      result: T,\n      fields: mysql.FieldPacket[]\n    ) => any\n  ): mysql.Query;\n  execute<\n    T extends\n      | mysql.RowDataPacket[][]\n      | mysql.RowDataPacket[]\n      | mysql.OkPacket\n      | mysql.OkPacket[]\n      | mysql.ResultSetHeader\n  >(\n    sql: string,\n    values: any | any[] | { [param: string]: any },\n    callback?: (\n      err: mysql.QueryError | null,\n      result: T,\n      fields: mysql.FieldPacket[]\n    ) => any\n  ): mysql.Query;\n  execute<\n    T extends\n      | mysql.RowDataPacket[][]\n      | mysql.RowDataPacket[]\n      | mysql.OkPacket\n      | mysql.OkPacket[]\n      | mysql.ResultSetHeader\n  >(\n    options: mysql.QueryOptions,\n    callback?: (\n      err: mysql.QueryError | null,\n      result: T,\n      fields?: mysql.FieldPacket[]\n    ) => any\n  ): mysql.Query;\n  execute<\n    T extends\n      | mysql.RowDataPacket[][]\n      | mysql.RowDataPacket[]\n      | mysql.OkPacket\n      | mysql.OkPacket[]\n      | mysql.ResultSetHeader\n  >(\n    options: mysql.QueryOptions,\n    values: any | any[] | { [param: string]: any },\n    callback?: (\n      err: mysql.QueryError | null,\n      result: T,\n      fields: mysql.FieldPacket[]\n    ) => any\n  ): mysql.Query;\n  ping(callback?: (err: mysql.QueryError | null) => any): void;\n  promise(promiseImpl?: PromiseConstructor): PromiseConnection;\n}\n\nexport interface PoolConnection extends mysql.PoolConnection, Connection {\n  promise(promiseImpl?: PromiseConstructor): PromisePoolConnection;\n}\n\nexport interface Pool extends mysql.Connection {\n  execute<\n    T extends\n      | mysql.RowDataPacket[][]\n      | mysql.RowDataPacket[]\n      | mysql.OkPacket\n      | mysql.OkPacket[]\n      | mysql.ResultSetHeader\n  >(\n    sql: string,\n    callback?: (\n      err: mysql.QueryError | null,\n      result: T,\n      fields: mysql.FieldPacket[]\n    ) => any\n  ): mysql.Query;\n  execute<\n    T extends\n      | mysql.RowDataPacket[][]\n      | mysql.RowDataPacket[]\n      | mysql.OkPacket\n      | mysql.OkPacket[]\n      | mysql.ResultSetHeader\n  >(\n    sql: string,\n    values: any | any[] | { [param: string]: any },\n    callback?: (\n      err: mysql.QueryError | null,\n      result: T,\n      fields: mysql.FieldPacket[]\n    ) => any\n  ): mysql.Query;\n  execute<\n    T extends\n      | mysql.RowDataPacket[][]\n      | mysql.RowDataPacket[]\n      | mysql.OkPacket\n      | mysql.OkPacket[]\n      | mysql.ResultSetHeader\n  >(\n    options: mysql.QueryOptions,\n    callback?: (\n      err: mysql.QueryError | null,\n      result: T,\n      fields?: mysql.FieldPacket[]\n    ) => any\n  ): mysql.Query;\n  execute<\n    T extends\n      | mysql.RowDataPacket[][]\n      | mysql.RowDataPacket[]\n      | mysql.OkPacket\n      | mysql.OkPacket[]\n      | mysql.ResultSetHeader\n  >(\n    options: mysql.QueryOptions,\n    values: any | any[] | { [param: string]: any },\n    callback?: (\n      err: mysql.QueryError | null,\n      result: T,\n      fields: mysql.FieldPacket[]\n    ) => any\n  ): mysql.Query;\n  getConnection(\n    callback: (err: NodeJS.ErrnoException, connection: PoolConnection) => any\n  ): void;\n  on(event: 'connection', listener: (connection: PoolConnection) => any): this;\n  on(event: 'acquire', listener: (connection: PoolConnection) => any): this;\n  on(event: 'release', listener: (connection: PoolConnection) => any): this;\n  on(event: 'enqueue', listener: () => any): this;\n  promise(promiseImpl?: PromiseConstructor): PromisePool;\n}\n\ntype authPlugins =\n    (pluginMetadata: { connection: Connection; command: string }) =>\n        (pluginData: Buffer) => Promise<string>;\n\nexport interface ConnectionOptions extends mysql.ConnectionOptions {\n  charsetNumber?: number;\n  compress?: boolean;\n  authSwitchHandler?: (data: any, callback: () => void) => any;\n  connectAttributes?: { [param: string]: any };\n  decimalNumbers?: boolean;\n  isServer?: boolean;\n  maxPreparedStatements?: number;\n  namedPlaceholders?: boolean;\n  nestTables?: boolean | string;\n  passwordSha1?: string;\n  pool?: any;\n  rowsAsArray?: boolean;\n  stream?: any;\n  uri?: string;\n  connectionLimit?: number;\n  Promise?: any;\n  queueLimit?: number;\n  waitForConnections?: boolean;\n  authPlugins?: {\n      [key: string]: authPlugins;\n  };\n}\n\nexport interface PoolOptions extends mysql.PoolOptions, ConnectionOptions {}\n\nexport function createConnection(connectionUri: string): Connection;\nexport function createConnection(config: ConnectionOptions): Connection;\nexport function createPool(config: PoolOptions): Pool;\n"]},"metadata":{},"sourceType":"module"}