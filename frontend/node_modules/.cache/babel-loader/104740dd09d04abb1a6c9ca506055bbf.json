{"ast":null,"code":"let assert = require('assert');\n\nlet h = require('./helpers');\n\nlet exec = require('child_process').execSync;\n\nsuite('taskBase', function () {\n  this.timeout(7000);\n  test('default task', function () {\n    let out;\n    out = exec('./node_modules/.bin/jake -q').toString().trim();\n    assert.equal(out, 'default task');\n    out = exec('./node_modules/.bin/jake -q default').toString().trim();\n    assert.equal(out, 'default task');\n  });\n  test('task with no action', function () {\n    let out = exec('./node_modules/.bin/jake -q noAction').toString().trim();\n    assert.equal(out, 'default task');\n  });\n  test('a task with no action and no prereqs', function () {\n    exec('./node_modules/.bin/jake noActionNoPrereqs');\n  });\n  test('a task that exists at the top-level, and not in the specified namespace, should error', function () {\n    let res = require('child_process').spawnSync('./node_modules/.bin/jake', ['asdfasdfasdf:zerbofrangazoomy']);\n\n    let err = res.stderr.toString();\n    assert.ok(err.indexOf('Unknown task' > -1));\n  });\n  test('passing args to a task', function () {\n    let out = exec('./node_modules/.bin/jake -q argsEnvVars[foo,bar]').toString().trim();\n    let parsed = h.parse(out);\n    let args = parsed.args;\n    assert.equal(args[0], 'foo');\n    assert.equal(args[1], 'bar');\n  });\n  test('a task with environment vars', function () {\n    let out = exec('./node_modules/.bin/jake -q argsEnvVars foo=bar baz=qux').toString().trim();\n    let parsed = h.parse(out);\n    let env = parsed.env;\n    assert.equal(env.foo, 'bar');\n    assert.equal(env.baz, 'qux');\n  });\n  test('passing args and using environment vars', function () {\n    let out = exec('./node_modules/.bin/jake -q argsEnvVars[foo,bar] foo=bar baz=qux').toString().trim();\n    let parsed = h.parse(out);\n    let args = parsed.args;\n    let env = parsed.env;\n    assert.equal(args[0], 'foo');\n    assert.equal(args[1], 'bar');\n    assert.equal(env.foo, 'bar');\n    assert.equal(env.baz, 'qux');\n  });\n  test('a simple prereq', function () {\n    let out = exec('./node_modules/.bin/jake -q foo:baz').toString().trim();\n    assert.equal(out, 'foo:bar task\\nfoo:baz task');\n  });\n  test('a duplicate prereq only runs once', function () {\n    let out = exec('./node_modules/.bin/jake -q foo:asdf').toString().trim();\n    assert.equal(out, 'foo:bar task\\nfoo:baz task\\nfoo:asdf task');\n  });\n  test('a prereq with command-line args', function () {\n    let out = exec('./node_modules/.bin/jake -q foo:qux').toString().trim();\n    assert.equal(out, 'foo:bar[asdf,qwer] task\\nfoo:qux task');\n  });\n  test('a prereq with args via invoke', function () {\n    let out = exec('./node_modules/.bin/jake -q foo:frang[zxcv,uiop]').toString().trim();\n    assert.equal(out, 'foo:bar[zxcv,uiop] task\\nfoo:frang task');\n  });\n  test('a prereq with args via execute', function () {\n    let out = exec('./node_modules/.bin/jake -q foo:zerb[zxcv,uiop]').toString().trim();\n    assert.equal(out, 'foo:bar[zxcv,uiop] task\\nfoo:zerb task');\n  });\n  test('repeating the task via execute', function () {\n    let out = exec('./node_modules/.bin/jake -q foo:voom').toString().trim();\n    assert.equal(out, 'foo:bar task\\nfoo:bar task\\ncomplete\\ncomplete');\n  });\n  test('prereq execution-order', function () {\n    let out = exec('./node_modules/.bin/jake -q hoge:fuga').toString().trim();\n    assert.equal(out, 'hoge:hoge task\\nhoge:piyo task\\nhoge:fuga task');\n  });\n  test('basic async task', function () {\n    let out = exec('./node_modules/.bin/jake -q bar:bar').toString().trim();\n    assert.equal(out, 'bar:foo task\\nbar:bar task');\n  });\n  test('promise async task', function () {\n    let out = exec('./node_modules/.bin/jake -q bar:dependOnpromise').toString().trim();\n    assert.equal(out, 'bar:promise task\\nbar:dependOnpromise task saw value 123654');\n  });\n  test('failing promise async task', function () {\n    try {\n      exec('./node_modules/.bin/jake -q bar:brokenPromise');\n    } catch (e) {\n      assert(e.message.indexOf('Command failed') > -1);\n    }\n  });\n  test('that current-prereq index gets reset', function () {\n    let out = exec('./node_modules/.bin/jake -q hoge:kira').toString().trim();\n    assert.equal(out, 'hoge:hoge task\\nhoge:piyo task\\nhoge:fuga task\\n' + 'hoge:charan task\\nhoge:gero task\\nhoge:kira task');\n  });\n  test('modifying a task by adding prereq during execution', function () {\n    let out = exec('./node_modules/.bin/jake -q voom').toString().trim();\n    assert.equal(out, 2);\n  });\n  test('listening for task error-event', function () {\n    try {\n      exec('./node_modules/.bin/jake -q vronk:groo').toString().trim();\n    } catch (e) {\n      assert(e.message.indexOf('OMFGZONG') > -1);\n    }\n  });\n  test('listening for jake error-event', function () {\n    let out = exec('./node_modules/.bin/jake -q throwy').toString().trim();\n    assert(out.indexOf('Emitted\\nError: I am bad') > -1);\n  });\n  test('listening for jake unhandledRejection-event', function () {\n    let out = exec('./node_modules/.bin/jake -q promiseRejecter').toString().trim();\n    assert.equal(out, '<promise rejected on purpose>');\n  });\n  test('large number of same prereqs', function () {\n    let out = exec('./node_modules/.bin/jake -q large:same').toString().trim();\n    assert.equal(out, 'large:leaf\\nlarge:same');\n  });\n  test('large number of different prereqs', function () {\n    let out = exec('./node_modules/.bin/jake -q large:different').toString().trim();\n    assert.equal(out, 'leaf-12\\nleaf-123\\nlarge:different');\n  });\n  test('large number of different prereqs', function () {\n    let out = exec('./node_modules/.bin/jake -q usingRequire:test').toString().trim();\n    assert.equal(out, 'howdy test');\n  });\n  test('modifying a namespace by adding a new task', function () {\n    let out = exec('./node_modules/.bin/jake -q one:two').toString().trim();\n    assert.equal('one:one\\none:two', out);\n  });\n});","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/jake/test/integration/task_base.js"],"names":["assert","require","h","exec","execSync","suite","timeout","test","out","toString","trim","equal","res","spawnSync","err","stderr","ok","indexOf","parsed","parse","args","env","foo","baz","e","message"],"mappings":"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","sourcesContent":["let assert = require('assert');\nlet h = require('./helpers');\nlet exec = require('child_process').execSync;\n\nsuite('taskBase', function () {\n\n  this.timeout(7000);\n\n  test('default task', function () {\n    let out;\n    out = exec('./node_modules/.bin/jake -q').toString().trim();\n    assert.equal(out, 'default task');\n    out = exec('./node_modules/.bin/jake -q default').toString().trim();\n    assert.equal(out, 'default task');\n  });\n\n  test('task with no action', function () {\n    let out = exec('./node_modules/.bin/jake -q noAction').toString().trim();\n    assert.equal(out, 'default task');\n  });\n\n  test('a task with no action and no prereqs', function () {\n    exec('./node_modules/.bin/jake noActionNoPrereqs');\n  });\n\n  test('a task that exists at the top-level, and not in the specified namespace, should error', function () {\n    let res = require('child_process').spawnSync('./node_modules/.bin/jake',\n    ['asdfasdfasdf:zerbofrangazoomy']);\n    let err = res.stderr.toString();\n    assert.ok(err.indexOf('Unknown task' > -1));\n  });\n\n  test('passing args to a task', function () {\n    let out = exec('./node_modules/.bin/jake -q argsEnvVars[foo,bar]').toString().trim();\n    let parsed = h.parse(out);\n    let args = parsed.args;\n    assert.equal(args[0], 'foo');\n    assert.equal(args[1], 'bar');\n  });\n\n  test('a task with environment vars', function () {\n    let out = exec('./node_modules/.bin/jake -q argsEnvVars foo=bar baz=qux').toString().trim();\n    let parsed = h.parse(out);\n    let env = parsed.env;\n    assert.equal(env.foo, 'bar');\n    assert.equal(env.baz, 'qux');\n  });\n\n  test('passing args and using environment vars', function () {\n    let out = exec('./node_modules/.bin/jake -q argsEnvVars[foo,bar] foo=bar baz=qux').toString().trim();\n    let parsed = h.parse(out);\n    let args = parsed.args;\n    let env = parsed.env;\n    assert.equal(args[0], 'foo');\n    assert.equal(args[1], 'bar');\n    assert.equal(env.foo, 'bar');\n    assert.equal(env.baz, 'qux');\n  });\n\n  test('a simple prereq', function () {\n    let out = exec('./node_modules/.bin/jake -q foo:baz').toString().trim();\n    assert.equal(out, 'foo:bar task\\nfoo:baz task');\n  });\n\n  test('a duplicate prereq only runs once', function () {\n    let out = exec('./node_modules/.bin/jake -q foo:asdf').toString().trim();\n    assert.equal(out, 'foo:bar task\\nfoo:baz task\\nfoo:asdf task');\n  });\n\n  test('a prereq with command-line args', function () {\n    let out = exec('./node_modules/.bin/jake -q foo:qux').toString().trim();\n    assert.equal(out, 'foo:bar[asdf,qwer] task\\nfoo:qux task');\n  });\n\n  test('a prereq with args via invoke', function () {\n    let out = exec('./node_modules/.bin/jake -q foo:frang[zxcv,uiop]').toString().trim();\n    assert.equal(out, 'foo:bar[zxcv,uiop] task\\nfoo:frang task');\n  });\n\n  test('a prereq with args via execute', function () {\n    let out = exec('./node_modules/.bin/jake -q foo:zerb[zxcv,uiop]').toString().trim();\n    assert.equal(out, 'foo:bar[zxcv,uiop] task\\nfoo:zerb task');\n  });\n\n  test('repeating the task via execute', function () {\n    let out = exec('./node_modules/.bin/jake -q foo:voom').toString().trim();\n    assert.equal(out, 'foo:bar task\\nfoo:bar task\\ncomplete\\ncomplete');\n  });\n\n  test('prereq execution-order', function () {\n    let out = exec('./node_modules/.bin/jake -q hoge:fuga').toString().trim();\n    assert.equal(out, 'hoge:hoge task\\nhoge:piyo task\\nhoge:fuga task');\n  });\n\n  test('basic async task', function () {\n    let out = exec('./node_modules/.bin/jake -q bar:bar').toString().trim();\n    assert.equal(out, 'bar:foo task\\nbar:bar task');\n  });\n\n  test('promise async task', function () {\n    let out = exec('./node_modules/.bin/jake -q bar:dependOnpromise').toString().trim();\n    assert.equal(out, 'bar:promise task\\nbar:dependOnpromise task saw value 123654');\n  });\n\n  test('failing promise async task', function () {\n    try {\n      exec('./node_modules/.bin/jake -q bar:brokenPromise');\n    }\n    catch(e) {\n      assert(e.message.indexOf('Command failed') > -1);\n    }\n  });\n\n  test('that current-prereq index gets reset', function () {\n    let out = exec('./node_modules/.bin/jake -q hoge:kira').toString().trim();\n    assert.equal(out, 'hoge:hoge task\\nhoge:piyo task\\nhoge:fuga task\\n' +\n        'hoge:charan task\\nhoge:gero task\\nhoge:kira task');\n  });\n\n  test('modifying a task by adding prereq during execution', function () {\n    let out = exec('./node_modules/.bin/jake -q voom').toString().trim();\n    assert.equal(out, 2);\n  });\n\n  test('listening for task error-event', function () {\n    try {\n      exec('./node_modules/.bin/jake -q vronk:groo').toString().trim();\n    }\n    catch(e) {\n      assert(e.message.indexOf('OMFGZONG') > -1);\n    }\n  });\n\n  test('listening for jake error-event', function () {\n    let out = exec('./node_modules/.bin/jake -q throwy').toString().trim();\n    assert(out.indexOf('Emitted\\nError: I am bad') > -1);\n  });\n\n  test('listening for jake unhandledRejection-event', function () {\n    let out = exec('./node_modules/.bin/jake -q promiseRejecter').toString().trim();\n    assert.equal(out, '<promise rejected on purpose>');\n  });\n\n  test('large number of same prereqs', function () {\n    let out = exec('./node_modules/.bin/jake -q large:same').toString().trim();\n    assert.equal(out, 'large:leaf\\nlarge:same');\n  });\n\n  test('large number of different prereqs', function () {\n    let out = exec('./node_modules/.bin/jake -q large:different').toString().trim();\n    assert.equal(out, 'leaf-12\\nleaf-123\\nlarge:different');\n  });\n\n  test('large number of different prereqs', function () {\n    let out = exec('./node_modules/.bin/jake -q usingRequire:test').toString().trim();\n    assert.equal(out, 'howdy test');\n  });\n\n  test('modifying a namespace by adding a new task', function () {\n    let out = exec('./node_modules/.bin/jake -q one:two').toString().trim();\n    assert.equal('one:one\\none:two', out);\n  });\n\n});\n"]},"metadata":{},"sourceType":"module"}