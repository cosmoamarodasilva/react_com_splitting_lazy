{"ast":null,"code":"namespace('concurrent', function () {\n  task('A', function () {\n    console.log('Started A');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Finished A');\n        resolve();\n      }, 200);\n    });\n  });\n  task('B', function () {\n    console.log('Started B');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Finished B');\n        resolve();\n      }, 50);\n    });\n  });\n  task('C', function () {\n    console.log('Started C');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Finished C');\n        resolve();\n      }, 100);\n    });\n  });\n  task('D', function () {\n    console.log('Started D');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Finished D');\n        resolve();\n      }, 300);\n    });\n  });\n  task('Ba', ['A'], function () {\n    console.log('Started Ba');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Finished Ba');\n        resolve();\n      }, 50);\n    });\n  });\n  task('Afail', function () {\n    console.log('Started failing task');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Failing B with error');\n        throw new Error('I failed');\n      }, 50);\n    });\n  });\n  task('simple1', ['A', 'B'], {\n    concurrency: 2\n  }, function () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 50);\n    });\n  });\n  task('simple2', ['C', 'D'], {\n    concurrency: 2\n  }, function () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 50);\n    });\n  });\n  task('seqconcurrent', ['simple1', 'simple2'], function () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 50);\n    });\n  });\n  task('concurrentconcurrent', ['simple1', 'simple2'], {\n    concurrency: 2\n  }, function () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 50);\n    });\n  });\n  task('subdep', ['A', 'Ba'], {\n    concurrency: 2\n  }, function () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 50);\n    });\n  });\n  task('fail', ['A', 'B', 'Afail'], {\n    concurrency: 3\n  }, function () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 50);\n    });\n  });\n});","map":{"version":3,"sources":["C:/Users/anafe/OneDrive/Documentos/projeto_com_react2/src/backend/node/node_modules/jake/test/integration/jakelib/concurrent.jake.js"],"names":["namespace","task","console","log","Promise","resolve","reject","setTimeout","Error","concurrency"],"mappings":"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","sourcesContent":["\nnamespace('concurrent', function () {\n  task('A', function () {\n    console.log('Started A');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Finished A');\n        resolve();\n      }, 200);\n    });\n  });\n\n  task('B', function () {\n    console.log('Started B');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Finished B');\n        resolve();\n      }, 50);\n    });\n  });\n\n  task('C', function () {\n    console.log('Started C');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Finished C');\n        resolve();\n      }, 100);\n    });\n  });\n\n  task('D', function () {\n    console.log('Started D');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Finished D');\n        resolve();\n      }, 300);\n    });\n  });\n\n  task('Ba', ['A'], function () {\n    console.log('Started Ba');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Finished Ba');\n        resolve();\n      }, 50);\n    });\n  });\n\n  task('Afail', function () {\n    console.log('Started failing task');\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        console.log('Failing B with error');\n        throw new Error('I failed');\n      }, 50);\n    });\n  });\n\n  task('simple1', ['A','B'], {concurrency: 2}, function () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 50);\n    });\n  });\n\n  task('simple2', ['C','D'], {concurrency: 2}, function () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 50);\n    });\n  });\n\n  task('seqconcurrent', ['simple1','simple2'], function () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 50);\n    });\n  });\n\n  task('concurrentconcurrent', ['simple1','simple2'], {concurrency: 2}, function () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 50);\n    });\n  });\n\n  task('subdep', ['A','Ba'], {concurrency: 2}, function () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 50);\n    });\n  });\n\n  task('fail', ['A', 'B', 'Afail'], {concurrency: 3}, function () {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, 50);\n    });\n  });\n\n});\n\n\n"]},"metadata":{},"sourceType":"module"}